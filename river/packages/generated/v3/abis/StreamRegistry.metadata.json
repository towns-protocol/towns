{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "genesisMiniblockHash",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "bytes",
            "name": "genesisMiniblock",
            "type": "bytes",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamAllocated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "lastMiniblockHash",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "uint64",
            "name": "lastMiniblockNum",
            "type": "uint64",
            "indexed": false
          },
          {
            "internalType": "bool",
            "name": "isSealed",
            "type": "bool",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamLastMiniblockUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "bool",
            "name": "isAdded",
            "type": "bool",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "StreamPlacementUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "address[]",
            "name": "nodes",
            "type": "address[]"
          },
          {
            "internalType": "bytes32",
            "name": "genesisMiniblockHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "genesisMiniblock",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allocateStream"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getAllStreamIds",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "",
            "type": "bytes32[]"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getAllStreams",
        "outputs": [
          {
            "internalType": "struct StreamWithId[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "bytes32",
                "name": "id",
                "type": "bytes32"
              },
              {
                "internalType": "struct Stream",
                "name": "stream",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "lastMiniblockHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "lastMiniblockNum",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "reserved0",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "flags",
                    "type": "uint64"
                  },
                  {
                    "internalType": "address[]",
                    "name": "nodes",
                    "type": "address[]"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "start",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "stop",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getPaginatedStreams",
        "outputs": [
          {
            "internalType": "struct StreamWithId[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "bytes32",
                "name": "id",
                "type": "bytes32"
              },
              {
                "internalType": "struct Stream",
                "name": "stream",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "lastMiniblockHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "lastMiniblockNum",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "reserved0",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "flags",
                    "type": "uint64"
                  },
                  {
                    "internalType": "address[]",
                    "name": "nodes",
                    "type": "address[]"
                  }
                ]
              }
            ]
          },
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStream",
        "outputs": [
          {
            "internalType": "struct Stream",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bytes32",
                "name": "lastMiniblockHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "lastMiniblockNum",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "reserved0",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "flags",
                "type": "uint64"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "i",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamByIndex",
        "outputs": [
          {
            "internalType": "struct StreamWithId",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bytes32",
                "name": "id",
                "type": "bytes32"
              },
              {
                "internalType": "struct Stream",
                "name": "stream",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "lastMiniblockHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "lastMiniblockNum",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "reserved0",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "flags",
                    "type": "uint64"
                  },
                  {
                    "internalType": "address[]",
                    "name": "nodes",
                    "type": "address[]"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamWithGenesis",
        "outputs": [
          {
            "internalType": "struct Stream",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bytes32",
                "name": "lastMiniblockHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "lastMiniblockNum",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "reserved0",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "flags",
                "type": "uint64"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              }
            ]
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getStreamsOnNode",
        "outputs": [
          {
            "internalType": "struct StreamWithId[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "bytes32",
                "name": "id",
                "type": "bytes32"
              },
              {
                "internalType": "struct Stream",
                "name": "stream",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "bytes32",
                    "name": "lastMiniblockHash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "uint64",
                    "name": "lastMiniblockNum",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "reserved0",
                    "type": "uint64"
                  },
                  {
                    "internalType": "uint64",
                    "name": "flags",
                    "type": "uint64"
                  },
                  {
                    "internalType": "address[]",
                    "name": "nodes",
                    "type": "address[]"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "placeStreamOnNode"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeStreamFromNode"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "streamId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "lastMiniblockHash",
            "type": "bytes32"
          },
          {
            "internalType": "uint64",
            "name": "lastMiniblockNum",
            "type": "uint64"
          },
          {
            "internalType": "bool",
            "name": "isSealed",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setStreamLastMiniblock"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "getAllStreamIds()": {
          "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."
        },
        "getAllStreams()": {
          "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."
        },
        "getPaginatedStreams(uint256,uint256)": {
          "details": "Recommended range is 5000 streams, returns true if on the last page."
        },
        "getStreamWithGenesis(bytes32)": {
          "returns": {
            "_0": "stream, genesisMiniblockHash, genesisMiniblock"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "getAllStreamIds()": {
          "notice": "Return array containing all stream ids"
        },
        "getAllStreams()": {
          "notice": "Return array containing all streams"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/@openzeppelin/",
      "@prb/math/=lib/@prb/math/src/",
      "@prb/test/=lib/@prb/test/src/",
      "account-abstraction/=lib/account-abstraction/contracts/",
      "base64/=lib/base64/",
      "ds-test/=lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "hardhat-deploy/=lib/hardhat-deploy/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/river/registry/facets/stream/StreamRegistry.sol": "StreamRegistry"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/river/registry/facets/stream/IStreamRegistry.sol": {
      "keccak256": "0x47337d9108adb07ab81e4c71666f916e96234e9837edde35866116c6627d2ff7",
      "urls": [
        "bzz-raw://d7d8a5ad98688de306264be8e7bd41edc3f141d8e852b6545c07748a13879ac9",
        "dweb:/ipfs/QmPgYxzhakDsbnxPTFvMKKMKh2JmGtvq3nFukdcL4bQCZz"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/river/registry/facets/stream/StreamRegistry.sol": {
      "keccak256": "0xc422b363ffefaf16dafdfa5983a37b5cf7a306ee9c291ebe510212e91159f934",
      "urls": [
        "bzz-raw://965d4bc6045c85fa2fdd3ae4b6f7ef4aba5f3b98d00f0603ddde204c6c5555ac",
        "dweb:/ipfs/Qmah6HuHF1HvGG1D8SD18g3FG1wxuKAMYTdMNUnFaERn8M"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/river/registry/libraries/RegistryErrors.sol": {
      "keccak256": "0x073c3ff0f1206824f3722e2ba22fd7174f9ded4a6111e48e0641e21ed90aabfc",
      "urls": [
        "bzz-raw://62d60cd3958fdb3762972e41aefa899e6b6ac0dac7c94689025f6ba5dc241be3",
        "dweb:/ipfs/QmRRhiC1KXDh5aPPNBEgwbg8wZ9BKWYLJ7jGD9vFzm1kWy"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/river/registry/libraries/RegistryStorage.sol": {
      "keccak256": "0xb365ca80cf19bebeee5c5512b1982e660d0d31043f8bb4864f26e02ec70a117b",
      "urls": [
        "bzz-raw://f2ddea5237c67ec769cf0da7f8da4131979ed34f9c2ad0495c87b65b1ea88e01",
        "dweb:/ipfs/QmQBy2AnbwwTopyCrdcW9cSYPaLpmXRqswxUv5dWYbza1q"
      ],
      "license": "Apache-2.0"
    },
    "lib/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa",
      "urls": [
        "bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1",
        "dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}