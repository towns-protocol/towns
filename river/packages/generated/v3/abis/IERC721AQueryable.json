{"abi":[{"type":"function","name":"explicitOwnershipOf","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IERC721ABase.TokenOwnership","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"startTimestamp","type":"uint64","internalType":"uint64"},{"name":"burned","type":"bool","internalType":"bool"},{"name":"extraData","type":"uint24","internalType":"uint24"}]}],"stateMutability":"view"},{"type":"function","name":"explicitOwnershipsOf","inputs":[{"name":"tokenIds","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IERC721ABase.TokenOwnership[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"startTimestamp","type":"uint64","internalType":"uint64"},{"name":"burned","type":"bool","internalType":"bool"},{"name":"extraData","type":"uint24","internalType":"uint24"}]}],"stateMutability":"view"},{"type":"function","name":"tokensOfOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"tokensOfOwnerIn","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"start","type":"uint256","internalType":"uint256"},{"name":"stop","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"ConsecutiveTransfer","inputs":[{"name":"fromTokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"toTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"ApprovalCallerNotOwnerNorApproved","inputs":[]},{"type":"error","name":"ApprovalQueryForNonexistentToken","inputs":[]},{"type":"error","name":"BalanceQueryForZeroAddress","inputs":[]},{"type":"error","name":"InvalidQueryRange","inputs":[]},{"type":"error","name":"MintERC2309QuantityExceedsLimit","inputs":[]},{"type":"error","name":"MintToZeroAddress","inputs":[]},{"type":"error","name":"MintZeroQuantity","inputs":[]},{"type":"error","name":"OwnerQueryForNonexistentToken","inputs":[]},{"type":"error","name":"OwnershipNotInitializedForExtraData","inputs":[]},{"type":"error","name":"TransferCallerNotOwnerNorApproved","inputs":[]},{"type":"error","name":"TransferFromIncorrectOwner","inputs":[]},{"type":"error","name":"TransferToNonERC721ReceiverImplementer","inputs":[]},{"type":"error","name":"TransferToZeroAddress","inputs":[]},{"type":"error","name":"URIQueryForNonexistentToken","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"explicitOwnershipOf(uint256)":"c23dc68f","explicitOwnershipsOf(uint256[])":"5bbb2177","tokensOfOwner(address)":"8462151c","tokensOfOwnerIn(address,uint256,uint256)":"99a2557a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721ABase.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721ABase.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of ERC721AQueryable.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol\":\"IERC721AQueryable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/@openzeppelin/\",\":@prb/math/=lib/@prb/math/src/\",\":@prb/test/=lib/@prb/test/src/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":base64/=lib/base64/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=lib/hardhat-deploy/\"]},\"sources\":{\"contracts/src/diamond/facets/token/ERC721A/IERC721A.sol\":{\"keccak256\":\"0xfce3dc8955c337c405c27c7741b7beff81685ed89f2e102fbad517043e20edf9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6c0ef999aaa971921ba4a4d2190ce5fae92fe15a34a87aac02fd081773fdbe9e\",\"dweb:/ipfs/QmUFD83GFhupZo2d3PafyK5fjqrzFRDnJHEsTGYhHakzUM\"]},\"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol\":{\"keccak256\":\"0x4f771b745db219765ea57142179c383c3650e70d117e6aaedda07faeab0a2174\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ae401ba6b212057bb5ccaa749cd19b8f3adf81b8f8394d0b73b2b2c138da21c2\",\"dweb:/ipfs/QmSPd32GxN6L1K157yuRXvRBXPeNLa7TiKE93ouH8ccR6V\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ApprovalCallerNotOwnerNorApproved"},{"inputs":[],"type":"error","name":"ApprovalQueryForNonexistentToken"},{"inputs":[],"type":"error","name":"BalanceQueryForZeroAddress"},{"inputs":[],"type":"error","name":"InvalidQueryRange"},{"inputs":[],"type":"error","name":"MintERC2309QuantityExceedsLimit"},{"inputs":[],"type":"error","name":"MintToZeroAddress"},{"inputs":[],"type":"error","name":"MintZeroQuantity"},{"inputs":[],"type":"error","name":"OwnerQueryForNonexistentToken"},{"inputs":[],"type":"error","name":"OwnershipNotInitializedForExtraData"},{"inputs":[],"type":"error","name":"TransferCallerNotOwnerNorApproved"},{"inputs":[],"type":"error","name":"TransferFromIncorrectOwner"},{"inputs":[],"type":"error","name":"TransferToNonERC721ReceiverImplementer"},{"inputs":[],"type":"error","name":"TransferToZeroAddress"},{"inputs":[],"type":"error","name":"URIQueryForNonexistentToken"},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"approved","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"uint256","name":"fromTokenId","type":"uint256","indexed":true},{"internalType":"uint256","name":"toTokenId","type":"uint256","indexed":false},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true}],"type":"event","name":"ConsecutiveTransfer","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"explicitOwnershipOf","outputs":[{"internalType":"struct IERC721ABase.TokenOwnership","name":"","type":"tuple","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"uint64","name":"startTimestamp","type":"uint64"},{"internalType":"bool","name":"burned","type":"bool"},{"internalType":"uint24","name":"extraData","type":"uint24"}]}]},{"inputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"explicitOwnershipsOf","outputs":[{"internalType":"struct IERC721ABase.TokenOwnership[]","name":"","type":"tuple[]","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"uint64","name":"startTimestamp","type":"uint64"},{"internalType":"bool","name":"burned","type":"bool"},{"internalType":"uint24","name":"extraData","type":"uint24"}]}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function","name":"tokensOfOwner","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"stop","type":"uint256"}],"stateMutability":"view","type":"function","name":"tokensOfOwnerIn","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]}],"devdoc":{"kind":"dev","methods":{"explicitOwnershipOf(uint256)":{"details":"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"},"explicitOwnershipsOf(uint256[])":{"details":"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"},"tokensOfOwner(address)":{"details":"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."},"tokensOfOwnerIn(address,uint256,uint256)":{"details":"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/@openzeppelin/","@prb/math/=lib/@prb/math/src/","@prb/test/=lib/@prb/test/src/","account-abstraction/=lib/account-abstraction/contracts/","base64/=lib/base64/","ds-test/=lib/ds-test/src/","forge-std/=lib/forge-std/src/","hardhat-deploy/=lib/hardhat-deploy/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol":"IERC721AQueryable"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/src/diamond/facets/token/ERC721A/IERC721A.sol":{"keccak256":"0xfce3dc8955c337c405c27c7741b7beff81685ed89f2e102fbad517043e20edf9","urls":["bzz-raw://6c0ef999aaa971921ba4a4d2190ce5fae92fe15a34a87aac02fd081773fdbe9e","dweb:/ipfs/QmUFD83GFhupZo2d3PafyK5fjqrzFRDnJHEsTGYhHakzUM"],"license":"Apache-2.0"},"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol":{"keccak256":"0x4f771b745db219765ea57142179c383c3650e70d117e6aaedda07faeab0a2174","urls":["bzz-raw://ae401ba6b212057bb5ccaa749cd19b8f3adf81b8f8394d0b73b2b2c138da21c2","dweb:/ipfs/QmSPd32GxN6L1K157yuRXvRBXPeNLa7TiKE93ouH8ccR6V"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/src/diamond/facets/token/ERC721A/extensions/IERC721AQueryable.sol","id":19747,"exportedSymbols":{"IERC721ABase":[19205],"IERC721AQueryable":[19746]},"nodeType":"SourceUnit","src":"39:2315:132","nodes":[{"id":19695,"nodeType":"PragmaDirective","src":"39:24:132","nodes":[],"literals":["solidity","^","0.8",".23"]},{"id":19697,"nodeType":"ImportDirective","src":"79:45:132","nodes":[],"absolutePath":"contracts/src/diamond/facets/token/ERC721A/IERC721A.sol","file":"../IERC721A.sol","nameLocation":"-1:-1:-1","scope":19747,"sourceUnit":19318,"symbolAliases":[{"foreign":{"id":19696,"name":"IERC721ABase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19205,"src":"87:12:132","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":19746,"nodeType":"ContractDefinition","src":"201:2152:132","nodes":[{"id":19703,"nodeType":"ErrorDefinition","src":"307:26:132","nodes":[],"documentation":{"id":19701,"nodeType":"StructuredDocumentation","src":"249:55:132","text":" Invalid query range (`start` >= `stop`)."},"errorSelector":"32c1995a","name":"InvalidQueryRange","nameLocation":"313:17:132","parameters":{"id":19702,"nodeType":"ParameterList","parameters":[],"src":"330:2:132"}},{"id":19712,"nodeType":"FunctionDefinition","src":"1021:100:132","nodes":[],"documentation":{"id":19704,"nodeType":"StructuredDocumentation","src":"337:681:132","text":" @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n If the `tokenId` is out of bounds:\n - `addr = address(0)`\n - `startTimestamp = 0`\n - `burned = false`\n - `extraData = 0`\n If the `tokenId` is burned:\n - `addr = <Address of owner before token was burned>`\n - `startTimestamp = <Timestamp when token was burned>`\n - `burned = true`\n - `extraData = <Extra data when token was burned>`\n Otherwise:\n - `addr = <Address of owner>`\n - `startTimestamp = <Timestamp of start of ownership>`\n - `burned = false`\n - `extraData = <Extra data at start of ownership>`"},"functionSelector":"c23dc68f","implemented":false,"kind":"function","modifiers":[],"name":"explicitOwnershipOf","nameLocation":"1030:19:132","parameters":{"id":19707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19706,"mutability":"mutable","name":"tokenId","nameLocation":"1063:7:132","nodeType":"VariableDeclaration","scope":19712,"src":"1055:15:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1049:25:132"},"returnParameters":{"id":19711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":19712,"src":"1098:21:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$19127_memory_ptr","typeString":"struct IERC721ABase.TokenOwnership"},"typeName":{"id":19709,"nodeType":"UserDefinedTypeName","pathNode":{"id":19708,"name":"TokenOwnership","nameLocations":["1098:14:132"],"nodeType":"IdentifierPath","referencedDeclaration":19127,"src":"1098:14:132"},"referencedDeclaration":19127,"src":"1098:14:132","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$19127_storage_ptr","typeString":"struct IERC721ABase.TokenOwnership"}},"visibility":"internal"}],"src":"1097:23:132"},"scope":19746,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":19723,"nodeType":"FunctionDefinition","src":"1264:113:132","nodes":[],"documentation":{"id":19713,"nodeType":"StructuredDocumentation","src":"1125:136:132","text":" @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n See {ERC721AQueryable-explicitOwnershipOf}"},"functionSelector":"5bbb2177","implemented":false,"kind":"function","modifiers":[],"name":"explicitOwnershipsOf","nameLocation":"1273:20:132","parameters":{"id":19717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19716,"mutability":"mutable","name":"tokenIds","nameLocation":"1316:8:132","nodeType":"VariableDeclaration","scope":19723,"src":"1299:25:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":19714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1299:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":19715,"nodeType":"ArrayTypeName","src":"1299:9:132","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1293:35:132"},"returnParameters":{"id":19722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":19723,"src":"1352:23:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenOwnership_$19127_memory_ptr_$dyn_memory_ptr","typeString":"struct IERC721ABase.TokenOwnership[]"},"typeName":{"baseType":{"id":19719,"nodeType":"UserDefinedTypeName","pathNode":{"id":19718,"name":"TokenOwnership","nameLocations":["1352:14:132"],"nodeType":"IdentifierPath","referencedDeclaration":19127,"src":"1352:14:132"},"referencedDeclaration":19127,"src":"1352:14:132","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$19127_storage_ptr","typeString":"struct IERC721ABase.TokenOwnership"}},"id":19720,"nodeType":"ArrayTypeName","src":"1352:16:132","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenOwnership_$19127_storage_$dyn_storage_ptr","typeString":"struct IERC721ABase.TokenOwnership[]"}},"visibility":"internal"}],"src":"1351:25:132"},"scope":19746,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":19736,"nodeType":"FunctionDefinition","src":"1725:126:132","nodes":[],"documentation":{"id":19724,"nodeType":"StructuredDocumentation","src":"1381:341:132","text":" @dev Returns an array of token IDs owned by `owner`,\n in the range [`start`, `stop`)\n (i.e. `start <= tokenId < stop`).\n This function allows for tokens to be queried if the collection\n grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n Requirements:\n - `start < stop`"},"functionSelector":"99a2557a","implemented":false,"kind":"function","modifiers":[],"name":"tokensOfOwnerIn","nameLocation":"1734:15:132","parameters":{"id":19731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19726,"mutability":"mutable","name":"owner","nameLocation":"1763:5:132","nodeType":"VariableDeclaration","scope":19736,"src":"1755:13:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19725,"name":"address","nodeType":"ElementaryTypeName","src":"1755:7:132","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":19728,"mutability":"mutable","name":"start","nameLocation":"1782:5:132","nodeType":"VariableDeclaration","scope":19736,"src":"1774:13:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19727,"name":"uint256","nodeType":"ElementaryTypeName","src":"1774:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":19730,"mutability":"mutable","name":"stop","nameLocation":"1801:4:132","nodeType":"VariableDeclaration","scope":19736,"src":"1793:12:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19729,"name":"uint256","nodeType":"ElementaryTypeName","src":"1793:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1749:60:132"},"returnParameters":{"id":19735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":19736,"src":"1833:16:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":19732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1833:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":19733,"nodeType":"ArrayTypeName","src":"1833:9:132","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1832:18:132"},"scope":19746,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":19745,"nodeType":"FunctionDefinition","src":"2264:87:132","nodes":[],"documentation":{"id":19737,"nodeType":"StructuredDocumentation","src":"1855:406:132","text":" @dev Returns an array of token IDs owned by `owner`.\n This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n It is meant to be called off-chain.\n See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n multiple smaller scans if the collection is large enough to cause\n an out-of-gas error (10K collections should be fine)."},"functionSelector":"8462151c","implemented":false,"kind":"function","modifiers":[],"name":"tokensOfOwner","nameLocation":"2273:13:132","parameters":{"id":19740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19739,"mutability":"mutable","name":"owner","nameLocation":"2300:5:132","nodeType":"VariableDeclaration","scope":19745,"src":"2292:13:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19738,"name":"address","nodeType":"ElementaryTypeName","src":"2292:7:132","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2286:23:132"},"returnParameters":{"id":19744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":19745,"src":"2333:16:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":19741,"name":"uint256","nodeType":"ElementaryTypeName","src":"2333:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":19742,"nodeType":"ArrayTypeName","src":"2333:9:132","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2332:18:132"},"scope":19746,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":19699,"name":"IERC721ABase","nameLocations":["232:12:132"],"nodeType":"IdentifierPath","referencedDeclaration":19205,"src":"232:12:132"},"id":19700,"nodeType":"InheritanceSpecifier","src":"232:12:132"}],"canonicalName":"IERC721AQueryable","contractDependencies":[],"contractKind":"interface","documentation":{"id":19698,"nodeType":"StructuredDocumentation","src":"154:46:132","text":" @dev Interface of ERC721AQueryable."},"fullyImplemented":false,"linearizedBaseContracts":[19746,19205],"name":"IERC721AQueryable","nameLocation":"211:17:132","scope":19747,"usedErrors":[19130,19133,19136,19139,19142,19145,19148,19151,19154,19157,19160,19163,19166,19703],"usedEvents":[19175,19184,19193,19204]}],"license":"Apache-2.0"},"id":132}