{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "AddressEmptyCode"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "AddressInsufficientBalance"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ApprovalCallerNotOwnerNorApproved"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ApprovalQueryForNonexistentToken"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "BalanceQueryForZeroAddress"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "Banning__AlreadyBanned"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Banning__CannotBanSelf"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "Banning__InvalidTokenId"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "Banning__NotBanned"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ERC5643__DurationZero"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "ERC5643__InvalidTokenId"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ERC5643__NotApprovedOrOwner"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "ERC5643__SubscriptionNotRenewable"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Entitlement__InvalidValue"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Entitlement__NotAllowed"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Entitlement__NotMember"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Entitlement__ValueAlreadyExists"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "FailedInnerCall"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_InInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_NotInInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_AlreadySupported"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_NotSupported"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__AlreadyMember"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InsufficientPayment"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidCurrency"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidDuration"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidFeeRecipient"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidFreeAllocation"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidLimit"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidMaxSupply"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidPrice"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidPricingModule"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidReferralBps"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidReferralCode"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidReferralTime"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__InvalidTokenId"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__MaxSupplyReached"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__NotExpired"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__NotRenewable"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Membership__PriceTooLow"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "MintERC2309QuantityExceedsLimit"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "MintToZeroAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "MintZeroQuantity"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "Ownable__NotOwner"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Ownable__ZeroAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "OwnerQueryForNonexistentToken"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "OwnershipNotInitializedForExtraData"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Pausable__NotPaused"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Pausable__Paused"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ReentrancyGuard__ReentrantCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "SafeERC20FailedOperation"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "TransferCallerNotOwnerNorApproved"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "TransferFromIncorrectOwner"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "TransferToNonERC721ReceiverImplementer"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "TransferToZeroAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "URIQueryForNonexistentToken"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "approved",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "Approval",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "ApprovalForAll",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "Banned",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "fromTokenId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "toTokenId",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "from",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "ConsecutiveTransfer",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Initialized",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceRemoved",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "currency",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "MembershipCurrencyUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "MembershipFeeRecipientUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "allocation",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "MembershipFreeAllocationUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "limit",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "MembershipLimitUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "price",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "MembershipPriceUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "code",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint16",
            "name": "bps",
            "type": "uint16",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Membership__ReferralCreated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "code",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "Membership__ReferralRemoved",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "code",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint16",
            "name": "bps",
            "type": "uint16",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "startTime",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "endTime",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Membership__ReferralTimeCreated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Paused",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint64",
            "name": "expiration",
            "type": "uint64",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "SubscriptionUpdate",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "Transfer",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "Unbanned",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Unpaused",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name_",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol_",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "__ERC721A_init"
      },
      {
        "inputs": [
          {
            "internalType": "struct IMembershipBase.Membership",
            "name": "info",
            "type": "tuple",
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "symbol",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxSupply",
                "type": "uint256"
              },
              {
                "internalType": "uint64",
                "name": "duration",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "feeRecipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "freeAllocation",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "pricingModule",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "address",
            "name": "spaceFactory",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "__Membership_init"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "_getMembershipCurrency",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "_getMembershipFeeRecipient",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "_getMembershipFreeAllocation",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "totalSupply",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "_getMembershipPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "_getMembershipSupplyLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "_getPricingModule",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "_getSpaceFactory",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newCurrency",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "_setMembershipCurrency"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newRecipient",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "_setMembershipFeeRecipient"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newAllocation",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "_setMembershipFreeAllocation"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newPrice",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "_setMembershipPrice"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newLimit",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "_setMembershipSupplyLimit"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newPricingModule",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "_setPricingModule"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "approve"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "cancelMembership"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "expiresAt",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipCurrency",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipDuration",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "",
            "type": "uint64"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipFeeRecipient",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipFreeAllocation",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipPricingModule",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getMembershipRenewalPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getSpaceFactory",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "member",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getTokenIdByMembership",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "joinSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "referrer",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "referralCode",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "joinSpaceWithReferral",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "renewMembership"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "safeTransferFrom"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "safeTransferFrom"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setApprovalForAll"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newCurrency",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMembershipCurrency"
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "newDuration",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMembershipDuration"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newRecipient",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMembershipFeeRecipient"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newAllocation",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMembershipFreeAllocation"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newLimit",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMembershipLimit"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newPrice",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMembershipPrice"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "pricingModule",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMembershipPricingModule"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "transferFrom"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "_getMembershipPrice(uint256)": {
          "details": "Makes it virtual to allow other pricing strategies"
        },
        "approve(address,uint256)": {
          "details": "Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}. Requirements: - The caller must own the token or be an approved operator."
        },
        "cancelMembership(uint256)": {
          "params": {
            "tokenId": "The token id of the membership"
          }
        },
        "expiresAt(uint256)": {
          "params": {
            "tokenId": "The token id of the membership"
          }
        },
        "getApproved(uint256)": {
          "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "getMembershipCurrency()": {
          "returns": {
            "_0": "The membership currency"
          }
        },
        "getMembershipDuration()": {
          "returns": {
            "_0": "The membership duration"
          }
        },
        "getMembershipFeeRecipient()": {
          "returns": {
            "_0": "The membership fee recipient"
          }
        },
        "getMembershipFreeAllocation()": {
          "returns": {
            "_0": "The membership free allocation"
          }
        },
        "getMembershipLimit()": {
          "returns": {
            "_0": "The membership limit"
          }
        },
        "getMembershipPrice()": {
          "returns": {
            "_0": "The membership price"
          }
        },
        "getMembershipPricingModule()": {
          "returns": {
            "_0": "The membership pricing module"
          }
        },
        "getMembershipRenewalPrice(uint256)": {
          "params": {
            "tokenId": "The token id of the membership"
          },
          "returns": {
            "_0": "The membership renewal price"
          }
        },
        "getSpaceFactory()": {
          "returns": {
            "_0": "The space factory"
          }
        },
        "getTokenIdByMembership(address)": {
          "params": {
            "membership": "The account address that holds the membership"
          }
        },
        "isApprovedForAll(address,address)": {
          "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
        },
        "joinSpace(address)": {
          "params": {
            "receiver": "The address of the receiver"
          },
          "returns": {
            "tokenId": "The token id of the membership"
          }
        },
        "joinSpaceWithReferral(address,address,uint256)": {
          "params": {
            "receiver": "The address of the receiver",
            "referralCode": "The referral code",
            "referrer": "The address of the referrer"
          },
          "returns": {
            "tokenId": "The token id of the membership"
          }
        },
        "name()": {
          "details": "Returns the token collection name."
        },
        "ownerOf(uint256)": {
          "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "renewMembership(address)": {
          "params": {
            "receiver": "The address of the receiver"
          }
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
        },
        "setApprovalForAll(address,bool)": {
          "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
        },
        "setMembershipCurrency(address)": {
          "params": {
            "newCurrency": "The new membership currency"
          }
        },
        "setMembershipDuration(uint64)": {
          "params": {
            "newDuration": "The new membership duration"
          }
        },
        "setMembershipFeeRecipient(address)": {
          "params": {
            "newRecipient": "The new membership fee recipient"
          }
        },
        "setMembershipFreeAllocation(uint256)": {
          "params": {
            "newAllocation": "The new membership free allocation"
          }
        },
        "setMembershipLimit(uint256)": {
          "params": {
            "newLimit": "The new membership limit"
          }
        },
        "setMembershipPrice(uint256)": {
          "params": {
            "newPrice": "The new membership price"
          }
        },
        "setMembershipPricingModule(address)": {
          "params": {
            "pricingModule": "The new pricing module"
          }
        },
        "symbol()": {
          "details": "Returns the token collection symbol."
        },
        "tokenURI(uint256)": {
          "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
        },
        "totalSupply()": {
          "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
        },
        "transferFrom(address,address,uint256)": {
          "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "cancelMembership(uint256)": {
          "notice": "Cancel a space membership"
        },
        "expiresAt(uint256)": {
          "notice": "Return the expiration date of a membership"
        },
        "getMembershipCurrency()": {
          "notice": "Get the membership currency"
        },
        "getMembershipDuration()": {
          "notice": "Get the membership duration"
        },
        "getMembershipFeeRecipient()": {
          "notice": "Get the membership fee recipient"
        },
        "getMembershipFreeAllocation()": {
          "notice": "Get the membership free allocation"
        },
        "getMembershipLimit()": {
          "notice": "Get the membership limit"
        },
        "getMembershipPrice()": {
          "notice": "Get the membership price"
        },
        "getMembershipPricingModule()": {
          "notice": "Get the membership pricing module"
        },
        "getMembershipRenewalPrice(uint256)": {
          "notice": "Get the membership renewal price"
        },
        "getSpaceFactory()": {
          "notice": "Get the space factory"
        },
        "getTokenIdByMembership(address)": {
          "notice": "Return the token id associated to the membership"
        },
        "joinSpace(address)": {
          "notice": "Join a space"
        },
        "joinSpaceWithReferral(address,address,uint256)": {
          "notice": "Join a space with a referral"
        },
        "renewMembership(address)": {
          "notice": "Renew a space membership"
        },
        "setMembershipCurrency(address)": {
          "notice": "Set the membership currency"
        },
        "setMembershipDuration(uint64)": {
          "notice": "Set the membership duration"
        },
        "setMembershipFeeRecipient(address)": {
          "notice": "Set the membership fee recipient"
        },
        "setMembershipFreeAllocation(uint256)": {
          "notice": "Set the membership free allocation"
        },
        "setMembershipLimit(uint256)": {
          "notice": "Set the membership limit"
        },
        "setMembershipPrice(uint256)": {
          "notice": "Set the membership price"
        },
        "setMembershipPricingModule(address)": {
          "notice": "Set the membership pricing module"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/@openzeppelin/",
      "@prb/math/=lib/@prb/math/src/",
      "@prb/test/=lib/@prb/test/src/",
      "account-abstraction/=lib/account-abstraction/contracts/",
      "base64/=lib/base64/",
      "ds-test/=lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "hardhat-deploy/=lib/hardhat-deploy/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/spaces/facets/membership/MembershipFacet.sol": "MembershipFacet"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/crosschain/IRuleEntitlement.sol": {
      "keccak256": "0x3da336bbe54d6a62cb521d47af057095a307042d5741e08d7cf190552f4616b0",
      "urls": [
        "bzz-raw://2139ec62b79becb583e95f8d8d7ba941769ff26efdea56ff3f2322a5ad2a55a7",
        "dweb:/ipfs/QmSsZXgEEALmakJT5a2QfuE2EoMJ27o7UFQYP3DA2fm4EU"
      ],
      "license": "MIT"
    },
    "contracts/src/crosschain/RuleEntitlementUtil.sol": {
      "keccak256": "0xa64295d54d0af042601e56650a852b3b053e407da0c13bc8fcd17766936b6443",
      "urls": [
        "bzz-raw://226a0d8e915e8525fde25914c7e69b016775cdd2a4fba2362ea13dfd4ed705c3",
        "dweb:/ipfs/QmcqC9USu4Fk1TX8zg399zboyShdGyxfMcLdtbcAJJvLvz"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/Facet.sol": {
      "keccak256": "0xecbb7e8de0dae5bdbcbda879436335abac6808bcc2e14f1f4e9efbdc77c4e8be",
      "urls": [
        "bzz-raw://b7b5446461a1492f16c86137ce49a699d8a3452e2174c5568b97f8d2d4bc85a7",
        "dweb:/ipfs/QmY74odf1qgTwBV3wjF12rV8TXs3DiNoMm9Pg9S8w2F4VP"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0xe02e99665b5acb22d5c508c3bda97c35acd2597ce0a58569a19cc12f0010da90",
      "urls": [
        "bzz-raw://b586a51dbe63e8763ae0b2b3dadd5c8559f47bc8cbaa0e9fe52aaec4c3677552",
        "dweb:/ipfs/QmRtaVikg6YDwzUAtY7WV793taZgT1ZxyMB4PLAEqGBeCC"
      ],
      "license": "MIT"
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0x5dbbdca0faf75680e1c0d425d92bdb5ce16951c0f8215a668c5144c0ffdb1b01",
      "urls": [
        "bzz-raw://05e5ba4fcd6e3e1e819e786fce3473d5ef69763b127fe162b2e0906d6a904d09",
        "dweb:/ipfs/QmYPN5xeMoMBVT2B2FwJrDpwocNNsCuVosgg7vdYrrWNep"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x243cfeefa64ba07bee887b0b03704147f9bd2f25571272a6ebca3ba684af1b00",
      "urls": [
        "bzz-raw://1aed67ea7251fad9dbfb58a30f59f7edd81d48d7f6b193b98f957be359653361",
        "dweb:/ipfs/QmQauJL4nFMN3QDutjWezRbBjLX5GsTWt5jeLfkX4JW64T"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x5f458cf292b4b7b9d9c1efd110b3b65905c7bd7e47a48090af5eb9fb7d620ddf",
      "urls": [
        "bzz-raw://84995121aafc9124ba3a1148835dcccc1061c25a5b074b4579a83c0dd213d613",
        "dweb:/ipfs/QmPYSKEqYWasPxVRzv4TCpXVfpkahfFDEPkTLp7UAT9fKq"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x2e047e5efa9df7f3d60a8a114da39343635578b7475fcd987860eb5b87e8c758",
      "urls": [
        "bzz-raw://a071eda8331b690b689bbbc23e6a6c227324aad90d4101c36410a06b1ca3c357",
        "dweb:/ipfs/QmTR76zN1durS5acgDZXixrkrheXvaaMqfwXrJsaGyAPkj"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0xec6475a73e1229430edadb6fd3e32f1599ebb8af78dbbc762d54ded196e534ae",
      "urls": [
        "bzz-raw://46e9fef226666c827f408b5d2c9061600fa5233ddf5fcbc3a2b8956d89e8a872",
        "dweb:/ipfs/Qmd6L6wtehyrD8XwKqFD7gG5hJxsBZ1ja6hGSf2dtN4XEx"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/ownable/token/ITokenOwnable.sol": {
      "keccak256": "0x3035bb5eb69a7c939aa038f27eb216b117727beba7d89aa84657c3f24c98b32d",
      "urls": [
        "bzz-raw://c1a6860c8105dad4d1b193883ecd700c223ea9b81c096ed86b3d25bd6c9eed7f",
        "dweb:/ipfs/QmVEDbbF6eyZfmqcM1FfedAuCQqiUYpagDmZMhHM4Ap7n9"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableBase.sol": {
      "keccak256": "0xc5ef68652f692a56131badcf0adb92893d822fd5e0d97dda49a4520d1859a00a",
      "urls": [
        "bzz-raw://bf38ee4ec154de7ef7de263241454d98392d6e61caf4582e2145325258bb8fa5",
        "dweb:/ipfs/QmcZGn5KeSPwsTVominE537CDPbTMGoVDgko51onHZoGyW"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableStorage.sol": {
      "keccak256": "0xb348f08d762f1b4ccda363a361eb6d635b50501e93821fe9911296f86f4374f0",
      "urls": [
        "bzz-raw://4416ee362b1485fb1cbae83087f7da85d34fec41a39146bd1fb9f877094df0fc",
        "dweb:/ipfs/QmPiCdrarzwS1YLYLPpcPMFxhkqE5rT9EFLYsVCV2N5Qkf"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/pausable/IPausable.sol": {
      "keccak256": "0xd5cc8d743bd12bbd23526178c11808634527c87e2f6da29dfb6aec75dab56261",
      "urls": [
        "bzz-raw://c893da163481570ae2e00e5deae732404261cc0e7143fdc0448145810448c6b6",
        "dweb:/ipfs/QmbyUkcew8vmUXPVLDJ7GjvxMkmTqjhKZWLDYtWEPzZ2SM"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/pausable/PausableBase.sol": {
      "keccak256": "0xa278c9cdc622351a088d6d96759a51972b1720ef72424f1f98e5822dd9fd6438",
      "urls": [
        "bzz-raw://379dabb0f68319e89d4b7447c31d5a3d0d2b4ecbce92b07f6e096974f2541c6c",
        "dweb:/ipfs/QmPQPKBYtuNiFDNh9nGCJGtLXP2AqPLkZ7BBTKgQZeaVH1"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/pausable/PausableStorage.sol": {
      "keccak256": "0x54ca45de7b414be27767111aa11f06e9d5deeb3241bb4c9476edda7febd92c07",
      "urls": [
        "bzz-raw://0e573c53f32ec5c9c89e68ca9e2153635fcb2694ba261e93389dc360ef98226b",
        "dweb:/ipfs/QmQUfuRRg8zRFzrqfYaay7RyR2L4D4d4vb4c2TtUqb2GhL"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/reentrancy/IReentrancyGuard.sol": {
      "keccak256": "0xcf0384936029c121c827aca432891d18f7c7db3d234dfbdad69373726d41003a",
      "urls": [
        "bzz-raw://6c7127aa6cc24cb43dac1bea76e16b09c2ce26421baf08792f767d6b204ba39b",
        "dweb:/ipfs/QmSziExRUyaUEVteBXtsxkNMgcdXS9PPaDdCNdLvivcFJq"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/reentrancy/ReentrancyGuard.sol": {
      "keccak256": "0x96999935d243afdc7370154431fef7de13cd74b892949070d8488d5ad83dfa4f",
      "urls": [
        "bzz-raw://e5978c51e1bab72ec8d3a8e5bb80c7e2bcac60c08d04b3406b6863efb585100c",
        "dweb:/ipfs/QmUDtXQHEx1kgQeEQ5Sui9xdDQgf931ts2ZCKpwfH88U4T"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/reentrancy/ReentrancyGuardStorage.sol": {
      "keccak256": "0xbfd5548227b70eec020b03bdec1ae0ef0b51c5e3380147153a93c0f03c5e630c",
      "urls": [
        "bzz-raw://dab049fa3dd63981697ccffab59be2e6d531a77692c80c857ce54ee8484bd6a6",
        "dweb:/ipfs/QmYVE2qptk62RDXSFJMYUYSUzjksxbHEVtG3pBP8m3s9VC"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/token/ERC5643/ERC5643Base.sol": {
      "keccak256": "0x08a5e803cae11a5ca3cb43e3243b4af0339cf044fe8a8f33c02eeac6a89771a3",
      "urls": [
        "bzz-raw://1b9dffbbd0c961d87eeaa10665ed93a3a919dc53db0e684b76d66b0f7e2a0714",
        "dweb:/ipfs/QmbgTB2swkeRsc7Dc1Wf28cLcKTExw2pzDY66zy5kFLeE8"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/token/ERC5643/ERC5643Storage.sol": {
      "keccak256": "0x5d560d4d09c521bd463e6ea41eb6451a76f815222d9b3a9b15aff5ce56a2e15e",
      "urls": [
        "bzz-raw://395630900bc5b43af14ba8b2b9a97357d9b36ed2debfb72b4fab1999294645c7",
        "dweb:/ipfs/QmNa6GUiCLSnL3jRKewzpC5TU5TtYxdNNUhPHTqoZ4sGC7"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/token/ERC5643/IERC5643.sol": {
      "keccak256": "0x3d75267c3894bc9b201b30af94a4587cca8dc3363593a47ee4cc3b9ff27a7218",
      "urls": [
        "bzz-raw://3e50378e2ca909177555139f16db11f2fc7f3e97acbc40fc6eea5848bbd61b3f",
        "dweb:/ipfs/Qmdi2FBhdWAAFE8Kr5DFu9qoESLcH1STb7bm7kXxEjrsJB"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721A.sol": {
      "keccak256": "0xc8fab662d9a0c4e697c8dcaad72dd2a190331b01476649a742b6f317266ac5a1",
      "urls": [
        "bzz-raw://9c84047a6d47a901f45f90f12f713432289ae6d88fea95a383900906005cf70b",
        "dweb:/ipfs/QmVdLUVdtjTQn2fCG85Uv2ZAzCSfNbWYcAg5eXthunnigc"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721ABase.sol": {
      "keccak256": "0xe1d57f0d29b0e5fa88e1d7e7384dc5c20901dfdfb81adb667c749cba57673b34",
      "urls": [
        "bzz-raw://d2282b33d16f31635acdc951a6e193d88b35d446d81518605006841cd2fcdb25",
        "dweb:/ipfs/QmSBEbcBkYMmZnfaNWGTkbvMMdMFwU9xrBsKLNZPduwFwc"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721AStorage.sol": {
      "keccak256": "0x8be3fa58d9bb445d169eda30dd35f34e149947eb0572cdb2ced99ed854b8cdc1",
      "urls": [
        "bzz-raw://1b3d9b6c0aef7519ce60c08880a551a0579ae1625e16f89a728700f2eb7e075c",
        "dweb:/ipfs/QmZfS4Lt9mZBPpYxehPb5p9VAGGVdKGkHpZyhoKTP2rSUu"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/diamond/facets/token/ERC721A/IERC721A.sol": {
      "keccak256": "0xfce3dc8955c337c405c27c7741b7beff81685ed89f2e102fbad517043e20edf9",
      "urls": [
        "bzz-raw://6c0ef999aaa971921ba4a4d2190ce5fae92fe15a34a87aac02fd081773fdbe9e",
        "dweb:/ipfs/QmUFD83GFhupZo2d3PafyK5fjqrzFRDnJHEsTGYhHakzUM"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/river/wallet-link/IWalletLink.sol": {
      "keccak256": "0x0d6f4b0d6ba2cca41f652356d895c411c0bcb83325349dd5a2839c7e84833e4f",
      "urls": [
        "bzz-raw://6bab70c4eb1bbce65f3346c75f403e995d40412c12b5f7e19c196240ba184a73",
        "dweb:/ipfs/QmakgkJykNfCDWBVfiiXtSKKhopTrerWFFY7kYadQtYSit"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/entitlements/IEntitlement.sol": {
      "keccak256": "0xfb0b5432f19724a40e91cd841bc7306580c2a24574ed2734257e3fef24cabbc3",
      "urls": [
        "bzz-raw://d2c0f0650e41b380dadf79b611c56c0807f44cfdbb984a3eafe776c87ab2c3b3",
        "dweb:/ipfs/QmQLnsPQa1LWm5JSchGYngWYMdV4N9te6HrD8rMhWprGog"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/Entitled.sol": {
      "keccak256": "0x9abbb553a67d159f68ff9ffbba362773c2f6a99d617ae189c1a144f75a6be75b",
      "urls": [
        "bzz-raw://31835e9cd03aceec279e348e6d9cff401a62ff2308bd4ea0b2ea403a8752a8ee",
        "dweb:/ipfs/QmexE37D163SKjEn8V8tVQMNY1pR5zeoTSh6mx3ByaDt1y"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/Permissions.sol": {
      "keccak256": "0x9ec12f93daf62e46af526c0c44cde0df8c4b848da6a5f0909854cce126d1e365",
      "urls": [
        "bzz-raw://2c22749f53f52f76ab40a6d49260af16b6f80cb4304f4d68c04c0dfbd1001bc3",
        "dweb:/ipfs/QmcZJJWVntsNgo85QZke3q4dBwXjzrrza7omrtNhemibNa"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/banning/BanningBase.sol": {
      "keccak256": "0x081717ddc83bd5c7e1711349b0fd40483d33b883ca0d22233248c6c6acaabd86",
      "urls": [
        "bzz-raw://1bf01486a8cc5da312326bcf408d168f008e56673b8f53a91f2b866b7d7a04c1",
        "dweb:/ipfs/QmfFfoXRJQ9cd9EMrRa1GHoTuJR7RmBg9Pku5cHbUZ2BnM"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/banning/BanningStorage.sol": {
      "keccak256": "0xd48969bfaf9c8bfc980981818ed96101e858652f5516567c08236ce525487492",
      "urls": [
        "bzz-raw://95f1b33fb46ea8d8ed6145d4f646dca4f670712dca81ec75cab5db2dbff6e0f0",
        "dweb:/ipfs/QmPfCAZF3S5ehqKoL2SBg2TEB22TKFuytDNcG8PBa7qVe1"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/banning/IBanning.sol": {
      "keccak256": "0xe3103b5dc55339fb620ab3cd7f3f18a5de684624663437387befbd93da756809",
      "urls": [
        "bzz-raw://d2aefe6caa3f7891e35ade6c75781c21c40ef1c1228d88db6dccae719101a0a9",
        "dweb:/ipfs/QmUZ4ezyZ4LnN8xd2VTdzrySwUQybLmoHyY2V4qMNzdC5X"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/delegation/WalletLinkProxyBase.sol": {
      "keccak256": "0x2d800fabc6eaec00c2b25d72dda50cb612eca2ad08700ba537e1dcabf771efdc",
      "urls": [
        "bzz-raw://3d5346877c8dd48f84b4dc2b9958736fdded102211a8368e83ae82564f0f2334",
        "dweb:/ipfs/Qmdfq725QN1vdtZd7xC2PSEUbt7ChWh3HEwCcFg7QiqNMd"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/delegation/WalletLinkProxyStorage.sol": {
      "keccak256": "0x53bc0beb753473e7e927cede43c68006d27a30c212451ffd03b5b3d710713599",
      "urls": [
        "bzz-raw://055bbca7d475e12d1d0344389803684ffe50fa04bbcc1755dc947f5c3fee5658",
        "dweb:/ipfs/QmT3RDDQ8qvkRM91FxMixLfgsSvf77idAbA1AJL7aKxVMa"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/entitlements/EntitlementsManagerStorage.sol": {
      "keccak256": "0xc8e97604a9fb7e2f90de70eed0299ad59bbede47563103fc4cdae8b5a90088f8",
      "urls": [
        "bzz-raw://01194896393f0e77f617f02bed7da7cee5ec7a2d810a058f9c1be8c2ad99f583",
        "dweb:/ipfs/QmbPtkGzBPHYKwvsM3d26MYJKLbFZ7p253pXJCe8aDzUfK"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/IMembership.sol": {
      "keccak256": "0x587b0e0c4a9cdc9bd0c992a9678127f47fea77da7210feb3482a069f84afe71d",
      "urls": [
        "bzz-raw://a2260d042df51a55beb533ee759e10435783b5f401f1ceebf860046609f26cbe",
        "dweb:/ipfs/QmYk7FRbTCKa7fUdAYWVye1Fs4teLnJp95yyD65TUYVfDe"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/MembershipBase.sol": {
      "keccak256": "0x051aa6b31e65ab69f5fdbef6392a9667ca299c6c9d342f6bf8ac287b90d767fb",
      "urls": [
        "bzz-raw://a82f58889def5345daa3e72b3c4e24327d69b48c7bdae83adf9eda24c85b24d6",
        "dweb:/ipfs/QmcDQqUFL6dF7Vvkn2VnEThQddAzwaaL7U31V6PfkP4rXp"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/MembershipFacet.sol": {
      "keccak256": "0x4880cffa52eb951c281575c1022198125368666382374e814cff078efe78dfcf",
      "urls": [
        "bzz-raw://978518f0a23fc9020c2a82bb5d8da61f14645501f18fd7dcd539aa3ddade8552",
        "dweb:/ipfs/QmXYd1uGPjoW2sjainc6aLEhnxTaS1DpAoptqBZuq267qT"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/MembershipStorage.sol": {
      "keccak256": "0x5150419ec96429dcb68c6234f0239d9dc82bac4c9248f329ad3d37406946bc36",
      "urls": [
        "bzz-raw://e4b0769d7d47a2d5948603d0429899cc9e4a480ec0a6451987cbc184993613c8",
        "dweb:/ipfs/Qmf6Z2Jkym3gGR98pNZTWsEaZR4MubwTBq2Y6igEYXuYA2"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/pricing/IMembershipPricing.sol": {
      "keccak256": "0x726e956f8d09bc51103660d2c7e1519de101617962f8a959a15123ec9d68b33f",
      "urls": [
        "bzz-raw://cf74057ee9b815f9caead688c5a08fce3bd0f29dcbe03e81a98495ce267d89a2",
        "dweb:/ipfs/QmWFdvKhvacqsZKtDFfPYUvkjSsdgnos61RXkKcKrUBZ2i"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/referral/IMembershipReferral.sol": {
      "keccak256": "0xeb2feee4b1f3e83509bc1425c0ecd60eaf168fa7686c14dc2bd636e5a691bc6a",
      "urls": [
        "bzz-raw://ec9bcb8c4106639ec9e0d37fa59385c1e853fb07f9ebedcd9f2bc1198979a807",
        "dweb:/ipfs/QmcAdwQKn2jMo7grzXNGSPr9PvQBxdKURF6xxLPorCDrFt"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/referral/MembershipReferralBase.sol": {
      "keccak256": "0x6f29e73b113fce75e54a41f248621b1adaa5ac4a3b189ef0903308bfa69165ca",
      "urls": [
        "bzz-raw://abc7b25a74097434912f4940bfcd6cf9e312b0989279cb31a9a74d7ae6c09636",
        "dweb:/ipfs/QmPdttVeMBDBb8SMrga6YnKz3aiGDKMqo2MofCXtag4w4E"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/membership/referral/MembershipReferralStorage.sol": {
      "keccak256": "0x607aabf7ae45b7f112165c1028e0fa2d18b86c6db78f4df4bdf39dd0f20973ea",
      "urls": [
        "bzz-raw://4d61919ebf0ba0d3706cf2c3755b9d9920312c82bb1b83d0023f1cb09c2fc31d",
        "dweb:/ipfs/QmSQ1G7rRMf6tAuzdU6M5ydKetaSZXdN3UV33wNjvDrqAL"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/platform/requirements/IPlatformRequirements.sol": {
      "keccak256": "0xc0b22b0caa2336e0c3f6b6813432643053785c39531d30e5851eeb613a0a7991",
      "urls": [
        "bzz-raw://8a7ceb199e92f484efcc444fffd54fbabaf332c210dda0ef46d89a66f4cb47c7",
        "dweb:/ipfs/QmRJVrZiZpbGsLngz4J3NVgapKXLErdLc7BPyEyTNKdijg"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/spaces/facets/prepay/IPrepay.sol": {
      "keccak256": "0x0c5c097dd77471d041cdbb84011ac789147af937d275329d857d1a4b257635e9",
      "urls": [
        "bzz-raw://baca271a5a66856f3144a4bf0ed6a484b0c981539d6bf0c57ffade9e4986eb49",
        "dweb:/ipfs/QmVgPWMEL5q2J5kmZQZFRadWjuVQeFLaa9K2gCHdhjLUa9"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/utils/interfaces/IWETH.sol": {
      "keccak256": "0xd274612ab96215dcdb6e3717a63e7a0f76c7facadff93b2b23ed278f6e7b3b00",
      "urls": [
        "bzz-raw://12444da1f06a0fbe6d2d564d73d6d6bc58c09496af3aeea6988c3d3f9ee81c73",
        "dweb:/ipfs/QmTkpQ6cZmRYgvLUS4mqzLvFg5nabgQjpMnVK8JENboiA3"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/utils/libraries/BasisPoints.sol": {
      "keccak256": "0x797b0a1d3da51f4256c83b5d5c885b034df5bdff69c8dfa0fac9777cfa2f1d26",
      "urls": [
        "bzz-raw://52ba0c85e5de8a7d76e2e4bcbccdaffa68e29281191ae1f889430a496ce5cf1c",
        "dweb:/ipfs/Qmd5bYypjF6gcJKKagdRpvAgV4LCs4iyn7KYdaLBWjjuHr"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/utils/libraries/CurrencyTransfer.sol": {
      "keccak256": "0x1c6b5b33831f8c5c02c49dff5ceac3ad1a6cdb74c988ebba72c36329ca704750",
      "urls": [
        "bzz-raw://78122f27b67a5d3ebe95c4260dc972ab7be5c04b277cbd71a833dd74fbd23fa4",
        "dweb:/ipfs/QmU78EApEim92KMVtW69coFPZdhvbkhmYn6dW2zwqJKPBp"
      ],
      "license": "Apache-2.0"
    },
    "lib/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
      "urls": [
        "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
        "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
      ],
      "license": "MIT"
    },
    "lib/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
      "urls": [
        "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
        "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
      ],
      "license": "MIT"
    },
    "lib/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
      "urls": [
        "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
        "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
      ],
      "license": "MIT"
    },
    "lib/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
      "urls": [
        "bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
        "dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
      ],
      "license": "MIT"
    },
    "lib/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
      "urls": [
        "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
        "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
      ],
      "license": "MIT"
    },
    "lib/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
      "urls": [
        "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
        "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
      ],
      "license": "MIT"
    },
    "lib/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa",
      "urls": [
        "bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1",
        "dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}