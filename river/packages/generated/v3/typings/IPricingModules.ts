/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPricingModulesBase {
  export type PricingModuleStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    module: PromiseOrValue<string>;
  };

  export type PricingModuleStructOutput = [string, string, string] & {
    name: string;
    description: string;
    module: string;
  };
}

export interface IPricingModulesInterface extends utils.Interface {
  functions: {
    "addPricingModule(address)": FunctionFragment;
    "isPricingModule(address)": FunctionFragment;
    "listPricingModules()": FunctionFragment;
    "removePricingModule(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPricingModule"
      | "isPricingModule"
      | "listPricingModules"
      | "removePricingModule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPricingModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPricingModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listPricingModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePricingModule",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPricingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPricingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPricingModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePricingModule",
    data: BytesLike
  ): Result;

  events: {
    "PricingModuleAdded(address)": EventFragment;
    "PricingModuleRemoved(address)": EventFragment;
    "PricingModuleUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PricingModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricingModuleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricingModuleUpdated"): EventFragment;
}

export interface PricingModuleAddedEventObject {
  module: string;
}
export type PricingModuleAddedEvent = TypedEvent<
  [string],
  PricingModuleAddedEventObject
>;

export type PricingModuleAddedEventFilter =
  TypedEventFilter<PricingModuleAddedEvent>;

export interface PricingModuleRemovedEventObject {
  module: string;
}
export type PricingModuleRemovedEvent = TypedEvent<
  [string],
  PricingModuleRemovedEventObject
>;

export type PricingModuleRemovedEventFilter =
  TypedEventFilter<PricingModuleRemovedEvent>;

export interface PricingModuleUpdatedEventObject {
  module: string;
}
export type PricingModuleUpdatedEvent = TypedEvent<
  [string],
  PricingModuleUpdatedEventObject
>;

export type PricingModuleUpdatedEventFilter =
  TypedEventFilter<PricingModuleUpdatedEvent>;

export interface IPricingModules extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPricingModulesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPricingModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPricingModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listPricingModules(
      overrides?: CallOverrides
    ): Promise<[IPricingModulesBase.PricingModuleStructOutput[]]>;

    removePricingModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPricingModule(
    module: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPricingModule(
    module: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listPricingModules(
    overrides?: CallOverrides
  ): Promise<IPricingModulesBase.PricingModuleStructOutput[]>;

  removePricingModule(
    module: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPricingModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPricingModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listPricingModules(
      overrides?: CallOverrides
    ): Promise<IPricingModulesBase.PricingModuleStructOutput[]>;

    removePricingModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PricingModuleAdded(address)"(
      module?: PromiseOrValue<string> | null
    ): PricingModuleAddedEventFilter;
    PricingModuleAdded(
      module?: PromiseOrValue<string> | null
    ): PricingModuleAddedEventFilter;

    "PricingModuleRemoved(address)"(
      module?: PromiseOrValue<string> | null
    ): PricingModuleRemovedEventFilter;
    PricingModuleRemoved(
      module?: PromiseOrValue<string> | null
    ): PricingModuleRemovedEventFilter;

    "PricingModuleUpdated(address)"(
      module?: PromiseOrValue<string> | null
    ): PricingModuleUpdatedEventFilter;
    PricingModuleUpdated(
      module?: PromiseOrValue<string> | null
    ): PricingModuleUpdatedEventFilter;
  };

  estimateGas: {
    addPricingModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPricingModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPricingModules(overrides?: CallOverrides): Promise<BigNumber>;

    removePricingModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPricingModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPricingModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPricingModules(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePricingModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
