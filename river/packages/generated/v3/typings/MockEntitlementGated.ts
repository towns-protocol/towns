/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IRuleEntitlement {
  export type OperationStruct = {
    opType: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
  };

  export type OperationStructOutput = [number, number] & {
    opType: number;
    index: number;
  };

  export type CheckOperationStruct = {
    opType: PromiseOrValue<BigNumberish>;
    chainId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    threshold: PromiseOrValue<BigNumberish>;
  };

  export type CheckOperationStructOutput = [
    number,
    BigNumber,
    string,
    BigNumber
  ] & {
    opType: number;
    chainId: BigNumber;
    contractAddress: string;
    threshold: BigNumber;
  };

  export type LogicalOperationStruct = {
    logOpType: PromiseOrValue<BigNumberish>;
    leftOperationIndex: PromiseOrValue<BigNumberish>;
    rightOperationIndex: PromiseOrValue<BigNumberish>;
  };

  export type LogicalOperationStructOutput = [number, number, number] & {
    logOpType: number;
    leftOperationIndex: number;
    rightOperationIndex: number;
  };

  export type RuleDataStruct = {
    operations: IRuleEntitlement.OperationStruct[];
    checkOperations: IRuleEntitlement.CheckOperationStruct[];
    logicalOperations: IRuleEntitlement.LogicalOperationStruct[];
  };

  export type RuleDataStructOutput = [
    IRuleEntitlement.OperationStructOutput[],
    IRuleEntitlement.CheckOperationStructOutput[],
    IRuleEntitlement.LogicalOperationStructOutput[]
  ] & {
    operations: IRuleEntitlement.OperationStructOutput[];
    checkOperations: IRuleEntitlement.CheckOperationStructOutput[];
    logicalOperations: IRuleEntitlement.LogicalOperationStructOutput[];
  };
}

export interface MockEntitlementGatedInterface extends utils.Interface {
  functions: {
    "__EntitlementGated_init(address)": FunctionFragment;
    "getRuleData(bytes32)": FunctionFragment;
    "postEntitlementCheckResult(bytes32,uint8)": FunctionFragment;
    "requestEntitlementCheck(((uint8,uint8)[],(uint8,uint256,address,uint256)[],(uint8,uint8,uint8)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__EntitlementGated_init"
      | "getRuleData"
      | "postEntitlementCheckResult"
      | "requestEntitlementCheck"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__EntitlementGated_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRuleData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "postEntitlementCheckResult",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEntitlementCheck",
    values: [IRuleEntitlement.RuleDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "__EntitlementGated_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRuleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postEntitlementCheckResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEntitlementCheck",
    data: BytesLike
  ): Result;

  events: {
    "EntitlementCheckResultPosted(bytes32,uint8)": EventFragment;
    "Initialized(uint32)": EventFragment;
    "InterfaceAdded(bytes4)": EventFragment;
    "InterfaceRemoved(bytes4)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "EntitlementCheckResultPosted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceRemoved"): EventFragment;
}

export interface EntitlementCheckResultPostedEventObject {
  transactionId: string;
  result: number;
}
export type EntitlementCheckResultPostedEvent = TypedEvent<
  [string, number],
  EntitlementCheckResultPostedEventObject
>;

export type EntitlementCheckResultPostedEventFilter =
  TypedEventFilter<EntitlementCheckResultPostedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InterfaceAddedEventObject {
  interfaceId: string;
}
export type InterfaceAddedEvent = TypedEvent<
  [string],
  InterfaceAddedEventObject
>;

export type InterfaceAddedEventFilter = TypedEventFilter<InterfaceAddedEvent>;

export interface InterfaceRemovedEventObject {
  interfaceId: string;
}
export type InterfaceRemovedEvent = TypedEvent<
  [string],
  InterfaceRemovedEventObject
>;

export type InterfaceRemovedEventFilter =
  TypedEventFilter<InterfaceRemovedEvent>;

export interface MockEntitlementGated extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockEntitlementGatedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IRuleEntitlement.RuleDataStructOutput]>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestEntitlementCheck(
      ruleData: IRuleEntitlement.RuleDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __EntitlementGated_init(
    entitlementChecker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRuleData(
    transactionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IRuleEntitlement.RuleDataStructOutput>;

  postEntitlementCheckResult(
    transactionId: PromiseOrValue<BytesLike>,
    result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestEntitlementCheck(
    ruleData: IRuleEntitlement.RuleDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IRuleEntitlement.RuleDataStructOutput>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestEntitlementCheck(
      ruleData: IRuleEntitlement.RuleDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "EntitlementCheckResultPosted(bytes32,uint8)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;
    EntitlementCheckResultPosted(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;

    "Initialized(uint32)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InterfaceAdded(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;
    InterfaceAdded(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;

    "InterfaceRemoved(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;
    InterfaceRemoved(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;
  };

  estimateGas: {
    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestEntitlementCheck(
      ruleData: IRuleEntitlement.RuleDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __EntitlementGated_init(
      entitlementChecker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRuleData(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestEntitlementCheck(
      ruleData: IRuleEntitlement.RuleDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
