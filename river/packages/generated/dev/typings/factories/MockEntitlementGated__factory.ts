/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  MockEntitlementGated,
  MockEntitlementGatedInterface,
} from "../MockEntitlementGated";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "checker",
        type: "address",
        internalType: "contract IEntitlementChecker",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "__EntitlementGated_init",
    inputs: [
      {
        name: "entitlementChecker",
        type: "address",
        internalType: "contract IEntitlementChecker",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getRuleData",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IRuleEntitlement.RuleData",
        components: [
          {
            name: "operations",
            type: "tuple[]",
            internalType: "struct IRuleEntitlement.Operation[]",
            components: [
              {
                name: "opType",
                type: "uint8",
                internalType: "enum IRuleEntitlement.CombinedOperationType",
              },
              {
                name: "index",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "checkOperations",
            type: "tuple[]",
            internalType: "struct IRuleEntitlement.CheckOperation[]",
            components: [
              {
                name: "opType",
                type: "uint8",
                internalType: "enum IRuleEntitlement.CheckOperationType",
              },
              {
                name: "chainId",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "contractAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "threshold",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "logicalOperations",
            type: "tuple[]",
            internalType: "struct IRuleEntitlement.LogicalOperation[]",
            components: [
              {
                name: "logOpType",
                type: "uint8",
                internalType: "enum IRuleEntitlement.LogicalOperationType",
              },
              {
                name: "leftOperationIndex",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "rightOperationIndex",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "postEntitlementCheckResult",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "result",
        type: "uint8",
        internalType: "enum IEntitlementGatedBase.NodeVoteStatus",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "requestEntitlementCheck",
    inputs: [
      {
        name: "ruleData",
        type: "tuple",
        internalType: "struct IRuleEntitlement.RuleData",
        components: [
          {
            name: "operations",
            type: "tuple[]",
            internalType: "struct IRuleEntitlement.Operation[]",
            components: [
              {
                name: "opType",
                type: "uint8",
                internalType: "enum IRuleEntitlement.CombinedOperationType",
              },
              {
                name: "index",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "checkOperations",
            type: "tuple[]",
            internalType: "struct IRuleEntitlement.CheckOperation[]",
            components: [
              {
                name: "opType",
                type: "uint8",
                internalType: "enum IRuleEntitlement.CheckOperationType",
              },
              {
                name: "chainId",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "contractAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "threshold",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "logicalOperations",
            type: "tuple[]",
            internalType: "struct IRuleEntitlement.LogicalOperation[]",
            components: [
              {
                name: "logOpType",
                type: "uint8",
                internalType: "enum IRuleEntitlement.LogicalOperationType",
              },
              {
                name: "leftOperationIndex",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "rightOperationIndex",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "EntitlementCheckResultPosted",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "result",
        type: "uint8",
        indexed: false,
        internalType: "enum IEntitlementGatedBase.NodeVoteStatus",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint32",
        indexed: false,
        internalType: "uint32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InterfaceAdded",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InterfaceRemoved",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "EntitlementGated_InvalidAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "EntitlementGated_NodeAlreadyVoted",
    inputs: [],
  },
  {
    type: "error",
    name: "EntitlementGated_NodeNotFound",
    inputs: [],
  },
  {
    type: "error",
    name: "EntitlementGated_TransactionAlreadyCompleted",
    inputs: [],
  },
  {
    type: "error",
    name: "EntitlementGated_TransactionAlreadyRegistered",
    inputs: [],
  },
  {
    type: "error",
    name: "EntitlementGated_TransactionNotRegistered",
    inputs: [],
  },
  {
    type: "error",
    name: "Initializable_InInitializingState",
    inputs: [],
  },
  {
    type: "error",
    name: "Initializable_NotInInitializingState",
    inputs: [],
  },
  {
    type: "error",
    name: "Introspection_AlreadySupported",
    inputs: [],
  },
  {
    type: "error",
    name: "Introspection_NotSupported",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162001836380380620018368339810160408190526100319161011f565b610039610079565b7f9075c515a635ba70c9696f31149324218d75cf00afe836c482e6473f38b19e0080546001600160a01b0319166001600160a01b0383161790555061014f565b7f59b501c3653afc186af7d48dda36cf6732bd21629a6295693664240a6ef520008054640100000000900460ff16156100c5576040516366008a2d60e01b815260040160405180910390fd5b805463ffffffff908116101561011c57805463ffffffff191663ffffffff90811782556040519081527fe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c9060200160405180910390a15b50565b60006020828403121561013157600080fd5b81516001600160a01b038116811461014857600080fd5b9392505050565b6116d7806200015f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637adc9cbe146100515780638a59b1b414610066578063efa8db231461008f578063f4efb0bb146100b0575b600080fd5b61006461005f366004610b61565b6100c3565b005b610079610074366004610b7e565b610119565b6040516100869190610c93565b60405180910390f35b6100a261009d366004610d36565b61014c565b604051908152602001610086565b6100646100be366004610d7e565b6101c0565b7f59b501c3653afc186af7d48dda36cf6732bd21629a6295693664240a6ef5200054640100000000900460ff1661010d57604051630ef4733760e31b815260040160405180910390fd5b610116816101ce565b50565b61013d60405180606001604052806060815260200160608152602001606081525090565b61014682610209565b92915050565b600080826040516020016101609190610f92565b60408051601f19818403018152908290526bffffffffffffffffffffffff193260601b16602083015243603483015291506000906054016040516020818303038152906040528051906020012090506101b98183610328565b9392505050565b6101ca8282610569565b5050565b6101de632447b68b60e21b610884565b60008051602061169783398151915280546001600160a01b0319166001600160a01b03831617905550565b61022d60405180606001604052806060815260200160608152602001606081525090565b60008281526000805160206116b78339815191526020526040812080546000805160206116978339815191529260ff9091161515900361028057604051637ad5a43960e11b815260040160405180910390fd5b80600201805461028f90611041565b80601f01602080910402602001604051908101604052809291908181526020018280546102bb90611041565b80156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b505050505080602001905181019061032091906112b9565b949350505050565b60008281526000805160206116b7833981519152602052604090208054600080516020611697833981519152919060ff16151560010361037b5760405163bf2a062560e01b815260040160405180910390fd5b81546001600160a01b031661039257610392610962565b8154604051634f84544560e01b8152600560048201526000916001600160a01b031690634f84544590602401600060405180830381865afa1580156103db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261040391908101906113f9565b825460016001600160a81b03199091166101003302171760ff60a81b1916835590506002820161043385826114e4565b5060005b81518110156104fc57826001016040518060400160405280848481518110610461576104616115a4565b60200260200101516001600160a01b031681526020016000600281111561048a5761048a610b97565b9052815460018101835560009283526020928390208251910180546001600160a01b031981166001600160a01b03909316928317825593830151929390929183916001600160a81b03191617600160a01b8360028111156104ed576104ed610b97565b02179055505050600101610437565b508254604051636ef10e6960e11b81526001600160a01b039091169063dde21cd290610530903390899086906004016115ba565b600060405180830381600087803b15801561054a57600080fd5b505af115801561055e573d6000803e3d6000fd5b505050505050505050565b60008281526000805160206116b7833981519152602052604090208054600080516020611697833981519152919061010090046001600160a01b03166105c257604051637ad5a43960e11b815260040160405180910390fd5b8054600160a81b900460ff16156105ec57604051635d802b6760e11b815260040160405180910390fd5b805460ff16151560000361061357604051637ad5a43960e11b815260040160405180910390fd5b6000805b60018301548110156106d457600083600101828154811061063a5761063a6115a4565b60009182526020909120018054909150336001600160a01b03909116036106cb5760008154600160a01b900460ff16600281111561067a5761067a610b97565b14610698576040516347592a4d60e01b815260040160405180910390fd5b8054600193508690829060ff60a01b1916600160a01b8360028111156106c0576106c0610b97565b0217905550506106d4565b50600101610617565b508015156000036106f857604051638223a7e960e01b815260040160405180910390fd5b60008060005b600185015481101561079f576000856001018281548110610721576107216115a4565b6000918252602090912001905060018154600160a01b900460ff16600281111561074d5761074d610b97565b03610764578361075c8161161d565b945050610796565b60028154600160a01b900460ff16600281111561078357610783610b97565b0361079657826107928161161d565b9350505b506001016106fe565b5060018401546107b190600290611644565b82111561081057835460ff60a81b1916600160a81b178455867fb9d6ce397e562841871d119aaf77469c60a3b5bf8b99a5d9851656015015c63360016040516107fa9190611666565b60405180910390a261080b87610a33565b61087b565b600184015461082190600290611644565b81111561087b57835460ff60a81b1916600160a81b178455867fb9d6ce397e562841871d119aaf77469c60a3b5bf8b99a5d9851656015015c633600260405161086a9190611666565b60405180910390a261087b87610a33565b50505050505050565b6001600160e01b0319811660009081527f81088bbc801e045ea3e7620779ab349988f58afbdfba10dff983df3f33522b00602052604090205460ff161515600114610911576001600160e01b0319811660009081527f81088bbc801e045ea3e7620779ab349988f58afbdfba10dff983df3f33522b0060205260409020805460ff1916600117905561092a565b604051637967f77d60e11b815260040160405180910390fd5b6040516001600160e01b03198216907f78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f2290600090a250565b6000600080516020611697833981519152905060007fc21004fcc619240a31f006438274d15cd813308303284436eef6055f0fdcb60060060154604051628956cd60e71b81526c29b830b1b2a7b832b930ba37b960991b60048201526001600160a01b03909116906344ab668090602401602060405180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190611679565b82546001600160a01b0319166001600160a01b03919091161790915550565b60008181526000805160206116b78339815191526020526040812060008051602061169783398151915291610a6c906001830190610abc565b610a7a600282016000610ada565b600083815260018084016020526040822080546001600160b01b03191681559190610aa790830182610abc565b610ab5600283016000610ada565b5050505050565b50805460008255906000526020600020908101906101169190610b14565b508054610ae690611041565b6000825580601f10610af6575050565b601f0160209004906000526020600020908101906101169190610b37565b5b80821115610b335780546001600160a81b0319168155600101610b15565b5090565b5b80821115610b335760008155600101610b38565b6001600160a01b038116811461011657600080fd5b600060208284031215610b7357600080fd5b81356101b981610b4c565b600060208284031215610b9057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061011657610116610b97565b60068110610bcd57610bcd610b97565b9052565b60008151808452602080850194506020840160005b83811015610c32578151610bfb888251610bbd565b80840151888501526040808201516001600160a01b0316908901526060908101519088015260809096019590820190600101610be6565b509495945050505050565b60008151808452602080850194506020840160005b83811015610c325781518051610c6781610bad565b88528084015160ff908116858a0152604091820151169088015260609096019590820190600101610c52565b6020808252825160608383015280516080840181905260009291820190839060a08601905b80831015610cef5783518051610ccd81610bad565b835285015160ff16858301529284019260019290920191604090910190610cb8565b50838701519350601f19925082868203016040870152610d0f8185610bd1565b93505050604085015181858403016060860152610d2c8382610c3d565b9695505050505050565b600060208284031215610d4857600080fd5b813567ffffffffffffffff811115610d5f57600080fd5b8201606081850312156101b957600080fd5b6003811061011657600080fd5b60008060408385031215610d9157600080fd5b823591506020830135610da381610d71565b809150509250929050565b60ff8116811461011657600080fd5b8183526000602080850194508260005b85811015610c32578135610de081610d71565b610de981610bad565b875281830135610df881610dae565b60ff16878401526040968701969190910190600101610dcd565b6000808335601e19843603018112610e2957600080fd5b830160208101925035905067ffffffffffffffff811115610e4957600080fd5b8060071b3603821315610e5b57600080fd5b9250929050565b6006811061011657600080fd5b8183526000602080850194508260005b85811015610c32578135610e9281610e62565b610e9c8882610bbd565b508282013583880152604080830135610eb481610b4c565b6001600160a01b0316908801526060828101359088015260809687019690910190600101610e7f565b6000808335601e19843603018112610ef457600080fd5b830160208101925035905067ffffffffffffffff811115610f1457600080fd5b606081023603821315610e5b57600080fd5b8183526000602080850194508260005b85811015610c32578135610f4981610d71565b610f5281610bad565b875281830135610f6181610dae565b60ff9081168885015260409083820135610f7a81610dae565b16908801526060968701969190910190600101610f36565b6020815260008235601e19843603018112610fac57600080fd5b830160208101903567ffffffffffffffff811115610fc957600080fd5b8060061b3603821315610fdb57600080fd5b60606020850152610ff0608085018284610dbd565b9150506110006020850185610e12565b601f1980868503016040870152611018848385610e6f565b93506110276040880188610edd565b935091508086850301606087015250610d2c838383610f26565b600181811c9082168061105557607f821691505b60208210810361107557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156110b4576110b461107b565b60405290565b6040516060810167ffffffffffffffff811182821017156110b4576110b461107b565b6040805190810167ffffffffffffffff811182821017156110b4576110b461107b565b604051601f8201601f1916810167ffffffffffffffff811182821017156111295761112961107b565b604052919050565b600067ffffffffffffffff82111561114b5761114b61107b565b5060051b60200190565b600082601f83011261116657600080fd5b8151602061117b61117683611131565b611100565b82815260079290921b8401810191818101908684111561119a57600080fd5b8286015b848110156111ff57608081890312156111b75760008081fd5b6111bf611091565b81516111ca81610e62565b815281850151858201526040808301516111e381610b4c565b908201526060828101519082015283529183019160800161119e565b509695505050505050565b600082601f83011261121b57600080fd5b8151602061122b61117683611131565b8281526060928302850182019282820191908785111561124a57600080fd5b8387015b858110156112ac5781818a0312156112665760008081fd5b61126e6110ba565b815161127981610d71565b81528186015161128881610dae565b8187015260408281015161129b81610dae565b90820152845292840192810161124e565b5090979650505050505050565b600060208083850312156112cc57600080fd5b825167ffffffffffffffff808211156112e457600080fd5b90840190606082870312156112f857600080fd5b6113006110ba565b82518281111561130f57600080fd5b8301601f8101881361132057600080fd5b805161132e61117682611131565b81815260069190911b8201860190868101908a83111561134d57600080fd5b928701925b828410156113a3576040848c03121561136b5760008081fd5b6113736110dd565b845161137e81610d71565b81528489015161138d81610dae565b818a015282526040939093019290870190611352565b845250505082840151828111156113b957600080fd5b6113c588828601611155565b858301525060408301519350818411156113de57600080fd5b6113ea8785850161120a565b60408201529695505050505050565b6000602080838503121561140c57600080fd5b825167ffffffffffffffff81111561142357600080fd5b8301601f8101851361143457600080fd5b805161144261117682611131565b81815260059190911b8201830190838101908783111561146157600080fd5b928401925b8284101561148857835161147981610b4c565b82529284019290840190611466565b979650505050505050565b601f8211156114df576000816000526020600020601f850160051c810160208610156114bc5750805b601f850160051c820191505b818110156114db578281556001016114c8565b5050505b505050565b815167ffffffffffffffff8111156114fe576114fe61107b565b6115128161150c8454611041565b84611493565b602080601f831160018114611547576000841561152f5750858301515b600019600386901b1c1916600185901b1785556114db565b600085815260208120601f198616915b8281101561157657888601518255948401946001909101908401611557565b50858210156115945787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038481168252602080830185905260606040840181905284519084018190526000928583019290916080860190855b8181101561160e5785518516835294830194918301916001016115f0565b50909998505050505050505050565b60006001820161163d57634e487b7160e01b600052601160045260246000fd5b5060010190565b60008261166157634e487b7160e01b600052601260045260246000fd5b500490565b6020810161167383610bad565b91905290565b60006020828403121561168b57600080fd5b81516101b981610b4c56fe9075c515a635ba70c9696f31149324218d75cf00afe836c482e6473f38b19e009075c515a635ba70c9696f31149324218d75cf00afe836c482e6473f38b19e01";

type MockEntitlementGatedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockEntitlementGatedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockEntitlementGated__factory extends ContractFactory {
  constructor(...args: MockEntitlementGatedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    checker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockEntitlementGated> {
    return super.deploy(
      checker,
      overrides || {}
    ) as Promise<MockEntitlementGated>;
  }
  override getDeployTransaction(
    checker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(checker, overrides || {});
  }
  override attach(address: string): MockEntitlementGated {
    return super.attach(address) as MockEntitlementGated;
  }
  override connect(signer: Signer): MockEntitlementGated__factory {
    return super.connect(signer) as MockEntitlementGated__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockEntitlementGatedInterface {
    return new utils.Interface(_abi) as MockEntitlementGatedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockEntitlementGated {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockEntitlementGated;
  }
}
