{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string",
            "indexed": false
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "NodeAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "NodeRemoved",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "NodeStatusUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "NodeUrlUpdated",
        "anonymous": false
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getAllNodeAddresses",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getAllNodes",
        "outputs": [
          {
            "internalType": "struct Node[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "enum NodeStatus",
                "name": "status",
                "type": "uint8"
              },
              {
                "internalType": "string",
                "name": "url",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "nodeAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getNode",
        "outputs": [
          {
            "internalType": "struct Node",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "enum NodeStatus",
                "name": "status",
                "type": "uint8"
              },
              {
                "internalType": "string",
                "name": "url",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "nodeAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getNodeCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string"
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "registerNode"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeNode"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          },
          {
            "internalType": "enum NodeStatus",
            "name": "status",
            "type": "uint8"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "updateNodeStatus"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "url",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "updateNodeUrl"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "getAllNodeAddresses()": {
          "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."
        },
        "getAllNodes()": {
          "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "getAllNodeAddresses()": {
          "notice": "Return array containing all node addresses"
        },
        "getAllNodes()": {
          "notice": "Return array containing all nodes"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/@openzeppelin/",
      "@prb/math/=lib/@prb/math/src/",
      "@prb/test/=lib/@prb/test/src/",
      "account-abstraction/=lib/account-abstraction/contracts/",
      "base64/=lib/base64/",
      "ds-test/=lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "hardhat-deploy/=lib/hardhat-deploy/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/river/registry/facets/node/NodeRegistry.sol": "NodeRegistry"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/river/registry/facets/node/INodeRegistry.sol": {
      "keccak256": "0x1d245155a913d92f004313e576841284a48b800ca147b5e87a4aeea94c539bbe",
      "urls": [
        "bzz-raw://5ea7ed779d74fb2dab8cc5d25da8ca473b3db2e1af2b34af088a8556ea490960",
        "dweb:/ipfs/QmYtDEF7Mx387qUM7sbURPEsodbDD1acJNP2D9GjoC2cCR"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/river/registry/facets/node/NodeRegistry.sol": {
      "keccak256": "0x93dea7980175adb8cd6b0893787c4bafdbce8b8cc51cc688906285bdf20aa195",
      "urls": [
        "bzz-raw://80d8d90b106608d13d16b5ad560d1763c5dd3447d6e36db9765d2e36f6171f70",
        "dweb:/ipfs/QmNysr62BjrM2tPHSXdiAESBZHjyMRvW52ADsvrxXcrciL"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/river/registry/libraries/RegistryErrors.sol": {
      "keccak256": "0x073c3ff0f1206824f3722e2ba22fd7174f9ded4a6111e48e0641e21ed90aabfc",
      "urls": [
        "bzz-raw://62d60cd3958fdb3762972e41aefa899e6b6ac0dac7c94689025f6ba5dc241be3",
        "dweb:/ipfs/QmRRhiC1KXDh5aPPNBEgwbg8wZ9BKWYLJ7jGD9vFzm1kWy"
      ],
      "license": "Apache-2.0"
    },
    "contracts/src/river/registry/libraries/RegistryStorage.sol": {
      "keccak256": "0x17e658275a01e90b1778f35b3ce08a18991ddb9e89ce9f94eeb7c4e942607f88",
      "urls": [
        "bzz-raw://14748339034da35a348b0d28f77bbf4b7e16845e20b894c8106457f886ab09aa",
        "dweb:/ipfs/QmNXKXYJ5T3LFH2Q1qC1hT9zaKaHRM8EiECL74pfd34uVN"
      ],
      "license": "Apache-2.0"
    },
    "lib/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa",
      "urls": [
        "bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1",
        "dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}