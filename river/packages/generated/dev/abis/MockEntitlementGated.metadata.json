{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "contract IEntitlementChecker",
            "name": "checker",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_InvalidAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_NodeAlreadyVoted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_NodeNotFound",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionAlreadyCompleted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionAlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionNotRegistered",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "enum IEntitlementGatedBase.NodeVoteStatus",
            "name": "result",
            "type": "uint8"
          }
        ],
        "name": "EntitlementCheckResultPosted",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          }
        ],
        "name": "getRuleData",
        "outputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.CombinedOperationType",
                    "name": "opType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "index",
                    "type": "uint8"
                  }
                ],
                "internalType": "struct IRuleEntitlement.Operation[]",
                "name": "operations",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.CheckOperationType",
                    "name": "opType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "contractAddress",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "threshold",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IRuleEntitlement.CheckOperation[]",
                "name": "checkOperations",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.LogicalOperationType",
                    "name": "logOpType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "leftOperationIndex",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "rightOperationIndex",
                    "type": "uint8"
                  }
                ],
                "internalType": "struct IRuleEntitlement.LogicalOperation[]",
                "name": "logicalOperations",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct IRuleEntitlement.RuleData",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "enum IEntitlementGatedBase.NodeVoteStatus",
            "name": "result",
            "type": "uint8"
          }
        ],
        "name": "postEntitlementCheckResult",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.CombinedOperationType",
                    "name": "opType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "index",
                    "type": "uint8"
                  }
                ],
                "internalType": "struct IRuleEntitlement.Operation[]",
                "name": "operations",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.CheckOperationType",
                    "name": "opType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "contractAddress",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "threshold",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IRuleEntitlement.CheckOperation[]",
                "name": "checkOperations",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "enum IRuleEntitlement.LogicalOperationType",
                    "name": "logOpType",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "leftOperationIndex",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint8",
                    "name": "rightOperationIndex",
                    "type": "uint8"
                  }
                ],
                "internalType": "struct IRuleEntitlement.LogicalOperation[]",
                "name": "logicalOperations",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct IRuleEntitlement.RuleData",
            "name": "ruleData",
            "type": "tuple"
          }
        ],
        "name": "requestEntitlementCheck",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/test/mocks/MockEntitlementGated.sol": "MockEntitlementGated"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/@openzeppelin/",
      ":@prb/math/=lib/@prb/math/src/",
      ":@prb/test/=lib/@prb/test/src/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64/=lib/base64/",
      ":ds-test/=lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":hardhat-deploy/=lib/hardhat-deploy/"
    ]
  },
  "sources": {
    "contracts/src/crosschain/EntitlementGated.sol": {
      "keccak256": "0xf52c592838c7643c03297d83109500eb923d16f63829a9c588e586965d2d811b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2c46c4ec55c204a804f9406597edcf27572900e98c5433fa50976443ad8ded4f",
        "dweb:/ipfs/QmR7yZGvfmCxprecUbskRo5nHM1d6WKBeEmKeYXrmSrc1j"
      ]
    },
    "contracts/src/crosschain/EntitlementGatedBase.sol": {
      "keccak256": "0x6a7a2f571c46b3f2ecd7339ed595c5a346342ef159cdcaff51ff389306e1b6a7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://dc96856e7ff4682435d3ac531fe13da41991ac90159be99c16fa4ca3483361eb",
        "dweb:/ipfs/QmWd2Uc2JN6wbfQM2Nyeccqz86zaaAh3kFKq4weFRXbinZ"
      ]
    },
    "contracts/src/crosschain/EntitlementGatedStorage.sol": {
      "keccak256": "0xe39060340d8e2a127895fdd7dd59802387c7da4dc6ae17fc0ed1b8104528c49b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a2bb9feff67b787287b77284f580b4cb0f44e7eec941cb78e928586fce8a0db6",
        "dweb:/ipfs/QmNmvoGyBMPULSGkMAPMg9iR4s4HpfpudZ9K9hBSFSKHSz"
      ]
    },
    "contracts/src/crosschain/IEntitlementGated.sol": {
      "keccak256": "0x587784f179eded1b28c1b744710cc0bd07605b91dc52a91c2214d8e428bd2742",
      "license": "MIT",
      "urls": [
        "bzz-raw://38a98bc3c47c27e4cdedeaa5a50e806dbb27598403ae401c09856576b93dac79",
        "dweb:/ipfs/QmPCt1sgZA8kFWb5ANraox2PgPPSuy1wM9htHNz2MhJnEB"
      ]
    },
    "contracts/src/crosschain/IRuleEntitlement.sol": {
      "keccak256": "0x795b58a2ed6205d814e01e58a4a5e88ff69401ee7540d01c4881b7b28f04cfcf",
      "license": "MIT",
      "urls": [
        "bzz-raw://684e395bce3abedfb499ba8b2708a4f0ca9d1b1f73eb0ebc647d4cead0b8fdd1",
        "dweb:/ipfs/QmWz2Eu8UGXYskoBFtFXLBuwDrxUfYDLeQuTCeApALdf97"
      ]
    },
    "contracts/src/crosschain/checker/IEntitlementChecker.sol": {
      "keccak256": "0x1a5c445aa01075ed316050d3b3495e1dec5d3bacaec54e04177bb84917d6b024",
      "license": "MIT",
      "urls": [
        "bzz-raw://b19ce82cce8f656269a7f25e01c76862a79dff9e05ab93f543a9ff8114eafac3",
        "dweb:/ipfs/QmfEThXgxzKtPAmgRcudr97BAAdQnxGb17pU3qJ83Z9jHc"
      ]
    },
    "contracts/src/spaces/entitlements/IEntitlement.sol": {
      "keccak256": "0x84f059cb6d594cbe0a70ed4a10c9b96f82d530c9dba39a5d84e466f5b046b9ca",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://68fdceef136a16c8a11e1b354119d39697029ea41db4ae4edc9ea9d68e9c12a3",
        "dweb:/ipfs/QmbCmoo6nMDou5m77JzFBPc2GBJkET5F2eWDEZaXQ5taHf"
      ]
    },
    "contracts/test/mocks/MockEntitlementGated.sol": {
      "keccak256": "0x1fbfc943717dbc29394313dd78a76c5521132aa82232ef56c96867f7ce303416",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1017f1f1490d98db9b63980210e2dfba0c2d01266568961b5990b9f621a13c5d",
        "dweb:/ipfs/QmVVynrFeCG7NZGKTNnCLEaecZ1hmXVPVno29pDth51jCj"
      ]
    },
    "lib/forge-std/src/console2.sol": {
      "keccak256": "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea",
      "license": "MIT",
      "urls": [
        "bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973",
        "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"
      ]
    }
  },
  "version": 1
}