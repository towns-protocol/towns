initialization
    it should initialize with correct name, symbol and interfaceId

registerOperator
when called with the zero address
    it should revert with "NodeOperator__InvalidAddress"
when called for an already registered operator
    it should revert with "NodeOperator__AlreadyRegistered"
when called with a valid address
    it should mint a token for the new operator
    it should set operator status to Standby
    it should emit an OperatorRegistered event

isOperator
    when called with invalid operator
        it should return false
    when called with valid operator
        given operator is registered
            it should return true

setOperatorStatus
    when setOperatorStatus is called by a non-owner
        it should revert with "Ownable: caller is not the owner"

    when setOperatorStatus is called by an owner
        given an operator address is zero
            it should revert with "NodeOperator__InvalidAddress"
        given an operator is not registered (balance is 0)
            it should revert with "NodeOperator__NotRegistered"
        given an operator is registered
            when called with the same existing status
                it should revert with "NodeOperator__StatusNotChanged"

            when called from Standby to Approved
                given node operator has not enough stake
                    it should revert with "NodeOperator__NotEnoughStake"

                given node operator has enough stake
                    it should successfully update the operator's status
                    it should emit a OperatorStatusChanged event (if your contract emits an event on status change)

            when called from Standby to Exiting
                given node operator has enough stake and was previously approved
                    it should revert with "NodeOperator__InvalidStatusTransition"

            when called from Approved to Standby
                given node operator has enough stake and was previously approved
                    it should revert with "NodeOperator__InvalidStatusTransition"

            when called from Exiting to Approved
                given node operator has enough stake and was previously approved
                    it should revert with "NodeOperator__InvalidStatusTransition"

            when called from valid status to another valid status
                it should successfully update the operator's status
                it should emit a OperatorStatusChanged event (if your contract emits an event on status change)

getOperatorStatus
    when called with invalid operator
        it should return status of Exiting
    when called with valid operator
        given operator is registered and Standby
            it should return Standby
        given operator is registered, has stake and is Approved
            it should return Approved
        given operator is registered and exiting
            it should return Exiting

getOperators
    when called with no registered operators
        it should return an empty address array
    when called with registered operators
        it should return a list of all registered operators

getOperatorsByStatus
    when called with no operators
        it should return an empty address array
    when called with operators registered
        it should return a list of operators based on their status required

getApprovedOperators
    when called with no approved operators
        it should return empty address array
    given operator is approved
        it should return address of operator

getRiverToken
riverToken
calculateStake
setStakeRequirement
getStakeRequirement
setSpaceOwnerRegistry

addSpaceDelegation
    given operator is registered
        when called with an invalid space address
            it should revert with "NodeOperator__InvalidAddress"
    when called with an invalid operator address
        it should revert with "NodeOperator__InvalidAddress"
    when called by an invalid space owner
        it should revert with "NodeOperator__InvalidSpace"
    when called with an invalid operator
        it should revert with "NodeOperator__InvalidOperator"
    when called with an already delegated operator
        it should revert with "NodeOperator__AlreadyDelegated"
    given valid operator is registered and space is owned by caller
        it should set map the space to that operator
        it should add the space to list of that operato's delegated addresses
        it should emit OperatorSpaceDelegated

removeSpaceDelegation
getSpaceDelegation
getSpaceDelegationByOperator

Non-Transferability
    given an operator is registered
        when transfer or safeTransferFrom is attempted
            it should revert with "NodeOperator__NotTransferable"
    given an operator is not registered
        when transfer or safeTransferFrom is attempted
            it should revert regardless of token existence
