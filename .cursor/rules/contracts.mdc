---
description: These rules are essential for working with a complex blockchain-based space management and permission system. They're particularly helpful when:  1. Implementing new features or modifying existing ones in the space management system 2. Working with cross-chain entitlements and permission validation 3. Developing token distribution mechanisms or reward systems 4. Adding or modifying role-based access control 5. Upgrading contracts using the Diamond Pattern 6. Implementing new entitlement types or rules 7. Debugging permission or access control issues 8. Writing tests for contract interactions
globs: contracts/**/*.sol
---
# Overview
Blockchain-based space/channel management system with role-based access control and entitlements. It implements a complex permission system using smart contracts that allows for cross-chain rule validation and user management.

The system allows for:
- Creation and management of spaces and channels
- Role-based access control with granular permissions
- Cross-chain entitlement validation
- User membership management
- Rule-based entitlements with logical operations

## Tech Stack
- Solidity ^0.8.23/^0.8.24
- OpenZeppelin Contracts
- Solady Contracts
- Diamond Pattern (EIP-2535) for upgradeable contracts
- TypeScript for contract type generation
- Foundry for development and testing

## Project Structure

### Core Components
- `/contracts/src/airdrop/` - Handles token distribution mechanisms including:
  - Drop system for claiming conditions and rewards
  - Points system for user check-ins and activity rewards
  - Streak-based reward multipliers
  - Token distribution rules and validation

- `/contracts/src/base/registry/` - Core registry system that manages:
  - Cross-chain delegation and rewards distribution
  - Node operator registration and management
  - Staking rewards and commission calculations
  - Entitlement checking and validation
  - Space delegation and operator relationships

- `/contracts/src/spaces/` - Space management system including:
  - Core space management contracts
  - Entitlement system for access control
  - Role-based permission management
  - Cross-chain rule validation

- `/contracts/src/factory/` - Factory contracts that handle:
  - Space creation and initialization
  - Standardized deployment patterns
  - Contract architecture management
  - Component registration

- `/contracts/src/utils/` - Utility libraries providing:
  - Currency transfer helpers
  - Custom revert handling
  - Mathematical operations
  - Common contract patterns

- `/contracts/src/diamond/` - Diamond pattern implementation:
  - Facet management
  - Contract upgradeability
  - Storage management
  - Governance functionality

- `/contracts/src/tokens/` - Token management and implementation including:
  - Member NFT contract for membership tokens
  - Lock mechanism for token delegation and transfers
  - Cross-chain token bridging and migration
  - Inflation and supply management

- `/contracts/scripts/diamonds` - Handles deployment of all the diamonds being used in production, each file is a smart contract deployment along with the facets they contain.

### Key Contracts

#### Space Management
- `RuleEntitlement.sol` - Manages rule-based entitlements and cross-chain permission validation
- `EntitlementsManager.sol` - Core contract for handling entitlement validation and access control
- `Architect.sol` - Factory contract for space creation and initialization
- `Roles.sol` - Manages role-based permissions and access control hierarchies

#### Token System
- `contracts/src/tokens/towns/mainnet/Towns.sol` - Main ERC20 token implementation with inflation and governance
- `contracts/src/tokens/towns/base/Towns.sol` - Layer 2 ERC20 token implementation with cross-chain minting, used for rewards distribution

#### Rewards & Distribution
- `DropFacet.sol` - Handles token airdrops with complex claiming conditions
- `TownsPoints.sol` - Points-based reward system with check-ins and streaks
- `StakingManager.sol` - Manages staking operations and reward distribution

#### Registry & Infrastructure
- `EntitlementChecker.sol` - Validates cross-chain entitlements and permissions
- `DiamondCutFacet.sol` - Handles contract upgradeability via Diamond pattern
- `CreateSpace.sol` - Creates and initializes new space instances

Each contract follows the Diamond Pattern (EIP-2535) for upgradeability and implements proper access control, events, and storage patterns. They work together to create a comprehensive space management and token distribution system with cross-chain capabilities.

## Rules

### General Rules

1. All contracts should follow the Diamond Pattern for upgradeability
2. Use explicit visibility modifiers for all functions and state variables
3. Implement proper access control using modifiers
4. Follow gas optimization best practices
5. Use events for important state changes
6. Implement proper input validation
7. Follow semantic versioning for contract upgrades

### Storage Rules

1. Use diamond storage pattern for all state variables
2. Properly namespace storage slots to avoid collisions
3. Use appropriate data structures for gas efficiency
4. Follow proper mapping patterns for complex data relationships

### Type Rules

1. Use strict typing for all variables and parameters
2. Implement proper interface inheritance
3. Use enums for predefined sets of values
4. Use structs for complex data types
5. Follow proper ABI encoding/decoding patterns

### Permission Rules

1. Implement granular permission checks
2. Use proper role-based access control
3. Validate cross-chain entitlements properly
4. Implement proper permission override mechanisms

### Testing Rules

1. Write comprehensive unit tests
2. Test all edge cases
3. Test permission and access control logic
4. Test cross-chain functionality
5. Test upgrade paths

### Documentation Rules

1. Use NatSpec comments for all public/external functions
2. Document complex logic and algorithms
3. Keep inline comments clear and concise
4. Document storage layouts
5. Document upgrade procedures

### Gas Optimization Rules

1. Use proper data structures for gas efficiency
2. Implement batch operations where possible
3. Minimize storage operations
4. Use unchecked blocks where safe
5. Cache frequently accessed storage variables

### Security Rules

1. Follow CEI pattern (Checks-Effects-Interactions)
2. Implement proper reentrancy guards
3. Validate all inputs
4. Use safe math operations
5. Implement proper access control
6. Follow upgrade best practices

### Diamond Facet Storage
Every new facet or feature needs to follow the following storage pattern to avoid collision:

```solidity
library FacetStorage {
  // A hash calculate by running 
  // keccak256(abi.encode(uint256(keccak256("folder.path.to.feature")) - 1)) & ~bytes32(uint256(0xff))
  bytes32 internal constant STORAGE_SLOT =
    0x672ef851d5f92307da037116e23aa9e31af7e1f7e3ca62c4e6d540631df3fd00;

  struct Object {
    string variablesBeingUsedInFeature
  }

  // Layout is a special struct that we use to define what we will be reading/writing to and from
  struct Layout {
    mapping(uint256 => Object) varibleToWriteTo
  }

  // function to fetch the storage slot to do reads/write in the future
  function layout() internal pure returns (Layout storage ds) {
    bytes32 slot = STORAGE_SLOT;
    assembly {
      ds.slot := slot
    }
  }
}
```
