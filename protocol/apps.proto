syntax = "proto3";
package river;
option go_package = "github.com/towns-protocol/towns/core/node/protocol";

import "google/protobuf/empty.proto";
import "protocol.proto";

// AppRegistryService allows apps and app owners to register apps, and set app-related preferences for messages added
// to channels the app has membership in.
//
// These functions are all authenticated, with the exception of GetStatus, and require a session token to be passed
// through the authorization metadata.
// This session token can be obtained from the AuthenticationService. If the session token is missing or invalid an
// Err_UNAUTHENTICATED (code=16) is returned.
service AppRegistryService {
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc RegisterWebhook(RegisterWebhookRequest) returns (RegisterWebhookResponse);
    // rpc GetInfo(GetInfoRequest) returns (GetInfoResponse);
    // rpc RotateSecret(RotateSecretRequest) returns (RotateSecretResponse);
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
}

message RegisterRequest {
    // public key of the app
    bytes app_id = 1;

    // public key of the app owner
    bytes app_owner_id = 2;
}

message RegisterResponse {
    // The shared secret used to sign the jwt the app registry will use to authenticate to the
    // app service. This secret should be exactly 32 bytes.
    bytes hs256_shared_secret = 1;
}

message RegisterWebhookRequest {
    // public key of the app
    bytes app_id = 1;

    // Webhook for sending requests to the app service
    string webhook_url = 2;
}

message RegisterWebhookResponse { }

message RotateSecretRequest {
        // public key of the app
        bytes app_id = 1;
}

message RotateSecretResponse {
    // the updated shared secret used to generate the hmac the app registry will send to the app service
    string hmac_shared_secret = 1;
}

message GetStatusRequest {
    // public key of the app
    bytes app_id = 1;
}

message GetStatusResponse {
    // is_registered describes if the app is registered with a webhook
    bool is_registered = 1;

    // valid_response is set to true if calling the webhook results in a 200 with version
    // info included in the response body.
    bool valid_response = 2;

    // version info returned by the webhook
    string version_info = 3;
}

// As a performance optimization, we may wish to bundle together many key solicitation requests
// and channel messages for the bot to respond to in a single webhook call. Thus, an isolated
// group of channel messages and encryption keys, or a request for a key solicitation, is
// represented here. For webhook calls regarding channel content, the payload may contain one or
// more of these events.
message EventPayload {
    // A MessagesPayload represents a group of user messages in a channel that qualifies for the app
    // to be notified. The included set of group encryption sessions in this message should have
    // all the needed ciphertexts to decrypt the set of messages sent in the same payload.
    message MessagesPayload {
        repeated Envelope messages = 1;
        repeated Envelope group_encryption_sessions_messages = 2;
    }

    // SolicitKeys represents one or more messages in the same channel that cannot be forwarded to the
    // app because the app does not have keys available to decrypt it. In this case, the app must send
    // a message to the stream to solicit keys for it's device for the session ids that cannot yet be
    // decrypted.
    message SolicitKeysPayload {
        repeated string session_ids = 1;
        bytes stream_id = 2;
    }

    oneof payload {
        MessagesPayload messages = 1;
        SolicitKeysPayload solicitation = 2;
    }
}

// The BatchEventsPayload will have a single set of messages and overlapping group encryption sessions
// messages, or a set of key solicitations for session ids in the same channel. The BatchEventsPayload allows
// many such groups to be combined into a single request in order to reduce webhook call frequency.
message BatchEventsPayload {
    repeated EventPayload events = 1;
}

message AppServiceRequest {
    oneof payload {
        google.protobuf.Empty initialize = 101;
        google.protobuf.Empty status = 102;
        BatchEventsPayload events = 103;
    }
}


message AppServiceResponse {
    message InitializeResponse {
        UserMetadataPayload.EncryptionDevice encryption_device = 1; 
    }

    message StatusResponse {
        int32 framework_version = 1;
        string device_key = 2;
        string fallback_key = 3;
    }

    oneof payload {
        InitializeResponse initialize = 101;
        StatusResponse status = 102;
    }
}


