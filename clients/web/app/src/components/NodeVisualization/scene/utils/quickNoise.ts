function buildTable(randFunc: () => number = Math.random) {
    // @NOTE(thom): could optimize this for allocations, but it
    // shouldn't be near anybody's fast path...
    const arr = new Array(256).fill(1).map(function (v, i) {
        return i
    })
    // shuffle numbers 0 through 255
    for (let i = arr.length - 1; i > 0; --i) {
        const r = Math.floor(randFunc() * (i + 1))
        const t = arr[r]
        arr[r] = arr[i]
        arr[i] = t
    }
    return arr
}

const gradBasis = [
    1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0, 1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, -1, 0, 1, 1, 0, -1,
    1, 0, 1, -1, 0, -1, -1,
]

function initTables(rand: () => number, permTable: Uint8Array, gradTable: Int8Array) {
    let tab: number[] | null = null
    if (rand == null || typeof rand === 'function') {
        tab = buildTable(rand)
    } else {
        throw new Error('Invalid argument')
    }
    for (let i = 0; i < 256; ++i) {
        permTable[i] = tab[i]
        permTable[i + 256] = tab[i]
    }
    let gradIdx = 0
    for (let i = 0; i < permTable.length; ++i) {
        const v = (permTable[i] % 12) * 3
        gradTable[gradIdx++] = gradBasis[v]
        gradTable[gradIdx++] = gradBasis[v + 1]
        gradTable[gradIdx++] = gradBasis[v + 2]
    }
}

const permTableSize = 256 * 2
const gradTableSize = permTableSize * 3
const totalSize = permTableSize + gradTableSize

//
// function quickNoise.create(tableOrRng=Math.random);
//
// `tableOrRng` must either be:
//
// - A function that takes 0 arguments and returns a uniformly distributed
//   random number between 0 and 1 (like `Math.random`).
// - An array of length 256, where the array is generated by shuffling all
//   integers between 0 and 255 (inclusive).
//
// If no argument (or a bad argument) is provided, it defaults to Math.random.
//
// This creates a perlin noise generation function. For more documentation about
// the function returned by this call, see the documentation for `quickNoise.noise`, below.
//
// If you provide a function, this will be used only to generate the permutation table, and
// will not be called after this function returns.
//
// The array argument provided in case you want to provide a specific permutation table.
//

export function createNoise(tab: () => number = Math.random) {
    const ab = new ArrayBuffer(totalSize)
    const permTable = new Uint8Array(ab, 0, permTableSize)
    const gradTable = new Int8Array(ab, permTableSize, gradTableSize)
    initTables(tab, permTable, gradTable)

    function noise(
        x: number,
        y: number,
        z: number,
        xWrap: number = 0,
        yWrap: number = 0,
        zWrap: number = 0,
    ) {
        // type hints for vm
        x = +x
        y = +y
        z = +z

        const xMask = ((xWrap - 1) & 255) >>> 0
        const yMask = ((yWrap - 1) & 255) >>> 0
        const zMask = ((zWrap - 1) & 255) >>> 0

        const px = Math.floor(x)
        const py = Math.floor(y)
        const pz = Math.floor(z)

        const x0 = (px + 0) & xMask
        const x1 = (px + 1) & xMask

        const y0 = (py + 0) & yMask
        const y1 = (py + 1) & yMask

        const z0 = (pz + 0) & zMask
        const z1 = (pz + 1) & zMask

        x -= px
        y -= py
        z -= pz

        const u = ((x * 6.0 - 15.0) * x + 10.0) * x * x * x
        const v = ((y * 6.0 - 15.0) * y + 10.0) * y * y * y
        const w = ((z * 6.0 - 15.0) * z + 10.0) * z * z * z

        const r0 = permTable[x0]
        const r1 = permTable[x1]

        const r00 = permTable[r0 + y0]
        const r01 = permTable[r0 + y1]
        const r10 = permTable[r1 + y0]
        const r11 = permTable[r1 + y1]

        const h000 = permTable[r00 + z0] * 3
        const h001 = permTable[r00 + z1] * 3
        const h010 = permTable[r01 + z0] * 3
        const h011 = permTable[r01 + z1] * 3
        const h100 = permTable[r10 + z0] * 3
        const h101 = permTable[r10 + z1] * 3
        const h110 = permTable[r11 + z0] * 3
        const h111 = permTable[r11 + z1] * 3

        const n000 =
            gradTable[h000] * (x + 0) +
            gradTable[h000 + 1] * (y + 0) +
            gradTable[h000 + 2] * (z + 0)
        const n001 =
            gradTable[h001] * (x + 0) +
            gradTable[h001 + 1] * (y + 0) +
            gradTable[h001 + 2] * (z - 1)
        const n010 =
            gradTable[h010] * (x + 0) +
            gradTable[h010 + 1] * (y - 1) +
            gradTable[h010 + 2] * (z + 0)
        const n011 =
            gradTable[h011] * (x + 0) +
            gradTable[h011 + 1] * (y - 1) +
            gradTable[h011 + 2] * (z - 1)
        const n100 =
            gradTable[h100] * (x - 1) +
            gradTable[h100 + 1] * (y + 0) +
            gradTable[h100 + 2] * (z + 0)
        const n101 =
            gradTable[h101] * (x - 1) +
            gradTable[h101 + 1] * (y + 0) +
            gradTable[h101 + 2] * (z - 1)
        const n110 =
            gradTable[h110] * (x - 1) +
            gradTable[h110 + 1] * (y - 1) +
            gradTable[h110 + 2] * (z + 0)
        const n111 =
            gradTable[h111] * (x - 1) +
            gradTable[h111 + 1] * (y - 1) +
            gradTable[h111 + 2] * (z - 1)

        const n00 = n000 + (n001 - n000) * w
        const n01 = n010 + (n011 - n010) * w
        const n10 = n100 + (n101 - n100) * w
        const n11 = n110 + (n111 - n110) * w

        const n0 = n00 + (n01 - n00) * v
        const n1 = n10 + (n11 - n10) * v

        return n0 + (n1 - n0) * u
    }
    return noise
}
