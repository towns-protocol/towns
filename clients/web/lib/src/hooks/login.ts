export const LoginTypeWallet = "m.login.wallet";

export enum LoginStatus {
  LoggedIn = "LoggedIn",
  LoggingIn = "LoggingIn",
  LoggingOut = "LoggingOut",
  LoggedOut = "LoggedOut",
  Registering = "Registering",
}

export interface AuthenticationError {
  code: number;
  message: string;
}

interface UserInteractiveFlow {
  stages: string[];
}

export interface UserInteractive {
  completed: string[];
  flows: UserInteractiveFlow[];
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  params?: any;
  session?: string;
}

interface LoginFlow {
  type: string;
}

export interface LoginFlows {
  flows: LoginFlow[];
}

export interface SignedWalletData {
  signature: string;
  messageFields: WalletMessageFields;
  message: string;
}

export interface AuthenticationData {
  type: string;
  session: string;
  walletAddress: string;
  signedWalletData: SignedWalletData;
}

export interface RegistrationAuthentication {
  type: string;
  session: string;
  walletResponse: AuthenticationData;
}

export interface RegisterRequest {
  // https://spec.matrix.org/v1.2/client-server-api/#post_matrixclientv3register
  auth: RegistrationAuthentication;
  username: string; // wallet address
  inhibit_login?: boolean;
  device_id?: string;
  initial_device_display_name?: string;
}

export interface WalletMessageFields {
  // https://eips.ethereum.org/EIPS/eip-4361
  authority: string; // is the RFC 3986 authority that is requesting the signing.
  address: string; // is the Ethereum address performing the signing conformant to capitalization encoded checksum specified in EIP-55 where applicable.
  statement?: string; // (optional) is a human-readable ASCII assertion that the user will sign, and it must not contain '\n' (the byte 0x0a).
  uri: string; // is an RFC 3986 URI referring to the resource that is the subject of the signing (as in the subject of a claim).
  version: string; // is the current version of the message, which MUST be 1 for this specification.
  chainId: string; // is the EIP-155 Chain ID to which the session is bound, and the network where Contract Accounts must be resolved.
  nonce: string; // is a randomized string used to prevent replay attacks. Generated by server. At least 8 alphanumeric characters.
  issuedAt: Date; //  is the ISO 8601 datetime string of the current time.
  expirationTime?: Date; //  (optional) is the ISO 8601 datetime string that, if present, indicates when the signed authentication message is no longer valid.
  notBefore?: Date; //  (optional) is the ISO 8601 datetime string that, if present, indicates when the signed authentication message will become valid.
  requestId?: string; // (optional) is an system-specific identifier that may be used to uniquely refer to the sign-in request.
  resources?: string[]; // (optional) is a list of information or references to information the user wishes to have resolved as part of authentication by the relying party. They are expressed as RFC 3986 URIs separated by "\n- ".
}

export function getUsernameFromId(
  userId: string | undefined
): string | undefined {
  if (userId) {
    const regexName = /^@(?<username>\w+):/;
    const match = regexName.exec(userId);
    const username = match?.groups?.username ?? undefined;
    return username;
  }

  return undefined;
}

function getServernameFromId(userId: string | undefined): string | undefined {
  if (userId) {
    const regexName = /^@\w+:(?<servername>\w+)/;
    const match = regexName.exec(userId);
    const servername = match?.groups?.servername ?? undefined;
    return servername;
  }

  return undefined;
}

export function toLowerCaseUsername(userId: string): string {
  const username = getUsernameFromId(userId);
  const servername = getServernameFromId(userId);
  if (username && servername) {
    userId = `@${username.toLowerCase()}:${servername}`;
  }

  console.log(`toLowerCaseUsername() = ${userId}`);
  return userId;
}

export function getShortUsername(userId: string): string {
  // Wallet address starts with 0x.....
  if (userId && userId.startsWith("0x") && userId.length === 42) {
    const last4 = userId.length - 4;
    return `${userId.slice(0, 5)}....${userId.slice(last4)}`;
  }
  return userId;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function isLoginFlow(o: any): o is UserInteractive {
  return (o as UserInteractive).flows !== undefined;
}

export function supportsWalletLoginFlow(loginFlows: UserInteractive): boolean {
  for (const f of loginFlows.flows) {
    for (const s of f.stages) {
      if (s === LoginTypeWallet) {
        return true;
      }
    }
  }

  return false;
}
