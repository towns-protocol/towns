allocateStream
│   ├── given state is no streams exist
│   │   ├── when parameters are valid
│   │   │   └── it should successfully allocate a new stream
│   │   ├── when streamId is empty
│   │   │   └── it should revert with RiverRegistry__InvalidStreamId
│   │   ├── when caller is not a node
│   │   │   └── it should revert with RiverRegistry__NodeNotFound
│   │   └── when any node is not in registry
│   │       └── it should revert with RiverRegistry__NodeNotFound
│   └── given state is streamId already exists
│       └── it should revert with RiverRegistry__AlreadyExists

getStream
│   ├── given state is stream exists
│   │   └── it should successfully retrieve the stream
│   └── given state is stream does not exist
│       └── it should revert with RiverRegistry__NodeNotFound

getStreamByNode
│   ├── given state is node has a stream
│   │   └── it should successfully retrieve the stream by node address
│   └── given state is node does not have a stream
│       └── it should revert with RiverRegistry__NodeNotFound

getStreamsLength
│   └── it should return the correct number of streams

getStreamByIndex
│   ├── given state is valid index
│   │   └── it should successfully retrieve a stream by index
│   └── given state is index out of bounds
│       └── it should revert with RiverRegistry__OutOfBounds

setStreamLastMiniblock
│   ├── given state is streamId exists and caller is a node
│   │   ├── when lastMiniblockNum is next expected number
│   │   │   └── it should successfully update the last miniblock
│   │   └── when lastMiniblockNum is not the next expected number
│   │       └── it should revert with RiverRegistry__BadArg
│   ├── given state is caller is not a node
│   │   └── it should revert with RiverRegistry__NodeNotFound
│   └── given state is streamId does not exist
│       └── it should revert with RiverRegistry__StreamNotFound

addNode
│   ├── given state is node does not exist
│   │   └── it should successfully add a new node
│   └── given state is node already exists
│       └── it should revert with RiverRegistry__AlreadyExists

removeNode
│   ├── given state is node exists
│   │   └── it should successfully remove a node
│   └── given state is node does not exist
│       └── it should revert with RiverRegistry__NodeNotFound

getNode
│   ├── given state is node exists
│   │   └── it should successfully retrieve a node
│   └── given state is node does not exist
│       └── it should revert with RiverRegistry__NodeNotFound

getAllNodes
│   └── it should retrieve all nodes correctly

getNodesByStream
│   ├── given state is stream exists
│   │   └── it should successfully retrieve nodes by streamIdHash
│   └── given state is stream does not exist
│       └── it should revert with RiverRegistry__StreamNotFound

removeAllNodes
    └── it should remove all nodes and verify the removal
