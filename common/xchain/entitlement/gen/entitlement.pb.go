// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: entitlement.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Biguint256 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Biguint256) Reset() {
	*x = Biguint256{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biguint256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biguint256) ProtoMessage() {}

func (x *Biguint256) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biguint256.ProtoReflect.Descriptor instead.
func (*Biguint256) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{0}
}

func (x *Biguint256) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ERC20Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId         string      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string      `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Threshold       *Biguint256 `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *ERC20Operation) Reset() {
	*x = ERC20Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Operation) ProtoMessage() {}

func (x *ERC20Operation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Operation.ProtoReflect.Descriptor instead.
func (*ERC20Operation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{1}
}

func (x *ERC20Operation) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ERC20Operation) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ERC20Operation) GetThreshold() *Biguint256 {
	if x != nil {
		return x.Threshold
	}
	return nil
}

type ERC721Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId         string      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string      `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Threshold       *Biguint256 `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *ERC721Operation) Reset() {
	*x = ERC721Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC721Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC721Operation) ProtoMessage() {}

func (x *ERC721Operation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC721Operation.ProtoReflect.Descriptor instead.
func (*ERC721Operation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{2}
}

func (x *ERC721Operation) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ERC721Operation) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ERC721Operation) GetThreshold() *Biguint256 {
	if x != nil {
		return x.Threshold
	}
	return nil
}

type ERC1155Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId         string      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string      `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Threshold       *Biguint256 `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *ERC1155Operation) Reset() {
	*x = ERC1155Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC1155Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC1155Operation) ProtoMessage() {}

func (x *ERC1155Operation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC1155Operation.ProtoReflect.Descriptor instead.
func (*ERC1155Operation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{3}
}

func (x *ERC1155Operation) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ERC1155Operation) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ERC1155Operation) GetThreshold() *Biguint256 {
	if x != nil {
		return x.Threshold
	}
	return nil
}

type IsEntitledOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId         string      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string      `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Threshold       *Biguint256 `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *IsEntitledOperation) Reset() {
	*x = IsEntitledOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEntitledOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEntitledOperation) ProtoMessage() {}

func (x *IsEntitledOperation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEntitledOperation.ProtoReflect.Descriptor instead.
func (*IsEntitledOperation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{4}
}

func (x *IsEntitledOperation) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *IsEntitledOperation) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *IsEntitledOperation) GetThreshold() *Biguint256 {
	if x != nil {
		return x.Threshold
	}
	return nil
}

type CheckOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CheckClause:
	//
	//	*CheckOperation_Erc20Operation
	//	*CheckOperation_Erc721Operation
	//	*CheckOperation_Erc1155Operation
	//	*CheckOperation_IsEntitledOperation
	CheckClause isCheckOperation_CheckClause `protobuf_oneof:"check_clause"`
}

func (x *CheckOperation) Reset() {
	*x = CheckOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOperation) ProtoMessage() {}

func (x *CheckOperation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOperation.ProtoReflect.Descriptor instead.
func (*CheckOperation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{5}
}

func (m *CheckOperation) GetCheckClause() isCheckOperation_CheckClause {
	if m != nil {
		return m.CheckClause
	}
	return nil
}

func (x *CheckOperation) GetErc20Operation() *ERC20Operation {
	if x, ok := x.GetCheckClause().(*CheckOperation_Erc20Operation); ok {
		return x.Erc20Operation
	}
	return nil
}

func (x *CheckOperation) GetErc721Operation() *ERC721Operation {
	if x, ok := x.GetCheckClause().(*CheckOperation_Erc721Operation); ok {
		return x.Erc721Operation
	}
	return nil
}

func (x *CheckOperation) GetErc1155Operation() *ERC1155Operation {
	if x, ok := x.GetCheckClause().(*CheckOperation_Erc1155Operation); ok {
		return x.Erc1155Operation
	}
	return nil
}

func (x *CheckOperation) GetIsEntitledOperation() *IsEntitledOperation {
	if x, ok := x.GetCheckClause().(*CheckOperation_IsEntitledOperation); ok {
		return x.IsEntitledOperation
	}
	return nil
}

type isCheckOperation_CheckClause interface {
	isCheckOperation_CheckClause()
}

type CheckOperation_Erc20Operation struct {
	Erc20Operation *ERC20Operation `protobuf:"bytes,1,opt,name=erc20_operation,json=erc20Operation,proto3,oneof"`
}

type CheckOperation_Erc721Operation struct {
	Erc721Operation *ERC721Operation `protobuf:"bytes,2,opt,name=erc721_operation,json=erc721Operation,proto3,oneof"`
}

type CheckOperation_Erc1155Operation struct {
	Erc1155Operation *ERC1155Operation `protobuf:"bytes,3,opt,name=erc1155_operation,json=erc1155Operation,proto3,oneof"`
}

type CheckOperation_IsEntitledOperation struct {
	IsEntitledOperation *IsEntitledOperation `protobuf:"bytes,4,opt,name=is_entitled_operation,json=isEntitledOperation,proto3,oneof"`
}

func (*CheckOperation_Erc20Operation) isCheckOperation_CheckClause() {}

func (*CheckOperation_Erc721Operation) isCheckOperation_CheckClause() {}

func (*CheckOperation_Erc1155Operation) isCheckOperation_CheckClause() {}

func (*CheckOperation_IsEntitledOperation) isCheckOperation_CheckClause() {}

type AndOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftOperation  *Operation `protobuf:"bytes,1,opt,name=left_operation,json=leftOperation,proto3" json:"left_operation,omitempty"`
	RightOperation *Operation `protobuf:"bytes,2,opt,name=right_operation,json=rightOperation,proto3" json:"right_operation,omitempty"`
}

func (x *AndOperation) Reset() {
	*x = AndOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndOperation) ProtoMessage() {}

func (x *AndOperation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndOperation.ProtoReflect.Descriptor instead.
func (*AndOperation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{6}
}

func (x *AndOperation) GetLeftOperation() *Operation {
	if x != nil {
		return x.LeftOperation
	}
	return nil
}

func (x *AndOperation) GetRightOperation() *Operation {
	if x != nil {
		return x.RightOperation
	}
	return nil
}

type OrOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftOperation  *Operation `protobuf:"bytes,1,opt,name=left_operation,json=leftOperation,proto3" json:"left_operation,omitempty"`
	RightOperation *Operation `protobuf:"bytes,2,opt,name=right_operation,json=rightOperation,proto3" json:"right_operation,omitempty"`
}

func (x *OrOperation) Reset() {
	*x = OrOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrOperation) ProtoMessage() {}

func (x *OrOperation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrOperation.ProtoReflect.Descriptor instead.
func (*OrOperation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{7}
}

func (x *OrOperation) GetLeftOperation() *Operation {
	if x != nil {
		return x.LeftOperation
	}
	return nil
}

func (x *OrOperation) GetRightOperation() *Operation {
	if x != nil {
		return x.RightOperation
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OperationClause:
	//
	//	*Operation_CheckOperation
	//	*Operation_AndOperation
	//	*Operation_OrOperation
	OperationClause isOperation_OperationClause `protobuf_oneof:"operation_clause"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{8}
}

func (m *Operation) GetOperationClause() isOperation_OperationClause {
	if m != nil {
		return m.OperationClause
	}
	return nil
}

func (x *Operation) GetCheckOperation() *CheckOperation {
	if x, ok := x.GetOperationClause().(*Operation_CheckOperation); ok {
		return x.CheckOperation
	}
	return nil
}

func (x *Operation) GetAndOperation() *AndOperation {
	if x, ok := x.GetOperationClause().(*Operation_AndOperation); ok {
		return x.AndOperation
	}
	return nil
}

func (x *Operation) GetOrOperation() *OrOperation {
	if x, ok := x.GetOperationClause().(*Operation_OrOperation); ok {
		return x.OrOperation
	}
	return nil
}

type isOperation_OperationClause interface {
	isOperation_OperationClause()
}

type Operation_CheckOperation struct {
	CheckOperation *CheckOperation `protobuf:"bytes,1,opt,name=check_operation,json=checkOperation,proto3,oneof"`
}

type Operation_AndOperation struct {
	AndOperation *AndOperation `protobuf:"bytes,2,opt,name=and_operation,json=andOperation,proto3,oneof"`
}

type Operation_OrOperation struct {
	OrOperation *OrOperation `protobuf:"bytes,3,opt,name=or_operation,json=orOperation,proto3,oneof"`
}

func (*Operation_CheckOperation) isOperation_OperationClause() {}

func (*Operation_AndOperation) isOperation_OperationClause() {}

func (*Operation_OrOperation) isOperation_OperationClause() {}

type OperationTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *OperationTree) Reset() {
	*x = OperationTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entitlement_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationTree) ProtoMessage() {}

func (x *OperationTree) ProtoReflect() protoreflect.Message {
	mi := &file_entitlement_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationTree.ProtoReflect.Descriptor instead.
func (*OperationTree) Descriptor() ([]byte, []int) {
	return file_entitlement_proto_rawDescGZIP(), []int{9}
}

func (x *OperationTree) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

var File_entitlement_proto protoreflect.FileDescriptor

var file_entitlement_proto_rawDesc = []byte{
	0x0a, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x22, 0x20, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x75, 0x69, 0x6e, 0x74, 0x32,
	0x35, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x39, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x69, 0x67, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x35, 0x36, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x45,
	0x52, 0x43, 0x37, 0x32, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x69, 0x67, 0x75, 0x69, 0x6e,
	0x74, 0x32, 0x35, 0x36, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22,
	0x93, 0x01, 0x0a, 0x10, 0x45, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x62, 0x69, 0x67, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x35, 0x36, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x49, 0x73, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x69, 0x67, 0x75, 0x69, 0x6e, 0x74,
	0x32, 0x35, 0x36, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xe9,
	0x02, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x65,
	0x72, 0x63, 0x32, 0x30, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x10, 0x65, 0x72, 0x63, 0x37, 0x32, 0x31, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x72, 0x63,
	0x37, 0x32, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11,
	0x65, 0x72, 0x63, 0x31, 0x31, 0x35, 0x35, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x31, 0x31, 0x35,
	0x35, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x65, 0x72,
	0x63, 0x31, 0x31, 0x35, 0x35, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x15, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x41,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6c, 0x65, 0x66, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x61,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x6f,
	0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x5a,
	0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x78, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_entitlement_proto_rawDescOnce sync.Once
	file_entitlement_proto_rawDescData = file_entitlement_proto_rawDesc
)

func file_entitlement_proto_rawDescGZIP() []byte {
	file_entitlement_proto_rawDescOnce.Do(func() {
		file_entitlement_proto_rawDescData = protoimpl.X.CompressGZIP(file_entitlement_proto_rawDescData)
	})
	return file_entitlement_proto_rawDescData
}

var file_entitlement_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_entitlement_proto_goTypes = []interface{}{
	(*Biguint256)(nil),          // 0: xchain_proto.v1.biguint256
	(*ERC20Operation)(nil),      // 1: xchain_proto.v1.ERC20Operation
	(*ERC721Operation)(nil),     // 2: xchain_proto.v1.ERC721Operation
	(*ERC1155Operation)(nil),    // 3: xchain_proto.v1.ERC1155Operation
	(*IsEntitledOperation)(nil), // 4: xchain_proto.v1.IsEntitledOperation
	(*CheckOperation)(nil),      // 5: xchain_proto.v1.CheckOperation
	(*AndOperation)(nil),        // 6: xchain_proto.v1.AndOperation
	(*OrOperation)(nil),         // 7: xchain_proto.v1.OrOperation
	(*Operation)(nil),           // 8: xchain_proto.v1.Operation
	(*OperationTree)(nil),       // 9: xchain_proto.v1.OperationTree
}
var file_entitlement_proto_depIdxs = []int32{
	0,  // 0: xchain_proto.v1.ERC20Operation.threshold:type_name -> xchain_proto.v1.biguint256
	0,  // 1: xchain_proto.v1.ERC721Operation.threshold:type_name -> xchain_proto.v1.biguint256
	0,  // 2: xchain_proto.v1.ERC1155Operation.threshold:type_name -> xchain_proto.v1.biguint256
	0,  // 3: xchain_proto.v1.IsEntitledOperation.threshold:type_name -> xchain_proto.v1.biguint256
	1,  // 4: xchain_proto.v1.CheckOperation.erc20_operation:type_name -> xchain_proto.v1.ERC20Operation
	2,  // 5: xchain_proto.v1.CheckOperation.erc721_operation:type_name -> xchain_proto.v1.ERC721Operation
	3,  // 6: xchain_proto.v1.CheckOperation.erc1155_operation:type_name -> xchain_proto.v1.ERC1155Operation
	4,  // 7: xchain_proto.v1.CheckOperation.is_entitled_operation:type_name -> xchain_proto.v1.IsEntitledOperation
	8,  // 8: xchain_proto.v1.AndOperation.left_operation:type_name -> xchain_proto.v1.Operation
	8,  // 9: xchain_proto.v1.AndOperation.right_operation:type_name -> xchain_proto.v1.Operation
	8,  // 10: xchain_proto.v1.OrOperation.left_operation:type_name -> xchain_proto.v1.Operation
	8,  // 11: xchain_proto.v1.OrOperation.right_operation:type_name -> xchain_proto.v1.Operation
	5,  // 12: xchain_proto.v1.Operation.check_operation:type_name -> xchain_proto.v1.CheckOperation
	6,  // 13: xchain_proto.v1.Operation.and_operation:type_name -> xchain_proto.v1.AndOperation
	7,  // 14: xchain_proto.v1.Operation.or_operation:type_name -> xchain_proto.v1.OrOperation
	8,  // 15: xchain_proto.v1.OperationTree.operation:type_name -> xchain_proto.v1.Operation
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_entitlement_proto_init() }
func file_entitlement_proto_init() {
	if File_entitlement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_entitlement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biguint256); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC721Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC1155Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEntitledOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entitlement_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_entitlement_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CheckOperation_Erc20Operation)(nil),
		(*CheckOperation_Erc721Operation)(nil),
		(*CheckOperation_Erc1155Operation)(nil),
		(*CheckOperation_IsEntitledOperation)(nil),
	}
	file_entitlement_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Operation_CheckOperation)(nil),
		(*Operation_AndOperation)(nil),
		(*Operation_OrOperation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entitlement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_entitlement_proto_goTypes,
		DependencyIndexes: file_entitlement_proto_depIdxs,
		MessageInfos:      file_entitlement_proto_msgTypes,
	}.Build()
	File_entitlement_proto = out.File
	file_entitlement_proto_rawDesc = nil
	file_entitlement_proto_goTypes = nil
	file_entitlement_proto_depIdxs = nil
}
