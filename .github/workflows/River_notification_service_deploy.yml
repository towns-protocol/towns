name: 'River Notification Service Deploy'

on:
    workflow_dispatch:
        inputs:
            environment_name:
                description: 'Environment name'
                required: true
                type: string
                default: 'alpha'
            docker_image_tag:
                description: 'Docker image tag to deploy'
                required: true
                default: 'dev'

    workflow_call:
        inputs:
            environment_name:
                description: 'Environment name'
                required: true
                type: string
            docker_image_tag:
                description: 'Docker image tag to deploy'
                required: true
                type: string

        secrets:
            AWS_ACCESS_KEY_ID:
                description: 'AWS access key id'
                required: true
            AWS_SECRET_ACCESS_KEY:
                description: 'AWS secret access key'
                required: true
            SLACK_CD_ALERT_WORKFLOW_WEBHOOK_URL:
                description: 'Slack webhook url for alerting'
                required: true
            SLACK_CD_INFO_WORKFLOW_WEBHOOK_URL:
                description: 'Slack webhook url for info'
                required: true
            TF_VAR_datadog_api_key:
                description: 'Data dog api key to log the failure in datadog'
                required: true
            HARMONY_GITHUB_PAT:
                description: 'Github personal access token to trigger repository dispatch'
                required: true

concurrency:
    group: river-notification-service-deploy-${{ inputs.environment_name }}
    cancel-in-progress: true

jobs:
    pre_deploy:
        name: Pre-deploy checks
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Debug Log
              run: |
                  echo "Deploying to environment: ${{ inputs.environment_name }}"
                  echo "with image tag: ${{ inputs.docker_image_tag }}"

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Check if image exists
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

              run: |
                  if ! docker manifest inspect public.ecr.aws/h5v6m2x1/river:${{ inputs.docker_image_tag }} > /dev/null 2>&1; then
                      echo "Docker image with the tag=${{ inputs.docker_image_tag }} does not exist. No need to deploy river."
                      exit 1 
                  else
                      echo "Docker image with the tag=${{ inputs.docker_image_tag }} exists. Continue with the deployment."
                  fi

            - name: Info notification
              uses: slackapi/slack-github-action@v1.24.0
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CD_INFO_WORKFLOW_WEBHOOK_URL }}
              with:
                  payload: |
                      {
                          "message": "Begin deployment with image tag: ${{ inputs.docker_image_tag  }} for river notification service",
                          "environment": "${{ inputs.environment_name }}",
                          "branch": "${{ github.ref }}",
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                          "commit": "${{ github.sha }}",
                          "actor": "${{ github.actor }}"
                      }
    deploy:
        name: Deploy
        runs-on: ubuntu-latest

        needs: pre_deploy

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Deploy via ECS
              if: inputs.environment_name != 'gamma'
              env:
                  ENVIRONMENT_NAME: ${{ inputs.environment_name }}
                  DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}
              run: ./scripts/create-and-deploy-river-notification-service-task-definition.sh

            - name: Deploy via Repository Dispatch (Gamma Only)
              if: inputs.environment_name == 'gamma'
              env:
                  ENVIRONMENT_NAME: ${{ inputs.environment_name }}
                  DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.HARMONY_GITHUB_PAT }}
                  script: |
                      await github.rest.repos.createDispatchEvent({
                        owner: "HereNotThere",
                        repo: "argocd",
                        event_type: "update-infra",
                        client_payload: {
                          environment: process.env.ENVIRONMENT_NAME,
                          notificationServiceImageTag: process.env.DOCKER_IMAGE_TAG
                        }
                      });

            - name: Data dog logging
              if: failure()
              working-directory: ./infra
              env:
                  ENV: '${{ inputs.environment_name }}'
                  TF_ACTION_TYPE: 'Riverdeploy'
                  TF_STATUS: 'ERROR'
                  LOG_MESSAGE: 'River deploy to ECS failed for ${{ github.ref }} branch (https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
                  TF_VAR_datadog_api_key: ${{ secrets.TF_VAR_datadog_api_key }}
              run: './log_datadog.sh'

    on_failure:
        name: On Failure
        runs-on: ubuntu-latest

        needs: [pre_deploy, deploy]

        if: failure()

        steps:
            # If action failed, we send a slack notification
            - name: Alert notification
              uses: slackapi/slack-github-action@v1.24.0
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CD_ALERT_WORKFLOW_WEBHOOK_URL }}
              with:
                  payload: |
                      {
                          "step": "Deploy River ECS",
                          "environment": "${{ inputs.environment_name }}",
                          "branch": "${{ github.ref }}",
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                          "commit": "${{ github.sha }}",
                          "actor": "${{ github.actor }}"
                      }

    on_success:
        name: On Success
        runs-on: ubuntu-latest

        needs: [pre_deploy, deploy]

        if: success()

        steps:
            - name: Success notification
              uses: slackapi/slack-github-action@v1.24.0
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CD_INFO_WORKFLOW_WEBHOOK_URL }}
              with:
                  payload: |
                      {
                          "message": "Deploy job ran successfully for docker tag: ${{ inputs.docker_image_tag }} on nodes: ${{ inputs.node_numbers }} with run mode: ${{ inputs.run_mode }}",
                          "environment": "${{ inputs.environment_name }}",
                          "branch": "${{ github.ref }}",
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                          "commit": "${{ github.sha }}",
                          "actor": "${{ github.actor }}"
                      }
