name: 'River notification service continuous deployment'

on:
    # push:
    #     branches:
    #         - main
    #     paths:
    #         - 'scripts/river-node-tag/tag.txt'

    workflow_dispatch:
        inputs:
            environment_name:
                description: 'Environment name'
                required: true
                type: choice
                options:
                    - gamma
                    - omega
                    - alpha
                default: alpha

    workflow_call:
        inputs:
            environment_name:
                description: 'Environment name'
                required: true
                type: string

        secrets:
            AWS_ACCESS_KEY_ID:
                description: 'AWS access key id'
                required: true
            AWS_SECRET_ACCESS_KEY:
                description: 'AWS secret access key'
                required: true
            SLACK_CD_ALERT_WORKFLOW_WEBHOOK_URL:
                description: 'Slack webhook url for alerting'
                required: true
            SLACK_CD_INFO_WORKFLOW_WEBHOOK_URL:
                description: 'Slack webhook url for info'
                required: true
            TF_VAR_datadog_api_key:
                description: 'Data dog api key to log the failure in datadog'
                required: true

concurrency:
    group: river-notification-service-cd-${{ github.ref }}-${{ inputs.environment_name }}
    cancel-in-progress: true

jobs:
    setup:
        name: Setup
        runs-on: ubuntu-latest
        outputs:
            ENV_NAME: ${{ steps.set_deployment_parameters.outputs.ENV_NAME }}
            DOCKER_IMAGE_TAG: ${{ steps.set_deployment_parameters.outputs.DOCKER_IMAGE_TAG }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Get Environment Name
              id: get_environment_name
              env:
                  BRANCH_NAME: ${{ github.ref }}
                  ENVIRONMENT_NAME_INPUT: ${{ inputs.environment_name }}
              run: |
                  if [ -n "$ENVIRONMENT_NAME_INPUT" ]; then
                    ENV_NAME=$ENVIRONMENT_NAME_INPUT
                  elif [ $BRANCH_NAME = "refs/heads/main" ]; then
                    ENV_NAME="gamma"
                  else
                      echo "Error: Could not determine environment name. Exiting."
                      exit 1
                  fi

                  echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV

            - name: Set Deployment Parameters
              id: set_deployment_parameters
              env:
                  BRANCH_NAME: ${{ github.ref }}
                  ENV_NAME: ${{ env.ENV_NAME }}
              run: |
                  if [ $ENV_NAME = "gamma" ]; then

                    DOCKER_IMAGE_TAG=$(./scripts/river-node-tag/run.sh get)

                  elif [ $ENV_NAME = "alpha" ]; then

                    DOCKER_IMAGE_TAG=$(./scripts/river-node-tag/run.sh get)

                  elif [ $ENV_NAME = "omega" ]; then

                    DOCKER_IMAGE_TAG=mainnet

                  else
                    echo "Error: Env name unrecognized: <$ENV_NAME>. Exiting."
                    exit 1
                  fi

                  echo "::set-output name=ENV_NAME::$ENV_NAME"
                  echo "::set-output name=DOCKER_IMAGE_TAG::$DOCKER_IMAGE_TAG"

            # If action failed, we send a slack notification
            - name: Alert notification
              if: failure()
              uses: slackapi/slack-github-action@v1.24.0
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CD_ALERT_WORKFLOW_WEBHOOK_URL }}
                  ENV_NAME: ${{ env.ENV_NAME }}
              with:
                  payload: |
                      {
                          "step": "River Notification Service Continuous Deployment",
                          "environment": "${{ env.ENV_NAME }}",
                          "branch": "${{ github.ref }}",
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                          "commit": "${{ github.sha }}",
                          "actor": "${{ github.actor }}"
                      }

    deployment:
        needs: setup
        uses: './.github/workflows/River_notification_service_deploy.yml'
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            SLACK_CD_ALERT_WORKFLOW_WEBHOOK_URL: ${{ secrets.SLACK_CD_ALERT_WORKFLOW_WEBHOOK_URL }}
            SLACK_CD_INFO_WORKFLOW_WEBHOOK_URL: ${{ secrets.SLACK_CD_INFO_WORKFLOW_WEBHOOK_URL }}
            TF_VAR_datadog_api_key: ${{ secrets.TF_VAR_datadog_api_key }}

        with:
            environment_name: ${{ needs.setup.outputs.ENV_NAME }}
            docker_image_tag: ${{ needs.setup.outputs.DOCKER_IMAGE_TAG }}
