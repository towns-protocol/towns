name: Continuous Integration
env:
    FOUNDRY_VERSION: nightly-ca67d15f4abd46394b324c50e21e66f306a1162d
on:
    schedule:
        # run during working hours
        - cron: '0 15-23 * * *'
    pull_request:
    workflow_dispatch: # Allow manual trigger in GitHub UI
        inputs:
            skip_dendrite:
                description: Skip Dendrite Tests
                required: false
                default: false
                type: boolean
            skip_casablanca_client_noentitlements:
                description: Skip Casablanca Client Tests without entitlements
                required: false
                default: false
                type: boolean
            skip_casablanca_client_entitlements:
                description: Skip Casablanca Client Tests with entitlements
                required: false
                default: false
                type: boolean
            skip_casablanca_node:
                description: Skip Casablanca Node Tests
                required: false
                default: false
                type: boolean
            skip_xchain_node:
                description: Skip XChain Node Tests
                required: false
                default: false
                type: boolean

jobs:
    Dendrite:
        permissions: write-all
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_dendrite
        runs-on: ubuntu-latest-8-cores
        timeout-minutes: 30
        services:
            postgres-dendrite:
                image: postgres:latest
                env:
                    POSTGRES_USER: dendrite
                    POSTGRES_PASSWORD: itsasecret
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.11.0
              with:
                  access_token: ${{ github.token }}

            - name: Checkout code
              uses: actions/checkout@v3

            - name: Git submodules
              run: git submodule update --init --recursive

            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version: '1.20'
                  cache: true
                  cache-dependency-path: 'servers/**/go.sum'

            - name: Install Foundry
              uses: foundry-rs/foundry-toolchain@v1
              with:
                  version: ${{ env.FOUNDRY_VERSION }}

            - name: Install Forge modules
              run: ./scripts/install-deps.sh

            - uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'yarn'

            - name: Install node dependencies
              run: yarn install --immutable

            - name: Maintain Turbo cache
              uses: actions/cache@v3
              with:
                  path: node_modules/.cache/turbo
                  key: ${{ runner.os }}-turbo-${{ github.run_id }}
                  restore-keys: |
                      ${{ runner.os }}-turbo-

            - name: Syncpack
              run: yarn syncpack:check

            - name: Build
              run: yarn build

            - name: Prettier
              run: yarn prettier:check

            - name: Lint
              run: yarn lint

            - name: Build contract types
              run: ./scripts/build-contract-types.sh localhost --frozen

            - name: Start dendrite
              run: ./scripts/start-local-dendrite.sh --skip-postgres &

            - name: Start anvil
              # Start anvil in the background, and wait for it to be ready
              run: anvil & ./scripts/wait-for-blockchain.sh

            - name: Deploy local zion governance contracts
              run: ./scripts/deploy-zion-governance-contracts.sh

            - name: Wait for dendrite to be ready
              run: yarn drt:wait

            - name: Unit Tests
              run: yarn test:unit

            - name: E2E Tests
              if: github.event_name != 'pull_request'
              run: yarn test:dendrite:e2e

            # If CI failed, we send a slack notification
            - name: Slack notification
              if: failure() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_CI_CHANNEL_WEBHOOK_URL }}
                  SLACK_TITLE: 'Failure'
                  SLACK_USERNAME: 'CI'
                  SLACK_ICON_EMOJI: ':boom:'
                  SLACK_COLOR: '#FF0000'
                  SLACK_MESSAGE: 'CI Failure on ${{ github.repository }}'

    Casablanca_Client_NoEntitlements:
        permissions: write-all
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_casablanca_client_noentitlements
        runs-on: ubuntu-latest-8-cores
        timeout-minutes: 30
        services:
            postgres-casablanca:
                image: postgres:latest
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    # Maps tcp port 5433 on service container to the host
                    - 5433:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                    --name casablanca_postgres_container

        steps:
            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.11.0
              with:
                  access_token: ${{ github.token }}

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Increase max_connections in Postgres
              run: |
                  docker exec -i casablanca_postgres_container bash << EOF
                    echo 'max_connections = 1000' >> /var/lib/postgresql/data/postgresql.conf
                    echo 'shared_buffers = 2GB' >> /var/lib/postgresql/data/postgresql.conf
                  EOF
                  docker restart --time 0 casablanca_postgres_container
                  sleep 5

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Checkout code
              uses: actions/checkout@v3

            - name: Git submodules
              run: git submodule update --init --recursive

            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version: '1.20'
                  cache: true
                  cache-dependency-path: |
                      servers/**/go.sum
                      casablanca/node/go.sum

            - name: Install Foundry
              uses: foundry-rs/foundry-toolchain@v1
              with:
                  version: ${{ env.FOUNDRY_VERSION }}

            - name: Install Forge modules
              run: ./scripts/install-deps.sh

            - uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'yarn'

            - name: Print versions
              run: ./scripts/print-versions.sh

            - name: Install node dependencies
              run: yarn install --immutable

            - name: Print Yarn package versions
              run: yarn info --name-only --all

            - name: Maintain Turbo cache
              uses: actions/cache@v3
              with:
                  path: node_modules/.cache/turbo
                  key: ${{ runner.os }}-turbo-${{ github.run_id }}
                  restore-keys: |
                      ${{ runner.os }}-turbo-

            - name: Syncpack
              run: yarn syncpack:check

            - name: Build contract types
              run: ./scripts/build-contract-types.sh localhost --frozen

            - name: Start anvil
              # Start anvil in the background, and wait for it to be ready
              run: anvil & ./scripts/wait-for-blockchain.sh

            - name: Deploy local zion governance contracts
              run: ./scripts/deploy-zion-governance-contracts.sh

            - name: Casablanca create db
              run: psql -h localhost -p 5433 -U postgres -f scripts/sql/create_db.sql
              working-directory: casablanca
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Run Casablanca node (without entitlements)
              run: yarn csb:start:no-entitlements &

            - name: Wait for Casablanca (without entitlements) node to be up
              run: yarn csb:wait:no-entitlements

            - name: Run SDK Tests (without entitlements)
              run: yarn run turbo run build test:ci --filter=@river/sdk

            - name: Run Node Restart Tests (without entitlements)
              run: yarn workspace @river/sdk run test:restart

            - name: Run Node Flush Tests (without entitlements)
              run: yarn workspace @river/sdk run test:node-minipool-flush

            - name: Archive Casablanca log
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: casablanca-node-log
                  path: |
                      casablanca/node/logs/dev.log

            # If CI failed, we send a slack notification
            - name: Slack notification
              if: failure() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_CI_CHANNEL_WEBHOOK_URL }}
                  SLACK_TITLE: 'Failure'
                  SLACK_USERNAME: 'CI'
                  SLACK_ICON_EMOJI: ':boom:'
                  SLACK_COLOR: '#FF0000'
                  SLACK_MESSAGE: 'CI Failure on ${{ github.repository }}'

    Casablanca_Client_Entitlements:
        permissions: write-all
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_casablanca_client_enti
        runs-on: ubuntu-latest-8-cores
        timeout-minutes: 30
        services:
            postgres-casablanca:
                image: postgres:latest
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    # Maps tcp port 5433 on service container to the host
                    - 5433:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                    --name casablanca_postgres_container

        steps:
            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.11.0
              with:
                  access_token: ${{ github.token }}

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Increase max_connections in Postgres
              run: |
                  docker exec -i casablanca_postgres_container bash << EOF
                    echo 'max_connections = 1000' >> /var/lib/postgresql/data/postgresql.conf
                    echo 'shared_buffers = 2GB' >> /var/lib/postgresql/data/postgresql.conf
                  EOF
                  docker restart --time 0 casablanca_postgres_container
                  sleep 5

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Checkout code
              uses: actions/checkout@v3

            - name: Git submodules
              run: git submodule update --init --recursive

            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version: '1.20'
                  cache: true
                  cache-dependency-path: |
                      servers/**/go.sum
                      casablanca/node/go.sum

            - name: Install Foundry
              uses: foundry-rs/foundry-toolchain@v1
              with:
                  version: ${{ env.FOUNDRY_VERSION }}

            - name: Install Forge modules
              run: ./scripts/install-deps.sh

            - uses: actions/setup-node@v3
              with:
                  node-version: '18.13.0'
                  cache: 'yarn'

            - name: Print versions
              run: ./scripts/print-versions.sh

            - name: Install node dependencies
              run: yarn install --immutable

            - name: Print Yarn package versions
              run: yarn info --name-only --all

            - name: Maintain Turbo cache
              uses: actions/cache@v3
              with:
                  path: node_modules/.cache/turbo
                  key: ${{ runner.os }}-turbo-${{ github.run_id }}
                  restore-keys: |
                      ${{ runner.os }}-turbo-

            - name: Syncpack
              run: yarn syncpack:check

            - name: Build contract types
              run: ./scripts/build-contract-types.sh localhost --frozen

            - name: Start anvil
              # Start anvil in the background, and wait for it to be ready
              run: anvil & ./scripts/wait-for-blockchain.sh

            - name: Deploy local zion governance contracts
              run: ./scripts/deploy-zion-governance-contracts.sh

            - name: Casablanca create db
              run: psql -h localhost -p 5433 -U postgres -f scripts/sql/create_db.sql
              working-directory: casablanca
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Start Casablanca node with entitlements
              run: yarn csb:start:entitlements  &

            - name: Wait for Casablanca (with entitlements) node to be up
              run: yarn csb:wait:entitlements

            - name: Build & Test (with entitlements)
              run: yarn csb:turbo-no-sdk

            - name: Run River Tests (with entitlements)
              run: yarn workspace @river/sdk run test:ci:with-entitlements

            - name: Archive Casablanca log
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: casablanca-node-log
                  path: |
                      casablanca/node/logs/dev.log

            # If CI failed, we send a slack notification
            - name: Slack notification
              if: failure() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_CI_CHANNEL_WEBHOOK_URL }}
                  SLACK_TITLE: 'Failure'
                  SLACK_USERNAME: 'CI'
                  SLACK_ICON_EMOJI: ':boom:'
                  SLACK_COLOR: '#FF0000'
                  SLACK_MESSAGE: 'CI Failure on ${{ github.repository }}'

    Casablanca_Node:
        permissions: write-all
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_casablanca_node
        runs-on: ubuntu-latest-8-cores
        timeout-minutes: 30
        services:
            postgres-casablanca:
                image: postgres:latest
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    # Maps tcp port 5433 on service container to the host
                    - 5433:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.11.0
              with:
                  access_token: ${{ github.token }}

            - name: Checkout code
              uses: actions/checkout@v3

            - name: Git submodules
              run: git submodule update --init --recursive

            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version: '1.20'
                  cache: true
                  cache-dependency-path: |
                      casablanca/node/go.sum

            - name: Linting
              uses: golangci/golangci-lint-action@v3
              with:
                  working-directory: casablanca/node

            - name: Casablanca create db
              run: psql -h localhost -p 5433 -U postgres -f scripts/sql/create_db.sql
              working-directory: casablanca
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Run node tests
              run: go test --race ./...
              working-directory: casablanca/node

            # If CI failed, we send a slack notification
            - name: Slack notification
              if: failure() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_CI_CHANNEL_WEBHOOK_URL }}
                  SLACK_TITLE: 'Failure'
                  SLACK_USERNAME: 'CI'
                  SLACK_ICON_EMOJI: ':boom:'
                  SLACK_COLOR: '#FF0000'
                  SLACK_MESSAGE: 'CI Failure on ${{ github.repository }}'

    XChain_Node:
        permissions: write-all
        if: ( github.event_name != 'workflow_dispatch' || !inputs.skip_xchain_node )
        runs-on: ubuntu-latest-8-cores
        timeout-minutes: 30
        steps:
            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.11.0
              with:
                  access_token: ${{ github.token }}

            - name: Checkout code
              uses: actions/checkout@v3

            - name: Git submodules
              run: git submodule update --init --recursive

            - uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'yarn'

            - name: Install node dependencies
              run: yarn install --immutable

            - name: Maintain Turbo cache
              uses: actions/cache@v3
              with:
                  path: node_modules/.cache/turbo
                  key: ${{ runner.os }}-turbo-${{ github.run_id }}
                  restore-keys: |
                      ${{ runner.os }}-turbo-

            - name: Install Foundry
              uses: foundry-rs/foundry-toolchain@v1
              with:
                  version: ${{ env.FOUNDRY_VERSION }}

            - name: Install Forge modules
              run: ./scripts/install-deps.sh

            - name: Setup Go
              uses: actions/setup-go@v3
              with:
                  go-version: '1.20'
                  cache: true
                  cache-dependency-path: |
                      servers/xchain/go.sum

            - name: Start anvil
              # Start anvil in the background, and wait for it to be ready
              run: anvil & ./scripts/wait-for-blockchain.sh

            - name: Deploy local zion governance contracts
              run: ./scripts/deploy-entitlement-checker.sh

            - name: Build town contract types
              run: ./scripts/build-town-types.sh localhost --frozen

            - name: Run node tests
              run: go test --race ./...
              working-directory: servers/xchain

            - name: Build node
              run: go build --race ./...
              working-directory: servers/xchain

            # If CI failed, we send a slack notification
            - name: Slack notification
              if: failure() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_CI_CHANNEL_WEBHOOK_URL }}
                  SLACK_TITLE: 'Failure'
                  SLACK_USERNAME: 'CI'
                  SLACK_ICON_EMOJI: ':boom:'
                  SLACK_COLOR: '#FF0000'
                  SLACK_MESSAGE: 'CI Failure on ${{ github.repository }}'
