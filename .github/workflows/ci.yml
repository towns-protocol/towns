name: Continuous Integration

env:
    FOUNDRY_VERSION: nightly
    RIVER_BLOCK_TIME: 1
    CGO_ENABLED: 1 # required for go race
on:
    schedule:
        # Run every hour
        - cron: '0 * * * *'
    pull_request:
    workflow_dispatch: # Allow manual trigger in GitHub UI
        inputs:
            skip_common_ci:
                description: Skip Common CI checks (i.e linting, prettier, etc)
                required: false
                default: false
                type: boolean
            skip_multinode_ent:
                description: Skip Multi-node Ent Tests
                required: false
                default: false
                type: boolean
            skip_multinode_ent_legacy:
                description: Skip Multi-node Ent Legacy Tests
                required: false
                default: false
                type: boolean

jobs:
    Common_CI:
        permissions: write-all
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_common_ci
        runs-on: ['arc-runners']
        timeout-minutes: 30

        steps:
            - name: Print bash environment
              run: env

            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.12.1
              with:
                  access_token: ${{ github.token }}

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: 'river/go.work'
                  cache-dependency-path: '**/*.sum'

            - name: Install Foundry
              uses: foundry-rs/foundry-toolchain@v1
              with:
                  version: ${{ env.FOUNDRY_VERSION }}

            - name: Install Make
              run: sudo apt-get update && sudo apt-get -y install make

            - uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Setup yarn
              run: npm install -g yarn

            - name: Maintain Turbo cache
              uses: actions/cache@v4
              with:
                  path: .turbo
                  key: ${{ runner.os }}-turbo-${{ github.ref_name}}
                  restore-keys: |
                      ${{ runner.os }}-turbo-main

            - name: Install node dependencies
              run: yarn install --immutable

            - name: Print versions
              run: ./river/scripts/print-versions.sh

            # Start an ssh session with tmate if the PR has the 'ssh' label
            - name: Setup tmate session
              uses: mxschmitt/action-tmate@v3
              if: contains(github.event.pull_request.labels.*.name, 'ssh')

            - name: Start and configure blockchains
              run: ./river/scripts/bc-all-start.sh

            - name: Syncpack
              run: yarn syncpack:check

            - name: Build
              run: yarn build

            - name: Prettier
              run: yarn prettier:check

            - name: Lint
              run: yarn lint

            - name: Unit Tests
              run: yarn test:unit

    Multinode_Ent:
        permissions: write-all
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_multinode_ent
        runs-on: ['arc-runners']
        timeout-minutes: 30
        services:
            postgres-core:
                image: postgres:latest
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    # Maps tcp port 5433 on service container to the host
                    - 5433:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                    --name river_postgres_container

        steps:
            - uses: taiki-e/install-action@just

            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.12.1
              with:
                  access_token: ${{ github.token }}

            - name: Install psql
              run: sudo apt update && sudo apt-get install -y postgresql-client

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Increase max_connections in Postgres
              run: |
                  docker exec -i river_postgres_container bash << EOF
                    echo 'max_connections = 1000' >> /var/lib/postgresql/data/postgresql.conf
                    echo 'shared_buffers = 2GB' >> /var/lib/postgresql/data/postgresql.conf
                  EOF
                  docker restart --time 0 river_postgres_container
                  sleep 5

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: 'river/go.work'
                  cache-dependency-path: '**/*.sum'

            - name: Install Foundry
              uses: foundry-rs/foundry-toolchain@v1
              with:
                  version: ${{ env.FOUNDRY_VERSION }}

            - name: Install Make
              run: sudo apt-get update && sudo apt-get -y install make

            - name: Install GCC
              run: sudo apt-get install gcc -y

            - name: Install netcat
              run: sudo apt-get install -y netcat

            - uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Setup yarn
              run: npm install -g yarn

            # TODO: enable after merging the gcp pr
            # - name: Maintain Turbo cache
            #   uses: actions/cache@v4
            #   with:
            #       path: .turbo
            #       key: ${{ runner.os }}-turbo-${{ github.ref_name}}
            #       restore-keys: |
            #           ${{ runner.os }}-turbo-main

            - name: Install node dependencies
              run: yarn install --immutable

            - name: Print versions
              run: ./river/scripts/print-versions.sh

            # Start an ssh session with tmate if the PR has the 'ssh' label
            - name: Setup tmate session
              uses: mxschmitt/action-tmate@v3
              if: contains(github.event.pull_request.labels.*.name, 'ssh')

            - name: Start and configure blockchains
              run: ./river/scripts/bc-all-start.sh

            - name: Print Yarn package versions
              run: yarn info --name-only --all

            - name: create db
              run: psql -h localhost -p 5433 -U postgres -f scripts/sql/create_db.sql
              working-directory: river/core
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Setup River CA for testing certificates
              run: ./scripts/register-ca.sh
              working-directory: river/core

            - name: Set up Custom CA Certificate for Node.js
              run: |
                  echo "NODE_EXTRA_CA_CERTS=$HOME/river-ca-cert.pem" >> $GITHUB_ENV

            - name: Run multiple nodes
              run: just RUN_ENV=multi config-and-start
              working-directory: river/core

            - name: Build & Test (with entitlements)
              run: yarn csb:turbo-no-sdk

            - name: Archive River Node Logs and Settings
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: 'river-node-${{ github.job }}'
                  path: |
                      ./river/core/run_files/
                      !./river/core/run_files/**/bin/**

    Multinode_Ent_Legacy:
        permissions: write-all
        if: github.event_name != 'workflow_dispatch' || !inputs.skip_multinode_ent_legacy
        runs-on: ['arc-runners']
        timeout-minutes: 30
        services:
            postgres-core:
                image: postgres:latest
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    # Maps tcp port 5433 on service container to the host
                    - 5433:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                    --name river_postgres_container

        steps:
            - uses: taiki-e/install-action@just

            - name: Cancel previous runs
              if: github.event_name != 'schedule'
              uses: styfle/cancel-workflow-action@0.12.1
              with:
                  access_token: ${{ github.token }}

            - name: Install psql
              run: sudo apt update && sudo apt-get install -y postgresql-client

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Increase max_connections in Postgres
              run: |
                  docker exec -i river_postgres_container bash << EOF
                    echo 'max_connections = 1000' >> /var/lib/postgresql/data/postgresql.conf
                    echo 'shared_buffers = 2GB' >> /var/lib/postgresql/data/postgresql.conf
                  EOF
                  docker restart --time 0 river_postgres_container
                  sleep 5

            - name: Show PostgreSQL max_connections
              run: psql -h localhost -p 5433 -U postgres -c 'SHOW max_connections;'
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: 'river/go.work'
                  cache-dependency-path: '**/*.sum'

            - name: Install Foundry
              uses: foundry-rs/foundry-toolchain@v1
              with:
                  version: ${{ env.FOUNDRY_VERSION }}

            - name: Install Make
              run: sudo apt-get update && sudo apt-get -y install make

            - name: Install GCC
              run: sudo apt-get install gcc -y

            - name: Install netcat
              run: sudo apt-get install -y netcat

            - uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Setup yarn
              run: npm install -g yarn

            - name: Install node dependencies
              run: yarn install --immutable

            # TODO: enable after merging the gcp pr
            # - name: Maintain Turbo cache
            #   uses: actions/cache@v4
            #   with:
            #       path: .turbo
            #       key: ${{ runner.os }}-turbo-${{ github.ref_name}}
            #       restore-keys: |
            #           ${{ runner.os }}-turbo-main

            - name: Print versions
              run: ./river/scripts/print-versions.sh

            # Start an ssh session with tmate if the PR has the 'ssh' label
            - name: Setup tmate session
              uses: mxschmitt/action-tmate@v3
              if: contains(github.event.pull_request.labels.*.name, 'ssh')

            - name: Start and configure blockchains
              run: ./river/scripts/bc-all-start.sh

            - name: Print Yarn package versions
              run: yarn info --name-only --all

            - name: create db
              run: psql -h localhost -p 5433 -U postgres -f scripts/sql/create_db.sql
              working-directory: river/core
              env:
                  POSTGRES_PASSWORD: postgres
                  PGPASSWORD: postgres

            - name: Setup River CA for testing certificates
              run: ./scripts/register-ca.sh
              working-directory: river/core

            - name: Set up Custom CA Certificate for Node.js
              run: |
                  echo "NODE_EXTRA_CA_CERTS=$HOME/river-ca-cert.pem" >> $GITHUB_ENV

            - name: Run multiple nodes
              run: just RUN_ENV=multi config-and-start
              working-directory: river/core

            - name: Build & Test With Legacy Spaces (with entitlements)
              run: yarn csb:turbo-no-sdk:legacy

            - name: Archive River Node Logs and Settings
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: 'river-node-${{ github.job }}'
                  path: |
                      ./river/core/run_files/
                      !./river/core/run_files/**/bin/**

    Slack_Notification:
        # NOTE: We should make sure that new jobs get added here
        needs: [Common_CI, Multinode_Ent, Multinode_Ent_Legacy]
        if: failure()
        runs-on: ubuntu-latest
        steps:
            - name: Slack notification
              if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_CI_CHANNEL_WEBHOOK_URL }}
                  SLACK_TITLE: 'Failure'
                  SLACK_USERNAME: 'CI'
                  SLACK_ICON_EMOJI: ':boom:'
                  SLACK_COLOR: '#FF0000'
                  SLACK_MESSAGE: 'CI Failure on ${{ github.repository }} ${{ vars.HARMONY_CI_ALERTS_SLACK_GROUP_ID }}'
                  SLACK_LINK_NAMES: true
