# Based on https://github.com/docker/build-push-action

name: 'River_node_docker'

on:
    # push:
    #     branches:
    #         - main
    #     paths:
    #         - 'river/core/node/**'

    workflow_dispatch: # A build was manually requested
        inputs:
            environment_name:
                description: 'Environment Name'
                type: string
                default: 'gamma'
            docker_image_tag:
                description: 'Docker image tag'
                required: true
                default: 'latest'
            node_numbers:
                description: 'JSON array of node numbers to deploy to'
                type: string
                default: '[-1]'

    workflow_call:
        secrets:
            AWS_ACCESS_KEY_ID:
                description: 'AWS access key id'
                required: true
            AWS_SECRET_ACCESS_KEY:
                description: 'AWS secret access key'
                required: true
            SLACK_WEBHOOK_URL: { required: true }
        inputs:
            environment_name:
                description: 'Environment Name'
                type: string
                required: true
            docker_image_tag:
                description: 'Docker image tag'
                type: string
                required: true
            node_numbers:
                description: 'JSON array of node numbers to deploy to'
                type: string
                default: '[-1]'

env:
    DOCKER_NAMESPACE: herenotthere
    GHCR_NAMESPACE: herenotthere
    PLATFORMS: linux/amd64,linux/arm64
    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || secrets.SLACK_CD_WORKFLOW_WEBHOOK_URL }}

jobs:
    build:
        name: Build docker image

        runs-on: ubuntu-latest-8-cores

        permissions:
            contents: write
            packages: write

        outputs:
            environment_name: ${{ steps.compute_env_name_and_latest_tag.outputs.environment_name }}
            latest_tag_name: ${{ steps.compute_env_name_and_latest_tag.outputs.latest_tag_name }}
            release_version: ${{ steps.set_release_version.outputs.release_version }}
            node_numbers: ${{ steps.compute_env_name_and_latest_tag.outputs.node_numbers }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Put abbreviated commit hash to release version
              id: set_release_version
              run: |
                  COMMIT_HASH=$(git log -1 --pretty=%h)
                  echo "::set-output name=release_version::${COMMIT_HASH}"

            - name: Compute the environment name and latest tag
              id: compute_env_name_and_latest_tag
              env:
                  IS_PUSH: ${{ github.event_name == 'push' }}
                  IS_INPUT_DRIVEN: ${{ inputs.environment_name != '' }}
              run: |
                  if [ "${{ env.IS_PUSH }}" == "true" ]; then
                      echo "::set-output name=environment_name::gamma"
                      echo "::set-output name=latest_tag_name::latest"
                      echo "::set-output name=node_numbers::[1,2,3,4,5,6,7,8,9,10,11]"
                  elif [ "${{ env.IS_INPUT_DRIVEN }}" == "true" ]; then
                      echo "::set-output name=environment_name::${{ inputs.environment_name }}"
                      echo "::set-output name=latest_tag_name::${{ inputs.docker_image_tag }}"
                      echo "::set-output name=node_numbers::${{ inputs.node_numbers }}"
                  else
                      echo "::error::Unhandled event type"
                      exit 1
                  fi

            - name: Setup AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-aws-ecr
              uses: aws-actions/amazon-ecr-login@v2
              with:
                  registry-type: 'public'

            - name: Build and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
                  #This can be custom alias once requested to aws and approved for public repo
                  REGISTRY_ALIAS: l8h0l2e6
                  ECR_REPOSITORY: river-node
                  LATEST_TAG: ${{ steps.compute_env_name_and_latest_tag.outputs.latest_tag_name }}
                  RELEASE_VERSION: ${{ steps.set_release_version.outputs.release_version }}
              working-directory: ./river/core
              run: |
                  docker build --build-arg GIT_SHA=${{ github.sha }} --build-arg RELEASE_VERSION=$RELEASE_VERSION -t $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$LATEST_TAG .
                  docker tag $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$LATEST_TAG $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$RELEASE_VERSION
                  docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$LATEST_TAG
                  docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$RELEASE_VERSION

            # If action failed, we send a slack notification
            - name: Slack notification
              if: failure()
              uses: slackapi/slack-github-action@v1.24.0
              with:
                  payload: |
                      {
                          "step": "Build River Docker Image",
                          "environment": "N/",
                          "branch": "${{ github.ref }}",
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                          "commit": "${{ github.sha }}",
                          "actor": "${{ github.actor }}"
                      }
                  # env: # Computed via the root env block
