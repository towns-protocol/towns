# Based on https://github.com/docker/build-push-action

name: 'River_node_docker'

on:
    push:
        branches:
            - main
        paths:
            - 'casablanca/node/**'

    workflow_dispatch: # A build was manually requested
        inputs:
            environment_name:
                description: 'Environment Name'
                type: string
                default: 'test-beta'
            docker_image_tag:
                description: 'Docker image tag'
                required: true
                default: 'latest'
            auto_deploy:
                description: 'Auto deploy to AWS'
                required: true
                default: 'true'

    workflow_call:
        secrets:
            AWS_ACCESS_KEY_ID:
                description: 'AWS access key id'
                required: true
            AWS_SECRET_ACCESS_KEY:
                description: 'AWS secret access key'
                required: true
            DOCKER_HUB_USERNAME: { required: true }
            DOCKER_HUB_TOKEN: { required: true }
            SLACK_WEBHOOK_URL: { required: true }
        inputs:
            environment_name:
                description: 'Environment Name'
                type: string
                required: true
            docker_image_tag:
                description: 'Docker image tag'
                type: string
                required: true
            auto_deploy:
                description: 'Auto deploy to AWS'
                type: boolean
                required: true

env:
    DOCKER_NAMESPACE: herenotthere
    GHCR_NAMESPACE: herenotthere
    PLATFORMS: linux/amd64,linux/arm64
    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || secrets.SLACK_CD_WORKFLOW_WEBHOOK_URL }}

jobs:
    build:
        name: Build docker image

        runs-on: ubuntu-latest-8-cores

        permissions:
            contents: write
            packages: write

        outputs:
            environment_name: ${{ steps.compute_env_name_and_latest_tag.outputs.environment_name }}
            latest_tag_name: ${{ steps.compute_env_name_and_latest_tag.outputs.latest_tag_name }}
            release_version: ${{ steps.set_release_version.outputs.release_version }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Put abbreviated commit hash to release version
              id: set_release_version
              run: |
                  COMMIT_HASH=$(git log -1 --pretty=%h)
                  echo "::set-output name=release_version::${COMMIT_HASH}"

            - name: Compute the environment name and latest tag
              id: compute_env_name_and_latest_tag
              env:
                  IS_PUSH: ${{ github.event_name == 'push' }}
                  IS_INPUT_DRIVEN: ${{ inputs.environment_name != '' }}
              run: |
                  if [ "${{ env.IS_PUSH }}" == "true" ]; then
                      echo "::set-output name=environment_name::test-beta"
                      echo "::set-output name=latest_tag_name::latest"
                  elif [ "${{ env.IS_INPUT_DRIVEN }}" == "true" ]; then
                      echo "::set-output name=environment_name::${{ inputs.environment_name }}"
                      echo "::set-output name=latest_tag_name::${{ inputs.docker_image_tag }}"
                  else
                      echo "::error::Unhandled event type"
                      exit 1
                  fi

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            - name: Build River Node
              id: build_river_node
              uses: docker/build-push-action@v4
              with:
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  context: ./casablanca/node
                  file: ./casablanca/node/Dockerfile
                  platforms: ${{ env.PLATFORMS }}
                  push: true
                  build-args: |
                      GIT_SHA=${{ github.sha }}
                      RELEASE_VERSION=${{ steps.set_release_version.outputs.release_version }}
                  tags: |
                      ${{ env.DOCKER_NAMESPACE }}/river-node:${{ steps.compute_env_name_and_latest_tag.outputs.latest_tag_name }}
                      ${{ env.DOCKER_NAMESPACE }}/river-node:${{ steps.set_release_version.outputs.release_version }}

            # If action failed, we send a slack notification
            - name: Slack notification
              if: failure()
              uses: slackapi/slack-github-action@v1.24.0
              with:
                  payload: |
                      {
                          "step": "Build River Docker Image",
                          "environment": "N/",
                          "branch": "${{ github.ref }}",
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                          "commit": "${{ github.sha }}",
                          "actor": "${{ github.actor }}"
                      }
                  # env: # Computed via the root env block

    deploy:
        # if this is a push to main, we deploy to AWS. otherwise we check if the user wants to deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' || inputs.auto_deploy == 'true'
        uses: './.github/workflows/River_deploy.yml'
        needs: build
        permissions:
            contents: write
            packages: write
        secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || secrets.SLACK_CD_WORKFLOW_WEBHOOK_URL }}
        with:
            environment_name: ${{ needs.build.outputs.environment_name }}
            docker_image_tag: ${{ needs.build.outputs.release_version }}
            node_number: 1