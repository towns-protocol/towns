# Multi-architecture Docker build using native runners in parallel

name: 'Build Towns Anvil Docker Image'

on:
    push:
        branches:
            - main
        paths:
            - '.github/workflows/Towns_anvil_docker.yml'
            - '.github/workflows/_build-docker-arch.yml'
            - 'packages/anvil-docker/**'
            - 'packages/contracts/scripts/**'
            - 'packages/contracts/src/**'
            - 'scripts/deploy*contracts.sh'
            - 'scripts/start-local-basechain.sh'
            - 'scripts/start-local-riverchain.sh'
            - 'core/justfile'

    workflow_dispatch: # A build was manually requested

env:
    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || secrets.SLACK_CD_WORKFLOW_WEBHOOK_URL }}

jobs:
    # Generate BUILD_HASH for Towns Anvil
    generate-tags:
        name: Generate build hash
        runs-on: ubuntu-latest
        permissions:
            contents: read
        outputs:
            build_hash: ${{ steps.generate-tags.outputs.BUILD_HASH }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - uses: taiki-e/install-action@just

            - name: Generate build hash for Towns Anvil
              id: generate-tags
              run: |
                  # Compute the hash of all files that affect the Docker build
                  cd core
                  BUILD_HASH=$(just _get-docker-build-hash)
                  cd ..

                  echo "Build hash: $BUILD_HASH"
                  echo "BUILD_HASH=$BUILD_HASH" >> $GITHUB_OUTPUT

    # Build AMD64 image on native runner
    build-amd64:
        name: Build AMD64 image
        needs: generate-tags
        uses: ./.github/workflows/_build-docker-arch.yml
        with:
            architecture: amd64
            platform: linux/amd64
            runner: ubuntu-latest
            ecr_registry_alias: h5v6m2x1
            ecr_repository: towns-anvil
            dockerfile: ./packages/anvil-docker/Dockerfile
            cache_scope_prefix: towns-anvil
            append_arch_suffix: true
            extra_tags: ${{ needs.generate-tags.outputs.build_hash }}
        secrets: inherit

    # Build ARM64 image on native runner
    build-arm64:
        name: Build ARM64 image
        needs: generate-tags
        uses: ./.github/workflows/_build-docker-arch.yml
        with:
            architecture: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
            ecr_registry_alias: h5v6m2x1
            ecr_repository: towns-anvil
            dockerfile: ./packages/anvil-docker/Dockerfile
            cache_scope_prefix: towns-anvil
            append_arch_suffix: true
            extra_tags: ${{ needs.generate-tags.outputs.build_hash }}
        secrets: inherit

    # Merge architecture-specific images into multi-arch manifest
    merge-manifest:
        needs: [generate-tags, build-amd64, build-arm64]
        uses: ./.github/workflows/_create-docker-manifest.yml
        with:
            ecr_registry_alias: h5v6m2x1
            ecr_repository: towns-anvil
            amd64_tags: ${{ needs.build-amd64.outputs.arch_tags }}
            arm64_tags: ${{ needs.build-arm64.outputs.arch_tags }}
            validation_tag: ${{ needs.generate-tags.outputs.build_hash }}
        secrets: inherit

    # Slack notification on failure
    notify-failure:
        name: Notify on failure
        if: failure()
        needs: [generate-tags, build-amd64, build-arm64, merge-manifest]
        runs-on: ubuntu-latest
        steps:
            - name: Slack notification
              uses: slackapi/slack-github-action@v1.24.0
              with:
                  payload: |
                      {
                          "step": "Build Towns Anvil Docker Image (Multi-arch)",
                          "environment": "N/A",
                          "branch": "${{ github.ref }}",
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                          "commit": "${{ github.sha }}",
                          "actor": "${{ github.actor }}"
                      }
