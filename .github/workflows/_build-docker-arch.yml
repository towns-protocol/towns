# Reusable workflow for building single-architecture Docker images
name: 'Build Docker Image for Specific Architecture'

on:
    workflow_call:
        inputs:
            architecture:
                description: 'Target architecture (amd64, arm64)'
                required: true
                type: string
            platform:
                description: 'Docker platform (linux/amd64, linux/arm64)'
                required: true
                type: string
            runner:
                description: 'GitHub runner type'
                required: true
                type: string
            ecr_registry_alias:
                description: 'ECR registry alias'
                required: true
                type: string
            ecr_repository:
                description: 'ECR repository name'
                required: true
                type: string
            dockerfile:
                description: 'Path to Dockerfile'
                required: true
                type: string
            context:
                description: 'Docker build context path'
                required: false
                type: string
                default: '.'
            cache_scope_prefix:
                description: 'Cache scope prefix to avoid conflicts'
                required: false
                type: string
                default: 'default'
            build_args:
                description: 'Docker build arguments (key=value, one per line)'
                required: false
                type: string
            tag_latest_on_main:
                description: 'Whether to tag as latest on main push'
                required: false
                type: boolean
                default: true
            extra_tags:
                description: 'Additional tags beyond commit hash (comma-separated)'
                required: false
                type: string
            append_arch_suffix:
                description: 'Whether to append architecture suffix to tags'
                required: false
                type: boolean
                default: false
        outputs:
            image_digest:
                description: 'Digest of the built image'
                value: ${{ jobs.build.outputs.digest }}
            arch_tags:
                description: 'Final tags used for the image'
                value: ${{ jobs.build.outputs.arch_tags }}

jobs:
    build:
        name: Build ${{ inputs.architecture }} image
        runs-on: ${{ inputs.runner }}

        permissions:
            contents: write

        outputs:
            digest: ${{ steps.build-push.outputs.digest }}
            arch_tags: ${{ steps.generate-tags.outputs.arch_tags }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
              with:
                  registry-type: 'public'

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Generate tags
              id: generate-tags
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                  echo "Generating tags from ECR inputs"
                  COMMIT_HASH=$(git rev-parse --short HEAD)
                  BRANCH="${{ github.ref_name }}"

                  # Start with commit hash
                  TAGS=($COMMIT_HASH)

                  # Add latest tag if on main push and enabled
                  if [ "${{ inputs.tag_latest_on_main }}" == "true" ] && [ "$BRANCH" == "main" ] && [ "${{ github.event_name }}" == "push" ]; then
                    TAGS+=(latest)
                  fi

                  # Add extra tags if provided
                  if [ -n "${{ inputs.extra_tags }}" ]; then
                    IFS=',' read -ra EXTRA_TAGS_ARRAY <<< "${{ inputs.extra_tags }}"
                    for extra_tag in "${EXTRA_TAGS_ARRAY[@]}"; do
                      # Trim whitespace
                      extra_tag=$(echo "$extra_tag" | xargs)
                      if [ -n "$extra_tag" ]; then
                        TAGS+=($extra_tag)
                      fi
                    done
                  fi

                  echo "Building image with base tags: ${TAGS[@]}"
                  echo "Commit hash: $COMMIT_HASH"
                  echo "Branch: $BRANCH"

                  # Generate final tags with ECR paths
                  FINAL_TAGS=""

                  for tag in "${TAGS[@]}"; do
                    # Create base ECR tag
                    ECR_TAG="$ECR_REGISTRY/${{ inputs.ecr_registry_alias }}/${{ inputs.ecr_repository }}:$tag"

                    # Append architecture suffix if needed
                    if [ "${{ inputs.append_arch_suffix }}" == "true" ]; then
                      ECR_TAG="$ECR_TAG-${{ inputs.architecture }}"
                    fi

                    # Add to final tags
                    if [ -n "$FINAL_TAGS" ]; then
                      FINAL_TAGS="$FINAL_TAGS,$ECR_TAG"
                    else
                      FINAL_TAGS="$ECR_TAG"
                    fi
                  done

                  echo "Final tags for build: $FINAL_TAGS"
                  echo "arch_tags=$FINAL_TAGS" >> $GITHUB_OUTPUT

            - name: Build and push ${{ inputs.architecture }} image
              id: build-push
              uses: docker/build-push-action@v6
              with:
                  context: ${{ inputs.context }}
                  file: ${{ inputs.dockerfile }}
                  platforms: ${{ inputs.platform }}
                  push: true
                  tags: ${{ steps.generate-tags.outputs.arch_tags }}
                  build-args: ${{ inputs.build_args }}
                  labels: |
                      org.opencontainers.image.source=https://github.com/${{ github.repository }}
                      org.opencontainers.image.revision=${{ github.sha }}
                      org.opencontainers.image.created=${{ github.run_started_at }}
                      org.opencontainers.image.architecture=${{ inputs.architecture }}
                  cache-from: type=gha,scope=${{ inputs.cache_scope_prefix }}-${{ inputs.architecture }}
                  cache-to: type=gha,mode=max,scope=${{ inputs.cache_scope_prefix }}-${{ inputs.architecture }}
                  provenance: false

            - name: Output image info
              run: |
                  echo "Built ${{ inputs.architecture }} image with digest: ${{ steps.build-push.outputs.digest }}"
                  echo "Tags: ${{ steps.generate-tags.outputs.arch_tags }}"
