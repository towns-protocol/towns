// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol.proto

package protocolconnect

import (
	protocol "casablanca/node/protocol"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StreamServiceName is the fully-qualified name of the StreamService service.
	StreamServiceName = "river.StreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StreamServiceCreateStreamProcedure is the fully-qualified name of the StreamService's
	// CreateStream RPC.
	StreamServiceCreateStreamProcedure = "/river.StreamService/CreateStream"
	// StreamServiceGetStreamProcedure is the fully-qualified name of the StreamService's GetStream RPC.
	StreamServiceGetStreamProcedure = "/river.StreamService/GetStream"
	// StreamServiceGetMiniblocksProcedure is the fully-qualified name of the StreamService's
	// GetMiniblocks RPC.
	StreamServiceGetMiniblocksProcedure = "/river.StreamService/GetMiniblocks"
	// StreamServiceGetLastMiniblockHashProcedure is the fully-qualified name of the StreamService's
	// GetLastMiniblockHash RPC.
	StreamServiceGetLastMiniblockHashProcedure = "/river.StreamService/GetLastMiniblockHash"
	// StreamServiceAddEventProcedure is the fully-qualified name of the StreamService's AddEvent RPC.
	StreamServiceAddEventProcedure = "/river.StreamService/AddEvent"
	// StreamServiceSyncStreamsProcedure is the fully-qualified name of the StreamService's SyncStreams
	// RPC.
	StreamServiceSyncStreamsProcedure = "/river.StreamService/SyncStreams"
	// StreamServiceAddStreamToSyncProcedure is the fully-qualified name of the StreamService's
	// AddStreamToSync RPC.
	StreamServiceAddStreamToSyncProcedure = "/river.StreamService/AddStreamToSync"
	// StreamServiceRemoveStreamFromSyncProcedure is the fully-qualified name of the StreamService's
	// RemoveStreamFromSync RPC.
	StreamServiceRemoveStreamFromSyncProcedure = "/river.StreamService/RemoveStreamFromSync"
	// StreamServiceRemoveSyncProcedure is the fully-qualified name of the StreamService's RemoveSync
	// RPC.
	StreamServiceRemoveSyncProcedure = "/river.StreamService/RemoveSync"
	// StreamServiceInfoProcedure is the fully-qualified name of the StreamService's Info RPC.
	StreamServiceInfoProcedure = "/river.StreamService/Info"
)

// StreamServiceClient is a client for the river.StreamService service.
type StreamServiceClient interface {
	CreateStream(context.Context, *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error)
	GetStream(context.Context, *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error)
	GetMiniblocks(context.Context, *connect_go.Request[protocol.GetMiniblocksRequest]) (*connect_go.Response[protocol.GetMiniblocksResponse], error)
	GetLastMiniblockHash(context.Context, *connect_go.Request[protocol.GetLastMiniblockHashRequest]) (*connect_go.Response[protocol.GetLastMiniblockHashResponse], error)
	AddEvent(context.Context, *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error)
	SyncStreams(context.Context, *connect_go.Request[protocol.SyncStreamsRequest]) (*connect_go.ServerStreamForClient[protocol.SyncStreamsResponse], error)
	AddStreamToSync(context.Context, *connect_go.Request[protocol.AddStreamToSyncRequest]) (*connect_go.Response[protocol.AddStreamToSyncResponse], error)
	RemoveStreamFromSync(context.Context, *connect_go.Request[protocol.RemoveStreamFromSyncRequest]) (*connect_go.Response[protocol.RemoveStreamFromSyncResponse], error)
	RemoveSync(context.Context, *connect_go.Request[protocol.RemoveSyncRequest]) (*connect_go.Response[protocol.RemoveSyncResponse], error)
	Info(context.Context, *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error)
}

// NewStreamServiceClient constructs a client for the river.StreamService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamServiceClient{
		createStream: connect_go.NewClient[protocol.CreateStreamRequest, protocol.CreateStreamResponse](
			httpClient,
			baseURL+StreamServiceCreateStreamProcedure,
			opts...,
		),
		getStream: connect_go.NewClient[protocol.GetStreamRequest, protocol.GetStreamResponse](
			httpClient,
			baseURL+StreamServiceGetStreamProcedure,
			opts...,
		),
		getMiniblocks: connect_go.NewClient[protocol.GetMiniblocksRequest, protocol.GetMiniblocksResponse](
			httpClient,
			baseURL+StreamServiceGetMiniblocksProcedure,
			opts...,
		),
		getLastMiniblockHash: connect_go.NewClient[protocol.GetLastMiniblockHashRequest, protocol.GetLastMiniblockHashResponse](
			httpClient,
			baseURL+StreamServiceGetLastMiniblockHashProcedure,
			opts...,
		),
		addEvent: connect_go.NewClient[protocol.AddEventRequest, protocol.AddEventResponse](
			httpClient,
			baseURL+StreamServiceAddEventProcedure,
			opts...,
		),
		syncStreams: connect_go.NewClient[protocol.SyncStreamsRequest, protocol.SyncStreamsResponse](
			httpClient,
			baseURL+StreamServiceSyncStreamsProcedure,
			opts...,
		),
		addStreamToSync: connect_go.NewClient[protocol.AddStreamToSyncRequest, protocol.AddStreamToSyncResponse](
			httpClient,
			baseURL+StreamServiceAddStreamToSyncProcedure,
			opts...,
		),
		removeStreamFromSync: connect_go.NewClient[protocol.RemoveStreamFromSyncRequest, protocol.RemoveStreamFromSyncResponse](
			httpClient,
			baseURL+StreamServiceRemoveStreamFromSyncProcedure,
			opts...,
		),
		removeSync: connect_go.NewClient[protocol.RemoveSyncRequest, protocol.RemoveSyncResponse](
			httpClient,
			baseURL+StreamServiceRemoveSyncProcedure,
			opts...,
		),
		info: connect_go.NewClient[protocol.InfoRequest, protocol.InfoResponse](
			httpClient,
			baseURL+StreamServiceInfoProcedure,
			opts...,
		),
	}
}

// streamServiceClient implements StreamServiceClient.
type streamServiceClient struct {
	createStream         *connect_go.Client[protocol.CreateStreamRequest, protocol.CreateStreamResponse]
	getStream            *connect_go.Client[protocol.GetStreamRequest, protocol.GetStreamResponse]
	getMiniblocks        *connect_go.Client[protocol.GetMiniblocksRequest, protocol.GetMiniblocksResponse]
	getLastMiniblockHash *connect_go.Client[protocol.GetLastMiniblockHashRequest, protocol.GetLastMiniblockHashResponse]
	addEvent             *connect_go.Client[protocol.AddEventRequest, protocol.AddEventResponse]
	syncStreams          *connect_go.Client[protocol.SyncStreamsRequest, protocol.SyncStreamsResponse]
	addStreamToSync      *connect_go.Client[protocol.AddStreamToSyncRequest, protocol.AddStreamToSyncResponse]
	removeStreamFromSync *connect_go.Client[protocol.RemoveStreamFromSyncRequest, protocol.RemoveStreamFromSyncResponse]
	removeSync           *connect_go.Client[protocol.RemoveSyncRequest, protocol.RemoveSyncResponse]
	info                 *connect_go.Client[protocol.InfoRequest, protocol.InfoResponse]
}

// CreateStream calls river.StreamService.CreateStream.
func (c *streamServiceClient) CreateStream(ctx context.Context, req *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error) {
	return c.createStream.CallUnary(ctx, req)
}

// GetStream calls river.StreamService.GetStream.
func (c *streamServiceClient) GetStream(ctx context.Context, req *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error) {
	return c.getStream.CallUnary(ctx, req)
}

// GetMiniblocks calls river.StreamService.GetMiniblocks.
func (c *streamServiceClient) GetMiniblocks(ctx context.Context, req *connect_go.Request[protocol.GetMiniblocksRequest]) (*connect_go.Response[protocol.GetMiniblocksResponse], error) {
	return c.getMiniblocks.CallUnary(ctx, req)
}

// GetLastMiniblockHash calls river.StreamService.GetLastMiniblockHash.
func (c *streamServiceClient) GetLastMiniblockHash(ctx context.Context, req *connect_go.Request[protocol.GetLastMiniblockHashRequest]) (*connect_go.Response[protocol.GetLastMiniblockHashResponse], error) {
	return c.getLastMiniblockHash.CallUnary(ctx, req)
}

// AddEvent calls river.StreamService.AddEvent.
func (c *streamServiceClient) AddEvent(ctx context.Context, req *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error) {
	return c.addEvent.CallUnary(ctx, req)
}

// SyncStreams calls river.StreamService.SyncStreams.
func (c *streamServiceClient) SyncStreams(ctx context.Context, req *connect_go.Request[protocol.SyncStreamsRequest]) (*connect_go.ServerStreamForClient[protocol.SyncStreamsResponse], error) {
	return c.syncStreams.CallServerStream(ctx, req)
}

// AddStreamToSync calls river.StreamService.AddStreamToSync.
func (c *streamServiceClient) AddStreamToSync(ctx context.Context, req *connect_go.Request[protocol.AddStreamToSyncRequest]) (*connect_go.Response[protocol.AddStreamToSyncResponse], error) {
	return c.addStreamToSync.CallUnary(ctx, req)
}

// RemoveStreamFromSync calls river.StreamService.RemoveStreamFromSync.
func (c *streamServiceClient) RemoveStreamFromSync(ctx context.Context, req *connect_go.Request[protocol.RemoveStreamFromSyncRequest]) (*connect_go.Response[protocol.RemoveStreamFromSyncResponse], error) {
	return c.removeStreamFromSync.CallUnary(ctx, req)
}

// RemoveSync calls river.StreamService.RemoveSync.
func (c *streamServiceClient) RemoveSync(ctx context.Context, req *connect_go.Request[protocol.RemoveSyncRequest]) (*connect_go.Response[protocol.RemoveSyncResponse], error) {
	return c.removeSync.CallUnary(ctx, req)
}

// Info calls river.StreamService.Info.
func (c *streamServiceClient) Info(ctx context.Context, req *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// StreamServiceHandler is an implementation of the river.StreamService service.
type StreamServiceHandler interface {
	CreateStream(context.Context, *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error)
	GetStream(context.Context, *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error)
	GetMiniblocks(context.Context, *connect_go.Request[protocol.GetMiniblocksRequest]) (*connect_go.Response[protocol.GetMiniblocksResponse], error)
	GetLastMiniblockHash(context.Context, *connect_go.Request[protocol.GetLastMiniblockHashRequest]) (*connect_go.Response[protocol.GetLastMiniblockHashResponse], error)
	AddEvent(context.Context, *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error)
	SyncStreams(context.Context, *connect_go.Request[protocol.SyncStreamsRequest], *connect_go.ServerStream[protocol.SyncStreamsResponse]) error
	AddStreamToSync(context.Context, *connect_go.Request[protocol.AddStreamToSyncRequest]) (*connect_go.Response[protocol.AddStreamToSyncResponse], error)
	RemoveStreamFromSync(context.Context, *connect_go.Request[protocol.RemoveStreamFromSyncRequest]) (*connect_go.Response[protocol.RemoveStreamFromSyncResponse], error)
	RemoveSync(context.Context, *connect_go.Request[protocol.RemoveSyncRequest]) (*connect_go.Response[protocol.RemoveSyncResponse], error)
	Info(context.Context, *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error)
}

// NewStreamServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamServiceHandler(svc StreamServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	streamServiceCreateStreamHandler := connect_go.NewUnaryHandler(
		StreamServiceCreateStreamProcedure,
		svc.CreateStream,
		opts...,
	)
	streamServiceGetStreamHandler := connect_go.NewUnaryHandler(
		StreamServiceGetStreamProcedure,
		svc.GetStream,
		opts...,
	)
	streamServiceGetMiniblocksHandler := connect_go.NewUnaryHandler(
		StreamServiceGetMiniblocksProcedure,
		svc.GetMiniblocks,
		opts...,
	)
	streamServiceGetLastMiniblockHashHandler := connect_go.NewUnaryHandler(
		StreamServiceGetLastMiniblockHashProcedure,
		svc.GetLastMiniblockHash,
		opts...,
	)
	streamServiceAddEventHandler := connect_go.NewUnaryHandler(
		StreamServiceAddEventProcedure,
		svc.AddEvent,
		opts...,
	)
	streamServiceSyncStreamsHandler := connect_go.NewServerStreamHandler(
		StreamServiceSyncStreamsProcedure,
		svc.SyncStreams,
		opts...,
	)
	streamServiceAddStreamToSyncHandler := connect_go.NewUnaryHandler(
		StreamServiceAddStreamToSyncProcedure,
		svc.AddStreamToSync,
		opts...,
	)
	streamServiceRemoveStreamFromSyncHandler := connect_go.NewUnaryHandler(
		StreamServiceRemoveStreamFromSyncProcedure,
		svc.RemoveStreamFromSync,
		opts...,
	)
	streamServiceRemoveSyncHandler := connect_go.NewUnaryHandler(
		StreamServiceRemoveSyncProcedure,
		svc.RemoveSync,
		opts...,
	)
	streamServiceInfoHandler := connect_go.NewUnaryHandler(
		StreamServiceInfoProcedure,
		svc.Info,
		opts...,
	)
	return "/river.StreamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamServiceCreateStreamProcedure:
			streamServiceCreateStreamHandler.ServeHTTP(w, r)
		case StreamServiceGetStreamProcedure:
			streamServiceGetStreamHandler.ServeHTTP(w, r)
		case StreamServiceGetMiniblocksProcedure:
			streamServiceGetMiniblocksHandler.ServeHTTP(w, r)
		case StreamServiceGetLastMiniblockHashProcedure:
			streamServiceGetLastMiniblockHashHandler.ServeHTTP(w, r)
		case StreamServiceAddEventProcedure:
			streamServiceAddEventHandler.ServeHTTP(w, r)
		case StreamServiceSyncStreamsProcedure:
			streamServiceSyncStreamsHandler.ServeHTTP(w, r)
		case StreamServiceAddStreamToSyncProcedure:
			streamServiceAddStreamToSyncHandler.ServeHTTP(w, r)
		case StreamServiceRemoveStreamFromSyncProcedure:
			streamServiceRemoveStreamFromSyncHandler.ServeHTTP(w, r)
		case StreamServiceRemoveSyncProcedure:
			streamServiceRemoveSyncHandler.ServeHTTP(w, r)
		case StreamServiceInfoProcedure:
			streamServiceInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamServiceHandler struct{}

func (UnimplementedStreamServiceHandler) CreateStream(context.Context, *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.CreateStream is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetStream(context.Context, *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.GetStream is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetMiniblocks(context.Context, *connect_go.Request[protocol.GetMiniblocksRequest]) (*connect_go.Response[protocol.GetMiniblocksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.GetMiniblocks is not implemented"))
}

func (UnimplementedStreamServiceHandler) GetLastMiniblockHash(context.Context, *connect_go.Request[protocol.GetLastMiniblockHashRequest]) (*connect_go.Response[protocol.GetLastMiniblockHashResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.GetLastMiniblockHash is not implemented"))
}

func (UnimplementedStreamServiceHandler) AddEvent(context.Context, *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.AddEvent is not implemented"))
}

func (UnimplementedStreamServiceHandler) SyncStreams(context.Context, *connect_go.Request[protocol.SyncStreamsRequest], *connect_go.ServerStream[protocol.SyncStreamsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.SyncStreams is not implemented"))
}

func (UnimplementedStreamServiceHandler) AddStreamToSync(context.Context, *connect_go.Request[protocol.AddStreamToSyncRequest]) (*connect_go.Response[protocol.AddStreamToSyncResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.AddStreamToSync is not implemented"))
}

func (UnimplementedStreamServiceHandler) RemoveStreamFromSync(context.Context, *connect_go.Request[protocol.RemoveStreamFromSyncRequest]) (*connect_go.Response[protocol.RemoveStreamFromSyncResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.RemoveStreamFromSync is not implemented"))
}

func (UnimplementedStreamServiceHandler) RemoveSync(context.Context, *connect_go.Request[protocol.RemoveSyncRequest]) (*connect_go.Response[protocol.RemoveSyncResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.RemoveSync is not implemented"))
}

func (UnimplementedStreamServiceHandler) Info(context.Context, *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("river.StreamService.Info is not implemented"))
}
