// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol.proto

package protocolconnect

import (
	protocol "casablanca/node/protocol"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ZionServiceName is the fully-qualified name of the ZionService service.
	ZionServiceName = "casablanca.ZionService"
)

// ZionServiceClient is a client for the casablanca.ZionService service.
type ZionServiceClient interface {
	CreateStream(context.Context, *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error)
	GetStream(context.Context, *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error)
	AddEvent(context.Context, *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error)
	SyncStreams(context.Context, *connect_go.Request[protocol.SyncStreamsRequest]) (*connect_go.Response[protocol.SyncStreamsResponse], error)
	Info(context.Context, *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error)
}

// NewZionServiceClient constructs a client for the casablanca.ZionService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ZionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &zionServiceClient{
		createStream: connect_go.NewClient[protocol.CreateStreamRequest, protocol.CreateStreamResponse](
			httpClient,
			baseURL+"/casablanca.ZionService/CreateStream",
			opts...,
		),
		getStream: connect_go.NewClient[protocol.GetStreamRequest, protocol.GetStreamResponse](
			httpClient,
			baseURL+"/casablanca.ZionService/GetStream",
			opts...,
		),
		addEvent: connect_go.NewClient[protocol.AddEventRequest, protocol.AddEventResponse](
			httpClient,
			baseURL+"/casablanca.ZionService/AddEvent",
			opts...,
		),
		syncStreams: connect_go.NewClient[protocol.SyncStreamsRequest, protocol.SyncStreamsResponse](
			httpClient,
			baseURL+"/casablanca.ZionService/SyncStreams",
			opts...,
		),
		info: connect_go.NewClient[protocol.InfoRequest, protocol.InfoResponse](
			httpClient,
			baseURL+"/casablanca.ZionService/Info",
			opts...,
		),
	}
}

// zionServiceClient implements ZionServiceClient.
type zionServiceClient struct {
	createStream *connect_go.Client[protocol.CreateStreamRequest, protocol.CreateStreamResponse]
	getStream    *connect_go.Client[protocol.GetStreamRequest, protocol.GetStreamResponse]
	addEvent     *connect_go.Client[protocol.AddEventRequest, protocol.AddEventResponse]
	syncStreams  *connect_go.Client[protocol.SyncStreamsRequest, protocol.SyncStreamsResponse]
	info         *connect_go.Client[protocol.InfoRequest, protocol.InfoResponse]
}

// CreateStream calls casablanca.ZionService.CreateStream.
func (c *zionServiceClient) CreateStream(ctx context.Context, req *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error) {
	return c.createStream.CallUnary(ctx, req)
}

// GetStream calls casablanca.ZionService.GetStream.
func (c *zionServiceClient) GetStream(ctx context.Context, req *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error) {
	return c.getStream.CallUnary(ctx, req)
}

// AddEvent calls casablanca.ZionService.AddEvent.
func (c *zionServiceClient) AddEvent(ctx context.Context, req *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error) {
	return c.addEvent.CallUnary(ctx, req)
}

// SyncStreams calls casablanca.ZionService.SyncStreams.
func (c *zionServiceClient) SyncStreams(ctx context.Context, req *connect_go.Request[protocol.SyncStreamsRequest]) (*connect_go.Response[protocol.SyncStreamsResponse], error) {
	return c.syncStreams.CallUnary(ctx, req)
}

// Info calls casablanca.ZionService.Info.
func (c *zionServiceClient) Info(ctx context.Context, req *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// ZionServiceHandler is an implementation of the casablanca.ZionService service.
type ZionServiceHandler interface {
	CreateStream(context.Context, *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error)
	GetStream(context.Context, *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error)
	AddEvent(context.Context, *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error)
	SyncStreams(context.Context, *connect_go.Request[protocol.SyncStreamsRequest]) (*connect_go.Response[protocol.SyncStreamsResponse], error)
	Info(context.Context, *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error)
}

// NewZionServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZionServiceHandler(svc ZionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/casablanca.ZionService/CreateStream", connect_go.NewUnaryHandler(
		"/casablanca.ZionService/CreateStream",
		svc.CreateStream,
		opts...,
	))
	mux.Handle("/casablanca.ZionService/GetStream", connect_go.NewUnaryHandler(
		"/casablanca.ZionService/GetStream",
		svc.GetStream,
		opts...,
	))
	mux.Handle("/casablanca.ZionService/AddEvent", connect_go.NewUnaryHandler(
		"/casablanca.ZionService/AddEvent",
		svc.AddEvent,
		opts...,
	))
	mux.Handle("/casablanca.ZionService/SyncStreams", connect_go.NewUnaryHandler(
		"/casablanca.ZionService/SyncStreams",
		svc.SyncStreams,
		opts...,
	))
	mux.Handle("/casablanca.ZionService/Info", connect_go.NewUnaryHandler(
		"/casablanca.ZionService/Info",
		svc.Info,
		opts...,
	))
	return "/casablanca.ZionService/", mux
}

// UnimplementedZionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZionServiceHandler struct{}

func (UnimplementedZionServiceHandler) CreateStream(context.Context, *connect_go.Request[protocol.CreateStreamRequest]) (*connect_go.Response[protocol.CreateStreamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("casablanca.ZionService.CreateStream is not implemented"))
}

func (UnimplementedZionServiceHandler) GetStream(context.Context, *connect_go.Request[protocol.GetStreamRequest]) (*connect_go.Response[protocol.GetStreamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("casablanca.ZionService.GetStream is not implemented"))
}

func (UnimplementedZionServiceHandler) AddEvent(context.Context, *connect_go.Request[protocol.AddEventRequest]) (*connect_go.Response[protocol.AddEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("casablanca.ZionService.AddEvent is not implemented"))
}

func (UnimplementedZionServiceHandler) SyncStreams(context.Context, *connect_go.Request[protocol.SyncStreamsRequest]) (*connect_go.Response[protocol.SyncStreamsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("casablanca.ZionService.SyncStreams is not implemented"))
}

func (UnimplementedZionServiceHandler) Info(context.Context, *connect_go.Request[protocol.InfoRequest]) (*connect_go.Response[protocol.InfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("casablanca.ZionService.Info is not implemented"))
}
