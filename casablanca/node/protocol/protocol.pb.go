// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: protocol.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MembershipOp int32

const (
	MembershipOp_SO_UNSPECIFIED MembershipOp = 0
	MembershipOp_SO_INVITE      MembershipOp = 1
	MembershipOp_SO_JOIN        MembershipOp = 2
	MembershipOp_SO_LEAVE       MembershipOp = 3
)

// Enum value maps for MembershipOp.
var (
	MembershipOp_name = map[int32]string{
		0: "SO_UNSPECIFIED",
		1: "SO_INVITE",
		2: "SO_JOIN",
		3: "SO_LEAVE",
	}
	MembershipOp_value = map[string]int32{
		"SO_UNSPECIFIED": 0,
		"SO_INVITE":      1,
		"SO_JOIN":        2,
		"SO_LEAVE":       3,
	}
)

func (x MembershipOp) Enum() *MembershipOp {
	p := new(MembershipOp)
	*p = x
	return p
}

func (x MembershipOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (MembershipOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x MembershipOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipOp.Descriptor instead.
func (MembershipOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

type ChannelOp int32

const (
	ChannelOp_CO_UNSPECIFIED ChannelOp = 0
	ChannelOp_CO_CREATED     ChannelOp = 1
	ChannelOp_CO_DELETED     ChannelOp = 2
)

// Enum value maps for ChannelOp.
var (
	ChannelOp_name = map[int32]string{
		0: "CO_UNSPECIFIED",
		1: "CO_CREATED",
		2: "CO_DELETED",
	}
	ChannelOp_value = map[string]int32{
		"CO_UNSPECIFIED": 0,
		"CO_CREATED":     1,
		"CO_DELETED":     2,
	}
)

func (x ChannelOp) Enum() *ChannelOp {
	p := new(ChannelOp)
	*p = x
	return p
}

func (x ChannelOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[1].Descriptor()
}

func (ChannelOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[1]
}

func (x ChannelOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelOp.Descriptor instead.
func (ChannelOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

type UserSettingOp int32

const (
	UserSettingOp_USO_UNSPECIFIED UserSettingOp = 0
	UserSettingOp_USO_FULLY_READ  UserSettingOp = 1
)

// Enum value maps for UserSettingOp.
var (
	UserSettingOp_name = map[int32]string{
		0: "USO_UNSPECIFIED",
		1: "USO_FULLY_READ",
	}
	UserSettingOp_value = map[string]int32{
		"USO_UNSPECIFIED": 0,
		"USO_FULLY_READ":  1,
	}
)

func (x UserSettingOp) Enum() *UserSettingOp {
	p := new(UserSettingOp)
	*p = x
	return p
}

func (x UserSettingOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettingOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[2].Descriptor()
}

func (UserSettingOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[2]
}

func (x UserSettingOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettingOp.Descriptor instead.
func (UserSettingOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

type ToDeviceOp int32

const (
	ToDeviceOp_TDO_UNSPECIFIED  ToDeviceOp = 0
	ToDeviceOp_TDO_KEY_REQUEST  ToDeviceOp = 1
	ToDeviceOp_TDO_KEY_RESPONSE ToDeviceOp = 2
)

// Enum value maps for ToDeviceOp.
var (
	ToDeviceOp_name = map[int32]string{
		0: "TDO_UNSPECIFIED",
		1: "TDO_KEY_REQUEST",
		2: "TDO_KEY_RESPONSE",
	}
	ToDeviceOp_value = map[string]int32{
		"TDO_UNSPECIFIED":  0,
		"TDO_KEY_REQUEST":  1,
		"TDO_KEY_RESPONSE": 2,
	}
)

func (x ToDeviceOp) Enum() *ToDeviceOp {
	p := new(ToDeviceOp)
	*p = x
	return p
}

func (x ToDeviceOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToDeviceOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[3].Descriptor()
}

func (ToDeviceOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[3]
}

func (x ToDeviceOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToDeviceOp.Descriptor instead.
func (ToDeviceOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

type Err int32

const (
	Err_ERR_UNSPECIFIED            Err = 0
	Err_DEBUG_ERROR                Err = 1
	Err_BAD_STREAM_ID              Err = 2
	Err_BAD_STREAM_CREATION_PARAMS Err = 3
	Err_STREAM_ALREADY_EXISTS      Err = 4
	Err_INTERNAL_ERROR_SWITCH      Err = 5
	Err_BAD_EVENT_ID               Err = 6
	Err_BAD_EVENT_SIGNATURE        Err = 7
	Err_BAD_HASH_FORMAT            Err = 8
	Err_BAD_PREV_EVENTS            Err = 9
	Err_NO_EVENT_SPECIFIED         Err = 10
	Err_BAD_EVENT                  Err = 11
	Err_USER_CANT_POST             Err = 12
	Err_STREAM_NOT_FOUND           Err = 13
	Err_STREAM_BAD_HASHES          Err = 14
	Err_STREAM_EMPTY               Err = 15
	Err_STREAM_BAD_EVENT           Err = 16
	Err_BAD_DELEGATE_SIG           Err = 17
	Err_BAD_PUBLIC_KEY             Err = 18
	Err_BAD_PAYLOAD                Err = 19
	Err_BAD_HEX_STRING             Err = 20
	Err_BAD_EVENT_HASH             Err = 21
	Err_BAD_ARGS                   Err = 22
	Err_BAD_SYNC_COOKIE            Err = 23
	Err_INTERNAL_ERROR             Err = 24
)

// Enum value maps for Err.
var (
	Err_name = map[int32]string{
		0:  "ERR_UNSPECIFIED",
		1:  "DEBUG_ERROR",
		2:  "BAD_STREAM_ID",
		3:  "BAD_STREAM_CREATION_PARAMS",
		4:  "STREAM_ALREADY_EXISTS",
		5:  "INTERNAL_ERROR_SWITCH",
		6:  "BAD_EVENT_ID",
		7:  "BAD_EVENT_SIGNATURE",
		8:  "BAD_HASH_FORMAT",
		9:  "BAD_PREV_EVENTS",
		10: "NO_EVENT_SPECIFIED",
		11: "BAD_EVENT",
		12: "USER_CANT_POST",
		13: "STREAM_NOT_FOUND",
		14: "STREAM_BAD_HASHES",
		15: "STREAM_EMPTY",
		16: "STREAM_BAD_EVENT",
		17: "BAD_DELEGATE_SIG",
		18: "BAD_PUBLIC_KEY",
		19: "BAD_PAYLOAD",
		20: "BAD_HEX_STRING",
		21: "BAD_EVENT_HASH",
		22: "BAD_ARGS",
		23: "BAD_SYNC_COOKIE",
		24: "INTERNAL_ERROR",
	}
	Err_value = map[string]int32{
		"ERR_UNSPECIFIED":            0,
		"DEBUG_ERROR":                1,
		"BAD_STREAM_ID":              2,
		"BAD_STREAM_CREATION_PARAMS": 3,
		"STREAM_ALREADY_EXISTS":      4,
		"INTERNAL_ERROR_SWITCH":      5,
		"BAD_EVENT_ID":               6,
		"BAD_EVENT_SIGNATURE":        7,
		"BAD_HASH_FORMAT":            8,
		"BAD_PREV_EVENTS":            9,
		"NO_EVENT_SPECIFIED":         10,
		"BAD_EVENT":                  11,
		"USER_CANT_POST":             12,
		"STREAM_NOT_FOUND":           13,
		"STREAM_BAD_HASHES":          14,
		"STREAM_EMPTY":               15,
		"STREAM_BAD_EVENT":           16,
		"BAD_DELEGATE_SIG":           17,
		"BAD_PUBLIC_KEY":             18,
		"BAD_PAYLOAD":                19,
		"BAD_HEX_STRING":             20,
		"BAD_EVENT_HASH":             21,
		"BAD_ARGS":                   22,
		"BAD_SYNC_COOKIE":            23,
		"INTERNAL_ERROR":             24,
	}
)

func (x Err) Enum() *Err {
	p := new(Err)
	*p = x
	return p
}

func (x Err) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Err) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[4].Descriptor()
}

func (Err) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[4]
}

func (x Err) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Err.Descriptor instead.
func (Err) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

// *
// Envelope contains serialized event, and its hash and signature.
// hash is used as event id. Subsequent events reference this event by hash.
type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Hash of event.
	// While hash can be recalculated from the event, having it here explicitely
	// makes it easier to work with event.
	// For the event to be valid, must match hash of event field.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// *
	// Signature.
	// For the event to be valid, signature must match event.creator_address
	// or be signed by the address from evant.delegate_sig.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Event     []byte `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Envelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Envelope) GetEvent() []byte {
	if x != nil {
		return x.Event
	}
	return nil
}

type StreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Address of the creator of the event.
	// For user - address of the user's Towns wallet.
	// For server - address of the server's keypair in staking smart contract.
	//
	// For the event to be valid:
	// If delegate_sig is present, creator_address must match delegate_sig.
	// If delegate_sig is not present, creator_address must match event signature in the Envelope.
	CreatorAddress []byte `protobuf:"bytes,1,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	// *
	// delegate_sig allows event to be signed by device keypair
	// which is linked to the user's Towns wallet.
	//
	// delegate_sig constains signature of the public key of the device keypair.
	// User's Towns wallet is used to produce this signature.
	//
	// If present, for the event to be valid:
	// 1. creator_address must match delegate_sig's signer public key
	// 2. delegate_sig should be the signature of Envelope.signature's public key.
	//
	// Server nodes sign node-produced events with their own keypair and do not
	// need to use delegate_sig.
	DelegateSig []byte `protobuf:"bytes,2,opt,name=delegate_sig,json=delegateSig,proto3" json:"delegate_sig,omitempty"`
	// * TODO: move salt to inception event
	Salt []byte `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// * Hashes of the preceding leaf events in the stream. Empty array for the inception event.
	PrevEvents [][]byte `protobuf:"bytes,4,rep,name=prev_events,json=prevEvents,proto3" json:"prev_events,omitempty"`
	// * Variable-type payload.
	// Payloads should obey the following rules:
	// - payloads should have their own unique type
	// - each payload should have a oneof content field
	// - each payload should have an inception field inside the content oneof
	// - each payload should have a unique Inception type
	// - payloads can't violate previous type recursively to inception payload
	//
	// Types that are assignable to Payload:
	//
	//	*StreamEvent_SpacePayload
	//	*StreamEvent_ChannelPayload
	//	*StreamEvent_UserPayload
	//	*StreamEvent_UserSettingsPayload
	//	*StreamEvent_UserDeviceKeyPayload
	Payload isStreamEvent_Payload `protobuf_oneof:"payload"`
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent.ProtoReflect.Descriptor instead.
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *StreamEvent) GetCreatorAddress() []byte {
	if x != nil {
		return x.CreatorAddress
	}
	return nil
}

func (x *StreamEvent) GetDelegateSig() []byte {
	if x != nil {
		return x.DelegateSig
	}
	return nil
}

func (x *StreamEvent) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *StreamEvent) GetPrevEvents() [][]byte {
	if x != nil {
		return x.PrevEvents
	}
	return nil
}

func (m *StreamEvent) GetPayload() isStreamEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamEvent) GetSpacePayload() *SpacePayload {
	if x, ok := x.GetPayload().(*StreamEvent_SpacePayload); ok {
		return x.SpacePayload
	}
	return nil
}

func (x *StreamEvent) GetChannelPayload() *ChannelPayload {
	if x, ok := x.GetPayload().(*StreamEvent_ChannelPayload); ok {
		return x.ChannelPayload
	}
	return nil
}

func (x *StreamEvent) GetUserPayload() *UserPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserPayload); ok {
		return x.UserPayload
	}
	return nil
}

func (x *StreamEvent) GetUserSettingsPayload() *UserSettingsPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserSettingsPayload); ok {
		return x.UserSettingsPayload
	}
	return nil
}

func (x *StreamEvent) GetUserDeviceKeyPayload() *UserDeviceKeyPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserDeviceKeyPayload); ok {
		return x.UserDeviceKeyPayload
	}
	return nil
}

type isStreamEvent_Payload interface {
	isStreamEvent_Payload()
}

type StreamEvent_SpacePayload struct {
	SpacePayload *SpacePayload `protobuf:"bytes,100,opt,name=space_payload,json=spacePayload,proto3,oneof"`
}

type StreamEvent_ChannelPayload struct {
	ChannelPayload *ChannelPayload `protobuf:"bytes,101,opt,name=channel_payload,json=channelPayload,proto3,oneof"`
}

type StreamEvent_UserPayload struct {
	UserPayload *UserPayload `protobuf:"bytes,102,opt,name=user_payload,json=userPayload,proto3,oneof"`
}

type StreamEvent_UserSettingsPayload struct {
	UserSettingsPayload *UserSettingsPayload `protobuf:"bytes,103,opt,name=user_settings_payload,json=userSettingsPayload,proto3,oneof"`
}

type StreamEvent_UserDeviceKeyPayload struct {
	UserDeviceKeyPayload *UserDeviceKeyPayload `protobuf:"bytes,104,opt,name=user_device_key_payload,json=userDeviceKeyPayload,proto3,oneof"`
}

func (*StreamEvent_SpacePayload) isStreamEvent_Payload() {}

func (*StreamEvent_ChannelPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserSettingsPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserDeviceKeyPayload) isStreamEvent_Payload() {}

// *
// Derived event is produces by server when there should be additional event to compliment
// received event. For example, when user joins a space through event in the space stream, server will produce a derived event
// in a user stream to indicate that user joined a particual space.
//
// EventRef is used to reference the event that caused the derived event to be produced.
type EventRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId  string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *EventRef) Reset() {
	*x = EventRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRef) ProtoMessage() {}

func (x *EventRef) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRef.ProtoReflect.Descriptor instead.
func (*EventRef) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *EventRef) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *EventRef) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *EventRef) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     MembershipOp `protobuf:"varint,1,opt,name=op,proto3,enum=casablanca.MembershipOp" json:"op,omitempty"`
	UserId string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *Membership) GetOp() MembershipOp {
	if x != nil {
		return x.Op
	}
	return MembershipOp_SO_UNSPECIFIED
}

func (x *Membership) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserPayload_Inception_
	//	*UserPayload_UserMembership_
	//	*UserPayload_ToDevice_
	Content isUserPayload_Content `protobuf_oneof:"content"`
}

func (x *UserPayload) Reset() {
	*x = UserPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload) ProtoMessage() {}

func (x *UserPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload.ProtoReflect.Descriptor instead.
func (*UserPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

func (m *UserPayload) GetContent() isUserPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserPayload) GetInception() *UserPayload_Inception {
	if x, ok := x.GetContent().(*UserPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserPayload) GetUserMembership() *UserPayload_UserMembership {
	if x, ok := x.GetContent().(*UserPayload_UserMembership_); ok {
		return x.UserMembership
	}
	return nil
}

func (x *UserPayload) GetToDevice() *UserPayload_ToDevice {
	if x, ok := x.GetContent().(*UserPayload_ToDevice_); ok {
		return x.ToDevice
	}
	return nil
}

type isUserPayload_Content interface {
	isUserPayload_Content()
}

type UserPayload_Inception_ struct {
	Inception *UserPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserPayload_UserMembership_ struct {
	UserMembership *UserPayload_UserMembership `protobuf:"bytes,2,opt,name=user_membership,json=userMembership,proto3,oneof"`
}

type UserPayload_ToDevice_ struct {
	ToDevice *UserPayload_ToDevice `protobuf:"bytes,3,opt,name=to_device,json=toDevice,proto3,oneof"`
}

func (*UserPayload_Inception_) isUserPayload_Content() {}

func (*UserPayload_UserMembership_) isUserPayload_Content() {}

func (*UserPayload_ToDevice_) isUserPayload_Content() {}

type SpacePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*SpacePayload_Inception_
	//	*SpacePayload_Channel_
	//	*SpacePayload_Membership
	Content isSpacePayload_Content `protobuf_oneof:"content"`
}

func (x *SpacePayload) Reset() {
	*x = SpacePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload) ProtoMessage() {}

func (x *SpacePayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload.ProtoReflect.Descriptor instead.
func (*SpacePayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5}
}

func (m *SpacePayload) GetContent() isSpacePayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *SpacePayload) GetInception() *SpacePayload_Inception {
	if x, ok := x.GetContent().(*SpacePayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *SpacePayload) GetChannel() *SpacePayload_Channel {
	if x, ok := x.GetContent().(*SpacePayload_Channel_); ok {
		return x.Channel
	}
	return nil
}

func (x *SpacePayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*SpacePayload_Membership); ok {
		return x.Membership
	}
	return nil
}

type isSpacePayload_Content interface {
	isSpacePayload_Content()
}

type SpacePayload_Inception_ struct {
	Inception *SpacePayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type SpacePayload_Channel_ struct {
	Channel *SpacePayload_Channel `protobuf:"bytes,2,opt,name=channel,proto3,oneof"`
}

type SpacePayload_Membership struct {
	Membership *Membership `protobuf:"bytes,3,opt,name=membership,proto3,oneof"`
}

func (*SpacePayload_Inception_) isSpacePayload_Content() {}

func (*SpacePayload_Channel_) isSpacePayload_Content() {}

func (*SpacePayload_Membership) isSpacePayload_Content() {}

type ChannelPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*ChannelPayload_Inception_
	//	*ChannelPayload_Message_
	//	*ChannelPayload_Membership
	//	*ChannelPayload_Receipt_
	Content isChannelPayload_Content `protobuf_oneof:"content"`
}

func (x *ChannelPayload) Reset() {
	*x = ChannelPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload) ProtoMessage() {}

func (x *ChannelPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload.ProtoReflect.Descriptor instead.
func (*ChannelPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6}
}

func (m *ChannelPayload) GetContent() isChannelPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ChannelPayload) GetInception() *ChannelPayload_Inception {
	if x, ok := x.GetContent().(*ChannelPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *ChannelPayload) GetMessage() *ChannelPayload_Message {
	if x, ok := x.GetContent().(*ChannelPayload_Message_); ok {
		return x.Message
	}
	return nil
}

func (x *ChannelPayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*ChannelPayload_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *ChannelPayload) GetReceipt() *ChannelPayload_Receipt {
	if x, ok := x.GetContent().(*ChannelPayload_Receipt_); ok {
		return x.Receipt
	}
	return nil
}

type isChannelPayload_Content interface {
	isChannelPayload_Content()
}

type ChannelPayload_Inception_ struct {
	Inception *ChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type ChannelPayload_Message_ struct {
	Message *ChannelPayload_Message `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type ChannelPayload_Membership struct {
	Membership *Membership `protobuf:"bytes,3,opt,name=membership,proto3,oneof"`
}

type ChannelPayload_Receipt_ struct {
	Receipt *ChannelPayload_Receipt `protobuf:"bytes,4,opt,name=receipt,proto3,oneof"`
}

func (*ChannelPayload_Inception_) isChannelPayload_Content() {}

func (*ChannelPayload_Message_) isChannelPayload_Content() {}

func (*ChannelPayload_Membership) isChannelPayload_Content() {}

func (*ChannelPayload_Receipt_) isChannelPayload_Content() {}

type UserSettingsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserSettingsPayload_Inception_
	//	*UserSettingsPayload_UserSetting_
	Content isUserSettingsPayload_Content `protobuf_oneof:"content"`
}

func (x *UserSettingsPayload) Reset() {
	*x = UserSettingsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload) ProtoMessage() {}

func (x *UserSettingsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7}
}

func (m *UserSettingsPayload) GetContent() isUserSettingsPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserSettingsPayload) GetInception() *UserSettingsPayload_Inception {
	if x, ok := x.GetContent().(*UserSettingsPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserSettingsPayload) GetUserSetting() *UserSettingsPayload_UserSetting {
	if x, ok := x.GetContent().(*UserSettingsPayload_UserSetting_); ok {
		return x.UserSetting
	}
	return nil
}

type isUserSettingsPayload_Content interface {
	isUserSettingsPayload_Content()
}

type UserSettingsPayload_Inception_ struct {
	Inception *UserSettingsPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserSettingsPayload_UserSetting_ struct {
	UserSetting *UserSettingsPayload_UserSetting `protobuf:"bytes,2,opt,name=user_setting,json=userSetting,proto3,oneof"`
}

func (*UserSettingsPayload_Inception_) isUserSettingsPayload_Content() {}

func (*UserSettingsPayload_UserSetting_) isUserSettingsPayload_Content() {}

type UserDeviceKeyPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserDeviceKeyPayload_Inception_
	//	*UserDeviceKeyPayload_UserDeviceKey_
	Content isUserDeviceKeyPayload_Content `protobuf_oneof:"content"`
}

func (x *UserDeviceKeyPayload) Reset() {
	*x = UserDeviceKeyPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload) ProtoMessage() {}

func (x *UserDeviceKeyPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8}
}

func (m *UserDeviceKeyPayload) GetContent() isUserDeviceKeyPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserDeviceKeyPayload) GetInception() *UserDeviceKeyPayload_Inception {
	if x, ok := x.GetContent().(*UserDeviceKeyPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserDeviceKeyPayload) GetUserDeviceKey() *UserDeviceKeyPayload_UserDeviceKey {
	if x, ok := x.GetContent().(*UserDeviceKeyPayload_UserDeviceKey_); ok {
		return x.UserDeviceKey
	}
	return nil
}

type isUserDeviceKeyPayload_Content interface {
	isUserDeviceKeyPayload_Content()
}

type UserDeviceKeyPayload_Inception_ struct {
	Inception *UserDeviceKeyPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserDeviceKeyPayload_UserDeviceKey_ struct {
	UserDeviceKey *UserDeviceKeyPayload_UserDeviceKey `protobuf:"bytes,2,opt,name=user_device_key,json=userDeviceKey,proto3,oneof"`
}

func (*UserDeviceKeyPayload_Inception_) isUserDeviceKeyPayload_Content() {}

func (*UserDeviceKeyPayload_UserDeviceKey_) isUserDeviceKeyPayload_Content() {}

// *
// DeviceKeys are used to store public identity keys and signatures for a particular
// user's device.
//
// algorithms: encryption algorithms supported by the device.
// keys: public identity keys (signing keys) for the device with property in format <algorithm>:<device_id>.
//
//	Keys should be encoded as specified by key algorithm.
//
// signatures: map from <algorithm>:<device_id> to signature.
type DeviceKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string            `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Algorithms []string          `protobuf:"bytes,2,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	Keys       map[string]string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Signatures map[string]string `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceKeys) Reset() {
	*x = DeviceKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceKeys) ProtoMessage() {}

func (x *DeviceKeys) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceKeys.ProtoReflect.Descriptor instead.
func (*DeviceKeys) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceKeys) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceKeys) GetAlgorithms() []string {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

func (x *DeviceKeys) GetKeys() map[string]string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeviceKeys) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// *
// FallbackKeys are used to store "pre-key" messages for a particular user's device.
//
// algo_key_id: map from <algorithm>:<key_id> to Key.
type FallbackKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgoKeyId map[string]*Key `protobuf:"bytes,1,rep,name=algo_key_id,json=algoKeyId,proto3" json:"algo_key_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FallbackKeys) Reset() {
	*x = FallbackKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackKeys) ProtoMessage() {}

func (x *FallbackKeys) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackKeys.ProtoReflect.Descriptor instead.
func (*FallbackKeys) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *FallbackKeys) GetAlgoKeyId() map[string]*Key {
	if x != nil {
		return x.AlgoKeyId
	}
	return nil
}

// *
// Key is used to store fallback keys and depending on the algorithm signatures
// that are formatted as <algorithm>:<device_id> mapped to <signature>
//
// key: key value
// signatures: map from <algorithm>:<device_id> to signature for given key.
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Signatures map[string]string `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Key) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SyncCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId      string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	MiniblockNum  int64  `protobuf:"varint,2,opt,name=miniblock_num,json=miniblockNum,proto3" json:"miniblock_num,omitempty"`
	MiniblockHash []byte `protobuf:"bytes,3,opt,name=miniblock_hash,json=miniblockHash,proto3" json:"miniblock_hash,omitempty"`
	// minipool_instance is a unique identifier of a cookie generator.
	// minipool_slots are not necessary consistent across instances or even restarts.
	// If minipool_instance is mismatching, then minipool_slot is ignored and stream is synced from the end of the referenced miniblock_num.
	// This is responsibility of the client to ignore duplicate events.
	MinipoolInstance string `protobuf:"bytes,4,opt,name=minipool_instance,json=minipoolInstance,proto3" json:"minipool_instance,omitempty"`
	MinipoolSlot     int64  `protobuf:"varint,5,opt,name=minipool_slot,json=minipoolSlot,proto3" json:"minipool_slot,omitempty"`
}

func (x *SyncCookie) Reset() {
	*x = SyncCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCookie) ProtoMessage() {}

func (x *SyncCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCookie.ProtoReflect.Descriptor instead.
func (*SyncCookie) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *SyncCookie) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SyncCookie) GetMiniblockNum() int64 {
	if x != nil {
		return x.MiniblockNum
	}
	return 0
}

func (x *SyncCookie) GetMiniblockHash() []byte {
	if x != nil {
		return x.MiniblockHash
	}
	return nil
}

func (x *SyncCookie) GetMinipoolInstance() string {
	if x != nil {
		return x.MinipoolInstance
	}
	return ""
}

func (x *SyncCookie) GetMinipoolSlot() int64 {
	if x != nil {
		return x.MinipoolSlot
	}
	return 0
}

type StreamAndCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events             []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextSyncCookie     *SyncCookie `protobuf:"bytes,2,opt,name=next_sync_cookie,json=nextSyncCookie,proto3" json:"next_sync_cookie,omitempty"`
	OriginalSyncCookie *SyncCookie `protobuf:"bytes,3,opt,name=original_sync_cookie,json=originalSyncCookie,proto3" json:"original_sync_cookie,omitempty"`
	StreamId           string      `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *StreamAndCookie) Reset() {
	*x = StreamAndCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAndCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAndCookie) ProtoMessage() {}

func (x *StreamAndCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAndCookie.ProtoReflect.Descriptor instead.
func (*StreamAndCookie) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13}
}

func (x *StreamAndCookie) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *StreamAndCookie) GetNextSyncCookie() *SyncCookie {
	if x != nil {
		return x.NextSyncCookie
	}
	return nil
}

func (x *StreamAndCookie) GetOriginalSyncCookie() *SyncCookie {
	if x != nil {
		return x.OriginalSyncCookie
	}
	return nil
}

func (x *StreamAndCookie) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type CreateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{14}
}

func (x *CreateStreamRequest) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

type CreateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncCookie *SyncCookie `protobuf:"bytes,1,opt,name=sync_cookie,json=syncCookie,proto3" json:"sync_cookie,omitempty"`
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{15}
}

func (x *CreateStreamResponse) GetSyncCookie() *SyncCookie {
	if x != nil {
		return x.SyncCookie
	}
	return nil
}

type GetStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{16}
}

func (x *GetStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type GetStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *StreamAndCookie `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *GetStreamResponse) Reset() {
	*x = GetStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamResponse) ProtoMessage() {}

func (x *GetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamResponse.ProtoReflect.Descriptor instead.
func (*GetStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{17}
}

func (x *GetStreamResponse) GetStream() *StreamAndCookie {
	if x != nil {
		return x.Stream
	}
	return nil
}

type AddEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string    `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Event    *Envelope `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *AddEventRequest) Reset() {
	*x = AddEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventRequest) ProtoMessage() {}

func (x *AddEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventRequest.ProtoReflect.Descriptor instead.
func (*AddEventRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{18}
}

func (x *AddEventRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *AddEventRequest) GetEvent() *Envelope {
	if x != nil {
		return x.Event
	}
	return nil
}

type AddEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEventResponse) Reset() {
	*x = AddEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventResponse) ProtoMessage() {}

func (x *AddEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventResponse.ProtoReflect.Descriptor instead.
func (*AddEventResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{19}
}

type SyncStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncPos []*SyncCookie `protobuf:"bytes,1,rep,name=sync_pos,json=syncPos,proto3" json:"sync_pos,omitempty"`
}

func (x *SyncStreamsRequest) Reset() {
	*x = SyncStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreamsRequest) ProtoMessage() {}

func (x *SyncStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreamsRequest.ProtoReflect.Descriptor instead.
func (*SyncStreamsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{20}
}

func (x *SyncStreamsRequest) GetSyncPos() []*SyncCookie {
	if x != nil {
		return x.SyncPos
	}
	return nil
}

type SyncStreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams []*StreamAndCookie `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *SyncStreamsResponse) Reset() {
	*x = SyncStreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreamsResponse) ProtoMessage() {}

func (x *SyncStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreamsResponse.ProtoReflect.Descriptor instead.
func (*SyncStreamsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{21}
}

func (x *SyncStreamsResponse) GetStreams() []*StreamAndCookie {
	if x != nil {
		return x.Streams
	}
	return nil
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug string `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{22}
}

func (x *InfoRequest) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graffiti string `protobuf:"bytes,1,opt,name=graffiti,proto3" json:"graffiti,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{23}
}

func (x *InfoResponse) GetGraffiti() string {
	if x != nil {
		return x.Graffiti
	}
	return ""
}

type UserPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *UserPayload_Inception) Reset() {
	*x = UserPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_Inception) ProtoMessage() {}

func (x *UserPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UserPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type UserPayload_UserMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId    string       `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	OriginEvent *EventRef    `protobuf:"bytes,2,opt,name=origin_event,json=originEvent,proto3" json:"origin_event,omitempty"`
	InviterId   string       `protobuf:"bytes,3,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	Op          MembershipOp `protobuf:"varint,4,opt,name=op,proto3,enum=casablanca.MembershipOp" json:"op,omitempty"`
}

func (x *UserPayload_UserMembership) Reset() {
	*x = UserPayload_UserMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_UserMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_UserMembership) ProtoMessage() {}

func (x *UserPayload_UserMembership) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_UserMembership.ProtoReflect.Descriptor instead.
func (*UserPayload_UserMembership) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 1}
}

func (x *UserPayload_UserMembership) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserPayload_UserMembership) GetOriginEvent() *EventRef {
	if x != nil {
		return x.OriginEvent
	}
	return nil
}

func (x *UserPayload_UserMembership) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *UserPayload_UserMembership) GetOp() MembershipOp {
	if x != nil {
		return x.Op
	}
	return MembershipOp_SO_UNSPECIFIED
}

type UserPayload_ToDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op        ToDeviceOp `protobuf:"varint,1,opt,name=op,proto3,enum=casablanca.ToDeviceOp" json:"op,omitempty"`
	Value     []byte     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DeviceKey string     `protobuf:"bytes,3,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"`
	SenderKey string     `protobuf:"bytes,4,opt,name=sender_key,json=senderKey,proto3" json:"sender_key,omitempty"`
}

func (x *UserPayload_ToDevice) Reset() {
	*x = UserPayload_ToDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_ToDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_ToDevice) ProtoMessage() {}

func (x *UserPayload_ToDevice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_ToDevice.ProtoReflect.Descriptor instead.
func (*UserPayload_ToDevice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 2}
}

func (x *UserPayload_ToDevice) GetOp() ToDeviceOp {
	if x != nil {
		return x.Op
	}
	return ToDeviceOp_TDO_UNSPECIFIED
}

func (x *UserPayload_ToDevice) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserPayload_ToDevice) GetDeviceKey() string {
	if x != nil {
		return x.DeviceKey
	}
	return ""
}

func (x *UserPayload_ToDevice) GetSenderKey() string {
	if x != nil {
		return x.SenderKey
	}
	return ""
}

type SpacePayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *SpacePayload_Inception) Reset() {
	*x = SpacePayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Inception) ProtoMessage() {}

func (x *SpacePayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Inception.ProtoReflect.Descriptor instead.
func (*SpacePayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SpacePayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type SpacePayload_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op          ChannelOp `protobuf:"varint,1,opt,name=op,proto3,enum=casablanca.ChannelOp" json:"op,omitempty"`
	ChannelId   string    `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	OriginEvent *EventRef `protobuf:"bytes,3,opt,name=origin_event,json=originEvent,proto3" json:"origin_event,omitempty"`
}

func (x *SpacePayload_Channel) Reset() {
	*x = SpacePayload_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Channel) ProtoMessage() {}

func (x *SpacePayload_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Channel.ProtoReflect.Descriptor instead.
func (*SpacePayload_Channel) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SpacePayload_Channel) GetOp() ChannelOp {
	if x != nil {
		return x.Op
	}
	return ChannelOp_CO_UNSPECIFIED
}

func (x *SpacePayload_Channel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SpacePayload_Channel) GetOriginEvent() *EventRef {
	if x != nil {
		return x.OriginEvent
	}
	return nil
}

type ChannelPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SpaceId  string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (x *ChannelPayload_Inception) Reset() {
	*x = ChannelPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Inception) ProtoMessage() {}

func (x *ChannelPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Inception.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ChannelPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *ChannelPayload_Inception) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

type ChannelPayload_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// *
	// Encryption algorithm  used to encrypt this event.
	Algorithm *string `protobuf:"bytes,2,opt,name=algorithm,proto3,oneof" json:"algorithm,omitempty"`
	// *
	// Sender device public key identifying the sender's device.
	SenderKey *string `protobuf:"bytes,3,opt,name=sender_key,json=senderKey,proto3,oneof" json:"sender_key,omitempty"`
	// *
	// Sender's device id.
	DeviceId *string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
	// *
	// The ID of the session used to encrypt the message.
	SessionId *string `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
}

func (x *ChannelPayload_Message) Reset() {
	*x = ChannelPayload_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Message) ProtoMessage() {}

func (x *ChannelPayload_Message) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Message.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Message) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ChannelPayload_Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChannelPayload_Message) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

func (x *ChannelPayload_Message) GetSenderKey() string {
	if x != nil && x.SenderKey != nil {
		return *x.SenderKey
	}
	return ""
}

func (x *ChannelPayload_Message) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *ChannelPayload_Message) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

// *
// Receipt is used to acknowledge that the event depicted by origin_op and hash
// was responded to by a device. Used to prevent spurious processing of to-device events
// by multiple requested users' devices.
type ChannelPayload_Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginOp   ToDeviceOp `protobuf:"varint,1,opt,name=origin_op,json=originOp,proto3,enum=casablanca.ToDeviceOp" json:"origin_op,omitempty"`
	OriginHash []byte     `protobuf:"bytes,2,opt,name=origin_hash,json=originHash,proto3" json:"origin_hash,omitempty"`
}

func (x *ChannelPayload_Receipt) Reset() {
	*x = ChannelPayload_Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Receipt) ProtoMessage() {}

func (x *ChannelPayload_Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Receipt.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Receipt) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ChannelPayload_Receipt) GetOriginOp() ToDeviceOp {
	if x != nil {
		return x.OriginOp
	}
	return ToDeviceOp_TDO_UNSPECIFIED
}

func (x *ChannelPayload_Receipt) GetOriginHash() []byte {
	if x != nil {
		return x.OriginHash
	}
	return nil
}

type UserSettingsPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SpaceId  string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (x *UserSettingsPayload_Inception) Reset() {
	*x = UserSettingsPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_Inception) ProtoMessage() {}

func (x *UserSettingsPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UserSettingsPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserSettingsPayload_Inception) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

type UserSettingsPayload_UserSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op          UserSettingOp `protobuf:"varint,1,opt,name=op,proto3,enum=casablanca.UserSettingOp" json:"op,omitempty"`
	Value       []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ChannelId   *string       `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3,oneof" json:"channel_id,omitempty"`
	OriginEvent *EventRef     `protobuf:"bytes,4,opt,name=origin_event,json=originEvent,proto3,oneof" json:"origin_event,omitempty"`
}

func (x *UserSettingsPayload_UserSetting) Reset() {
	*x = UserSettingsPayload_UserSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_UserSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_UserSetting) ProtoMessage() {}

func (x *UserSettingsPayload_UserSetting) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_UserSetting.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_UserSetting) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7, 1}
}

func (x *UserSettingsPayload_UserSetting) GetOp() UserSettingOp {
	if x != nil {
		return x.Op
	}
	return UserSettingOp_USO_UNSPECIFIED
}

func (x *UserSettingsPayload_UserSetting) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserSettingsPayload_UserSetting) GetChannelId() string {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return ""
}

func (x *UserSettingsPayload_UserSetting) GetOriginEvent() *EventRef {
	if x != nil {
		return x.OriginEvent
	}
	return nil
}

type UserDeviceKeyPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserDeviceKeyPayload_Inception) Reset() {
	*x = UserDeviceKeyPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_Inception) ProtoMessage() {}

func (x *UserDeviceKeyPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UserDeviceKeyPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserDeviceKeyPayload_Inception) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserDeviceKeyPayload_UserDeviceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceKeys   *DeviceKeys   `protobuf:"bytes,2,opt,name=device_keys,json=deviceKeys,proto3,oneof" json:"device_keys,omitempty"`
	FallbackKeys *FallbackKeys `protobuf:"bytes,3,opt,name=fallback_keys,json=fallbackKeys,proto3,oneof" json:"fallback_keys,omitempty"`
}

func (x *UserDeviceKeyPayload_UserDeviceKey) Reset() {
	*x = UserDeviceKeyPayload_UserDeviceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_UserDeviceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_UserDeviceKey) ProtoMessage() {}

func (x *UserDeviceKeyPayload_UserDeviceKey) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_UserDeviceKey.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_UserDeviceKey) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetDeviceKeys() *DeviceKeys {
	if x != nil {
		return x.DeviceKeys
	}
	return nil
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetFallbackKeys() *FallbackKeys {
	if x != nil {
		return x.FallbackKeys
	}
	return nil
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x22, 0x52, 0x0a, 0x08,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x91, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x59,
	0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x59, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x4f, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x28, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xd4, 0x04, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x28, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x1a, 0xaf, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x70, 0x52,
	0x02, 0x6f, 0x70, 0x1a, 0x86, 0x01, 0x0a, 0x08, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x1a, 0x28, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x88,
	0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xa8, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x1a, 0x43, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xe4, 0x01, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x1a, 0x5f, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x33,
	0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x4f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xd5, 0x03, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x1a, 0x43, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xd0, 0x01, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x41, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xcc, 0x01, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12,
	0x34, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x1a,
	0x4d, 0x0a, 0x0e, 0x41, 0x6c, 0x67, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97,
	0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x6c,
	0x6f, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x12, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x5a,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47,
	0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07,
	0x73, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x2a, 0x0a, 0x0c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x74, 0x69, 0x2a, 0x4c, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x5f, 0x4c, 0x45, 0x41,
	0x56, 0x45, 0x10, 0x03, 0x2a, 0x3f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x70, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x4f, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x53, 0x4f, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x2a,
	0x4c, 0x0a, 0x0a, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x44, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x44, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x44, 0x4f, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x93, 0x04,
	0x0a, 0x03, 0x45, 0x72, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53, 0x10,
	0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x10, 0x11, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x58, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x41, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x53, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41,
	0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x17, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x18, 0x32, 0x80, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x61, 0x6e, 0x63, 0x61, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_protocol_proto_goTypes = []interface{}{
	(MembershipOp)(0),                          // 0: casablanca.MembershipOp
	(ChannelOp)(0),                             // 1: casablanca.ChannelOp
	(UserSettingOp)(0),                         // 2: casablanca.UserSettingOp
	(ToDeviceOp)(0),                            // 3: casablanca.ToDeviceOp
	(Err)(0),                                   // 4: casablanca.Err
	(*Envelope)(nil),                           // 5: casablanca.Envelope
	(*StreamEvent)(nil),                        // 6: casablanca.StreamEvent
	(*EventRef)(nil),                           // 7: casablanca.EventRef
	(*Membership)(nil),                         // 8: casablanca.Membership
	(*UserPayload)(nil),                        // 9: casablanca.UserPayload
	(*SpacePayload)(nil),                       // 10: casablanca.SpacePayload
	(*ChannelPayload)(nil),                     // 11: casablanca.ChannelPayload
	(*UserSettingsPayload)(nil),                // 12: casablanca.UserSettingsPayload
	(*UserDeviceKeyPayload)(nil),               // 13: casablanca.UserDeviceKeyPayload
	(*DeviceKeys)(nil),                         // 14: casablanca.DeviceKeys
	(*FallbackKeys)(nil),                       // 15: casablanca.FallbackKeys
	(*Key)(nil),                                // 16: casablanca.Key
	(*SyncCookie)(nil),                         // 17: casablanca.SyncCookie
	(*StreamAndCookie)(nil),                    // 18: casablanca.StreamAndCookie
	(*CreateStreamRequest)(nil),                // 19: casablanca.CreateStreamRequest
	(*CreateStreamResponse)(nil),               // 20: casablanca.CreateStreamResponse
	(*GetStreamRequest)(nil),                   // 21: casablanca.GetStreamRequest
	(*GetStreamResponse)(nil),                  // 22: casablanca.GetStreamResponse
	(*AddEventRequest)(nil),                    // 23: casablanca.AddEventRequest
	(*AddEventResponse)(nil),                   // 24: casablanca.AddEventResponse
	(*SyncStreamsRequest)(nil),                 // 25: casablanca.SyncStreamsRequest
	(*SyncStreamsResponse)(nil),                // 26: casablanca.SyncStreamsResponse
	(*InfoRequest)(nil),                        // 27: casablanca.InfoRequest
	(*InfoResponse)(nil),                       // 28: casablanca.InfoResponse
	(*UserPayload_Inception)(nil),              // 29: casablanca.UserPayload.Inception
	(*UserPayload_UserMembership)(nil),         // 30: casablanca.UserPayload.UserMembership
	(*UserPayload_ToDevice)(nil),               // 31: casablanca.UserPayload.ToDevice
	(*SpacePayload_Inception)(nil),             // 32: casablanca.SpacePayload.Inception
	(*SpacePayload_Channel)(nil),               // 33: casablanca.SpacePayload.Channel
	(*ChannelPayload_Inception)(nil),           // 34: casablanca.ChannelPayload.Inception
	(*ChannelPayload_Message)(nil),             // 35: casablanca.ChannelPayload.Message
	(*ChannelPayload_Receipt)(nil),             // 36: casablanca.ChannelPayload.Receipt
	(*UserSettingsPayload_Inception)(nil),      // 37: casablanca.UserSettingsPayload.Inception
	(*UserSettingsPayload_UserSetting)(nil),    // 38: casablanca.UserSettingsPayload.UserSetting
	(*UserDeviceKeyPayload_Inception)(nil),     // 39: casablanca.UserDeviceKeyPayload.Inception
	(*UserDeviceKeyPayload_UserDeviceKey)(nil), // 40: casablanca.UserDeviceKeyPayload.UserDeviceKey
	nil, // 41: casablanca.DeviceKeys.KeysEntry
	nil, // 42: casablanca.DeviceKeys.SignaturesEntry
	nil, // 43: casablanca.FallbackKeys.AlgoKeyIdEntry
	nil, // 44: casablanca.Key.SignaturesEntry
}
var file_protocol_proto_depIdxs = []int32{
	10, // 0: casablanca.StreamEvent.space_payload:type_name -> casablanca.SpacePayload
	11, // 1: casablanca.StreamEvent.channel_payload:type_name -> casablanca.ChannelPayload
	9,  // 2: casablanca.StreamEvent.user_payload:type_name -> casablanca.UserPayload
	12, // 3: casablanca.StreamEvent.user_settings_payload:type_name -> casablanca.UserSettingsPayload
	13, // 4: casablanca.StreamEvent.user_device_key_payload:type_name -> casablanca.UserDeviceKeyPayload
	0,  // 5: casablanca.Membership.op:type_name -> casablanca.MembershipOp
	29, // 6: casablanca.UserPayload.inception:type_name -> casablanca.UserPayload.Inception
	30, // 7: casablanca.UserPayload.user_membership:type_name -> casablanca.UserPayload.UserMembership
	31, // 8: casablanca.UserPayload.to_device:type_name -> casablanca.UserPayload.ToDevice
	32, // 9: casablanca.SpacePayload.inception:type_name -> casablanca.SpacePayload.Inception
	33, // 10: casablanca.SpacePayload.channel:type_name -> casablanca.SpacePayload.Channel
	8,  // 11: casablanca.SpacePayload.membership:type_name -> casablanca.Membership
	34, // 12: casablanca.ChannelPayload.inception:type_name -> casablanca.ChannelPayload.Inception
	35, // 13: casablanca.ChannelPayload.message:type_name -> casablanca.ChannelPayload.Message
	8,  // 14: casablanca.ChannelPayload.membership:type_name -> casablanca.Membership
	36, // 15: casablanca.ChannelPayload.receipt:type_name -> casablanca.ChannelPayload.Receipt
	37, // 16: casablanca.UserSettingsPayload.inception:type_name -> casablanca.UserSettingsPayload.Inception
	38, // 17: casablanca.UserSettingsPayload.user_setting:type_name -> casablanca.UserSettingsPayload.UserSetting
	39, // 18: casablanca.UserDeviceKeyPayload.inception:type_name -> casablanca.UserDeviceKeyPayload.Inception
	40, // 19: casablanca.UserDeviceKeyPayload.user_device_key:type_name -> casablanca.UserDeviceKeyPayload.UserDeviceKey
	41, // 20: casablanca.DeviceKeys.keys:type_name -> casablanca.DeviceKeys.KeysEntry
	42, // 21: casablanca.DeviceKeys.signatures:type_name -> casablanca.DeviceKeys.SignaturesEntry
	43, // 22: casablanca.FallbackKeys.algo_key_id:type_name -> casablanca.FallbackKeys.AlgoKeyIdEntry
	44, // 23: casablanca.Key.signatures:type_name -> casablanca.Key.SignaturesEntry
	5,  // 24: casablanca.StreamAndCookie.events:type_name -> casablanca.Envelope
	17, // 25: casablanca.StreamAndCookie.next_sync_cookie:type_name -> casablanca.SyncCookie
	17, // 26: casablanca.StreamAndCookie.original_sync_cookie:type_name -> casablanca.SyncCookie
	5,  // 27: casablanca.CreateStreamRequest.events:type_name -> casablanca.Envelope
	17, // 28: casablanca.CreateStreamResponse.sync_cookie:type_name -> casablanca.SyncCookie
	18, // 29: casablanca.GetStreamResponse.stream:type_name -> casablanca.StreamAndCookie
	5,  // 30: casablanca.AddEventRequest.event:type_name -> casablanca.Envelope
	17, // 31: casablanca.SyncStreamsRequest.sync_pos:type_name -> casablanca.SyncCookie
	18, // 32: casablanca.SyncStreamsResponse.streams:type_name -> casablanca.StreamAndCookie
	7,  // 33: casablanca.UserPayload.UserMembership.origin_event:type_name -> casablanca.EventRef
	0,  // 34: casablanca.UserPayload.UserMembership.op:type_name -> casablanca.MembershipOp
	3,  // 35: casablanca.UserPayload.ToDevice.op:type_name -> casablanca.ToDeviceOp
	1,  // 36: casablanca.SpacePayload.Channel.op:type_name -> casablanca.ChannelOp
	7,  // 37: casablanca.SpacePayload.Channel.origin_event:type_name -> casablanca.EventRef
	3,  // 38: casablanca.ChannelPayload.Receipt.origin_op:type_name -> casablanca.ToDeviceOp
	2,  // 39: casablanca.UserSettingsPayload.UserSetting.op:type_name -> casablanca.UserSettingOp
	7,  // 40: casablanca.UserSettingsPayload.UserSetting.origin_event:type_name -> casablanca.EventRef
	14, // 41: casablanca.UserDeviceKeyPayload.UserDeviceKey.device_keys:type_name -> casablanca.DeviceKeys
	15, // 42: casablanca.UserDeviceKeyPayload.UserDeviceKey.fallback_keys:type_name -> casablanca.FallbackKeys
	16, // 43: casablanca.FallbackKeys.AlgoKeyIdEntry.value:type_name -> casablanca.Key
	19, // 44: casablanca.StreamService.CreateStream:input_type -> casablanca.CreateStreamRequest
	21, // 45: casablanca.StreamService.GetStream:input_type -> casablanca.GetStreamRequest
	23, // 46: casablanca.StreamService.AddEvent:input_type -> casablanca.AddEventRequest
	25, // 47: casablanca.StreamService.SyncStreams:input_type -> casablanca.SyncStreamsRequest
	27, // 48: casablanca.StreamService.Info:input_type -> casablanca.InfoRequest
	20, // 49: casablanca.StreamService.CreateStream:output_type -> casablanca.CreateStreamResponse
	22, // 50: casablanca.StreamService.GetStream:output_type -> casablanca.GetStreamResponse
	24, // 51: casablanca.StreamService.AddEvent:output_type -> casablanca.AddEventResponse
	26, // 52: casablanca.StreamService.SyncStreams:output_type -> casablanca.SyncStreamsResponse
	28, // 53: casablanca.StreamService.Info:output_type -> casablanca.InfoResponse
	49, // [49:54] is the sub-list for method output_type
	44, // [44:49] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAndCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_UserMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_ToDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_UserSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_UserDeviceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StreamEvent_SpacePayload)(nil),
		(*StreamEvent_ChannelPayload)(nil),
		(*StreamEvent_UserPayload)(nil),
		(*StreamEvent_UserSettingsPayload)(nil),
		(*StreamEvent_UserDeviceKeyPayload)(nil),
	}
	file_protocol_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UserPayload_Inception_)(nil),
		(*UserPayload_UserMembership_)(nil),
		(*UserPayload_ToDevice_)(nil),
	}
	file_protocol_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SpacePayload_Inception_)(nil),
		(*SpacePayload_Channel_)(nil),
		(*SpacePayload_Membership)(nil),
	}
	file_protocol_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ChannelPayload_Inception_)(nil),
		(*ChannelPayload_Message_)(nil),
		(*ChannelPayload_Membership)(nil),
		(*ChannelPayload_Receipt_)(nil),
	}
	file_protocol_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UserSettingsPayload_Inception_)(nil),
		(*UserSettingsPayload_UserSetting_)(nil),
	}
	file_protocol_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UserDeviceKeyPayload_Inception_)(nil),
		(*UserDeviceKeyPayload_UserDeviceKey_)(nil),
	}
	file_protocol_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_protocol_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_protocol_proto_msgTypes[35].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
