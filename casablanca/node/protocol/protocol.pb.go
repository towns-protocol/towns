// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: protocol.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MembershipOp int32

const (
	MembershipOp_SO_UNSPECIFIED MembershipOp = 0
	MembershipOp_SO_INVITE      MembershipOp = 1
	MembershipOp_SO_JOIN        MembershipOp = 2
	MembershipOp_SO_LEAVE       MembershipOp = 3
)

// Enum value maps for MembershipOp.
var (
	MembershipOp_name = map[int32]string{
		0: "SO_UNSPECIFIED",
		1: "SO_INVITE",
		2: "SO_JOIN",
		3: "SO_LEAVE",
	}
	MembershipOp_value = map[string]int32{
		"SO_UNSPECIFIED": 0,
		"SO_INVITE":      1,
		"SO_JOIN":        2,
		"SO_LEAVE":       3,
	}
)

func (x MembershipOp) Enum() *MembershipOp {
	p := new(MembershipOp)
	*p = x
	return p
}

func (x MembershipOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (MembershipOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x MembershipOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipOp.Descriptor instead.
func (MembershipOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

type ChannelOp int32

const (
	ChannelOp_CO_UNSPECIFIED ChannelOp = 0
	ChannelOp_CO_CREATED     ChannelOp = 1
	ChannelOp_CO_DELETED     ChannelOp = 2
	ChannelOp_CO_UPDATED     ChannelOp = 4
)

// Enum value maps for ChannelOp.
var (
	ChannelOp_name = map[int32]string{
		0: "CO_UNSPECIFIED",
		1: "CO_CREATED",
		2: "CO_DELETED",
		4: "CO_UPDATED",
	}
	ChannelOp_value = map[string]int32{
		"CO_UNSPECIFIED": 0,
		"CO_CREATED":     1,
		"CO_DELETED":     2,
		"CO_UPDATED":     4,
	}
)

func (x ChannelOp) Enum() *ChannelOp {
	p := new(ChannelOp)
	*p = x
	return p
}

func (x ChannelOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[1].Descriptor()
}

func (ChannelOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[1]
}

func (x ChannelOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelOp.Descriptor instead.
func (ChannelOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

type ToDeviceOp int32

const (
	ToDeviceOp_TDO_UNSPECIFIED  ToDeviceOp = 0
	ToDeviceOp_TDO_KEY_REQUEST  ToDeviceOp = 1
	ToDeviceOp_TDO_KEY_RESPONSE ToDeviceOp = 2
)

// Enum value maps for ToDeviceOp.
var (
	ToDeviceOp_name = map[int32]string{
		0: "TDO_UNSPECIFIED",
		1: "TDO_KEY_REQUEST",
		2: "TDO_KEY_RESPONSE",
	}
	ToDeviceOp_value = map[string]int32{
		"TDO_UNSPECIFIED":  0,
		"TDO_KEY_REQUEST":  1,
		"TDO_KEY_RESPONSE": 2,
	}
)

func (x ToDeviceOp) Enum() *ToDeviceOp {
	p := new(ToDeviceOp)
	*p = x
	return p
}

func (x ToDeviceOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToDeviceOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[2].Descriptor()
}

func (ToDeviceOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[2]
}

func (x ToDeviceOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToDeviceOp.Descriptor instead.
func (ToDeviceOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

type RiverKeyOp int32

const (
	RiverKeyOp_RDKO_KEY_REVOKE RiverKeyOp = 0
)

// Enum value maps for RiverKeyOp.
var (
	RiverKeyOp_name = map[int32]string{
		0: "RDKO_KEY_REVOKE",
	}
	RiverKeyOp_value = map[string]int32{
		"RDKO_KEY_REVOKE": 0,
	}
)

func (x RiverKeyOp) Enum() *RiverKeyOp {
	p := new(RiverKeyOp)
	*p = x
	return p
}

func (x RiverKeyOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiverKeyOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[3].Descriptor()
}

func (RiverKeyOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[3]
}

func (x RiverKeyOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiverKeyOp.Descriptor instead.
func (RiverKeyOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

// Codes from 1 to 16 match gRPC/Connect codes.
type Err int32

const (
	Err_ERR_UNSPECIFIED Err = 0
	// Canceled indicates that the operation was canceled, typically by the
	// caller.
	Err_CANCELED Err = 1
	// Unknown indicates that the operation failed for an unknown reason.
	Err_UNKNOWN Err = 2
	// InvalidArgument indicates that client supplied an invalid argument.
	Err_INVALID_ARGUMENT Err = 3
	// DeadlineExceeded indicates that deadline expired before the operation
	// could complete.
	Err_DEADLINE_EXCEEDED Err = 4
	// NotFound indicates that some requested entity (for example, a file or
	// directory) was not found.
	Err_NOT_FOUND Err = 5
	// AlreadyExists indicates that client attempted to create an entity (for
	// example, a file or directory) that already exists.
	Err_ALREADY_EXISTS Err = 6
	// PermissionDenied indicates that the caller doesn't have permission to
	// execute the specified operation.
	Err_PERMISSION_DENIED Err = 7
	// ResourceExhausted indicates that some resource has been exhausted. For
	// example, a per-user quota may be exhausted or the entire file system may
	// be full.
	Err_RESOURCE_EXHAUSTED Err = 8
	// FailedPrecondition indicates that the system is not in a state
	// required for the operation's execution.
	Err_FAILED_PRECONDITION Err = 9
	// Aborted indicates that operation was aborted by the system, usually
	// because of a concurrency issue such as a sequencer check failure or
	// transaction abort.
	Err_ABORTED Err = 10
	// OutOfRange indicates that the operation was attempted past the valid
	// range (for example, seeking past end-of-file).
	Err_OUT_OF_RANGE Err = 11
	// Unimplemented indicates that the operation isn't implemented,
	// supported, or enabled in this service.
	Err_UNIMPLEMENTED Err = 12
	// Internal indicates that some invariants expected by the underlying
	// system have been broken. This code is reserved for serious errors.
	Err_INTERNAL Err = 13
	// Unavailable indicates that the service is currently unavailable. This
	// is usually temporary, so clients can back off and retry idempotent
	// operations.
	Err_UNAVAILABLE Err = 14
	// DataLoss indicates that the operation has resulted in unrecoverable
	// data loss or corruption.
	Err_DATA_LOSS Err = 15
	// Unauthenticated indicates that the request does not have valid
	// authentication credentials for the operation.
	Err_UNAUTHENTICATED               Err = 16
	Err_DEBUG_ERROR                   Err = 17
	Err_BAD_STREAM_ID                 Err = 18
	Err_BAD_STREAM_CREATION_PARAMS    Err = 19
	Err_INTERNAL_ERROR_SWITCH         Err = 20
	Err_BAD_EVENT_ID                  Err = 21
	Err_BAD_EVENT_SIGNATURE           Err = 22
	Err_BAD_HASH_FORMAT               Err = 23
	Err_BAD_PREV_EVENTS               Err = 24
	Err_NO_EVENT_SPECIFIED            Err = 25
	Err_BAD_EVENT                     Err = 26
	Err_USER_CANT_POST                Err = 27
	Err_STREAM_BAD_HASHES             Err = 28
	Err_STREAM_EMPTY                  Err = 29
	Err_STREAM_BAD_EVENT              Err = 30
	Err_BAD_DELEGATE_SIG              Err = 31
	Err_BAD_PUBLIC_KEY                Err = 32
	Err_BAD_PAYLOAD                   Err = 33
	Err_BAD_HEX_STRING                Err = 34
	Err_BAD_EVENT_HASH                Err = 35
	Err_BAD_SYNC_COOKIE               Err = 36
	Err_DUPLICATE_EVENT               Err = 37
	Err_BAD_BLOCK                     Err = 38
	Err_STREAM_NO_INCEPTION_EVENT     Err = 39
	Err_BAD_BLOCK_NUMBER              Err = 40
	Err_BAD_MINIPOOL_SLOT             Err = 41
	Err_BAD_CREATOR_ADDRESS           Err = 42
	Err_STALE_DELEGATE                Err = 43
	Err_BAD_LINK_WALLET_BAD_SIGNATURE Err = 44
	Err_BAD_ROOT_KEY_ID               Err = 45
	Err_UNKNOWN_NODE                  Err = 46
)

// Enum value maps for Err.
var (
	Err_name = map[int32]string{
		0:  "ERR_UNSPECIFIED",
		1:  "CANCELED",
		2:  "UNKNOWN",
		3:  "INVALID_ARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATA_LOSS",
		16: "UNAUTHENTICATED",
		17: "DEBUG_ERROR",
		18: "BAD_STREAM_ID",
		19: "BAD_STREAM_CREATION_PARAMS",
		20: "INTERNAL_ERROR_SWITCH",
		21: "BAD_EVENT_ID",
		22: "BAD_EVENT_SIGNATURE",
		23: "BAD_HASH_FORMAT",
		24: "BAD_PREV_EVENTS",
		25: "NO_EVENT_SPECIFIED",
		26: "BAD_EVENT",
		27: "USER_CANT_POST",
		28: "STREAM_BAD_HASHES",
		29: "STREAM_EMPTY",
		30: "STREAM_BAD_EVENT",
		31: "BAD_DELEGATE_SIG",
		32: "BAD_PUBLIC_KEY",
		33: "BAD_PAYLOAD",
		34: "BAD_HEX_STRING",
		35: "BAD_EVENT_HASH",
		36: "BAD_SYNC_COOKIE",
		37: "DUPLICATE_EVENT",
		38: "BAD_BLOCK",
		39: "STREAM_NO_INCEPTION_EVENT",
		40: "BAD_BLOCK_NUMBER",
		41: "BAD_MINIPOOL_SLOT",
		42: "BAD_CREATOR_ADDRESS",
		43: "STALE_DELEGATE",
		44: "BAD_LINK_WALLET_BAD_SIGNATURE",
		45: "BAD_ROOT_KEY_ID",
		46: "UNKNOWN_NODE",
	}
	Err_value = map[string]int32{
		"ERR_UNSPECIFIED":               0,
		"CANCELED":                      1,
		"UNKNOWN":                       2,
		"INVALID_ARGUMENT":              3,
		"DEADLINE_EXCEEDED":             4,
		"NOT_FOUND":                     5,
		"ALREADY_EXISTS":                6,
		"PERMISSION_DENIED":             7,
		"RESOURCE_EXHAUSTED":            8,
		"FAILED_PRECONDITION":           9,
		"ABORTED":                       10,
		"OUT_OF_RANGE":                  11,
		"UNIMPLEMENTED":                 12,
		"INTERNAL":                      13,
		"UNAVAILABLE":                   14,
		"DATA_LOSS":                     15,
		"UNAUTHENTICATED":               16,
		"DEBUG_ERROR":                   17,
		"BAD_STREAM_ID":                 18,
		"BAD_STREAM_CREATION_PARAMS":    19,
		"INTERNAL_ERROR_SWITCH":         20,
		"BAD_EVENT_ID":                  21,
		"BAD_EVENT_SIGNATURE":           22,
		"BAD_HASH_FORMAT":               23,
		"BAD_PREV_EVENTS":               24,
		"NO_EVENT_SPECIFIED":            25,
		"BAD_EVENT":                     26,
		"USER_CANT_POST":                27,
		"STREAM_BAD_HASHES":             28,
		"STREAM_EMPTY":                  29,
		"STREAM_BAD_EVENT":              30,
		"BAD_DELEGATE_SIG":              31,
		"BAD_PUBLIC_KEY":                32,
		"BAD_PAYLOAD":                   33,
		"BAD_HEX_STRING":                34,
		"BAD_EVENT_HASH":                35,
		"BAD_SYNC_COOKIE":               36,
		"DUPLICATE_EVENT":               37,
		"BAD_BLOCK":                     38,
		"STREAM_NO_INCEPTION_EVENT":     39,
		"BAD_BLOCK_NUMBER":              40,
		"BAD_MINIPOOL_SLOT":             41,
		"BAD_CREATOR_ADDRESS":           42,
		"STALE_DELEGATE":                43,
		"BAD_LINK_WALLET_BAD_SIGNATURE": 44,
		"BAD_ROOT_KEY_ID":               45,
		"UNKNOWN_NODE":                  46,
	}
)

func (x Err) Enum() *Err {
	p := new(Err)
	*p = x
	return p
}

func (x Err) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Err) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[4].Descriptor()
}

func (Err) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[4]
}

func (x Err) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Err.Descriptor instead.
func (Err) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

// *
// Envelope contains serialized event, and its hash and signature.
// hash is used as event id. Subsequent events reference this event by hash.
type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Hash of event.
	// While hash can be recalculated from the event, having it here explicitely
	// makes it easier to work with event.
	// For the event to be valid, must match hash of event field.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// *
	// Signature.
	// For the event to be valid, signature must match event.creator_address
	// or be signed by the address from evant.delegate_sig.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Event     []byte `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Envelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Envelope) GetEvent() []byte {
	if x != nil {
		return x.Event
	}
	return nil
}

type StreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Address of the creator of the event.
	// For user - address of the user's Towns wallet.
	// For server - address of the server's keypair in staking smart contract.
	//
	// For the event to be valid:
	// If delegate_sig is present, creator_address must match delegate_sig.
	// If delegate_sig is not present, creator_address must match event signature in the Envelope.
	CreatorAddress []byte `protobuf:"bytes,1,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	// *
	// delegate_sig allows event to be signed by device keypair
	// which is linked to the user's Towns wallet.
	//
	// delegate_sig constains signature of the public key of the device keypair.
	// User's Towns wallet is used to produce this signature.
	//
	// If present, for the event to be valid:
	// 1. creator_address must match delegate_sig's signer public key
	// 2. delegate_sig should be the signature of Envelope.signature's public key.
	//
	// Server nodes sign node-produced events with their own keypair and do not
	// need to use delegate_sig.
	DelegateSig []byte `protobuf:"bytes,2,opt,name=delegate_sig,json=delegateSig,proto3" json:"delegate_sig,omitempty"`
	// * TODO: move salt to inception event
	Salt []byte `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// * Hashes of the preceding leaf events in the stream. Empty array for the inception event.
	PrevEvents [][]byte `protobuf:"bytes,4,rep,name=prev_events,json=prevEvents,proto3" json:"prev_events,omitempty"`
	// * CreatedAt is the time when the event was created.
	// NOTE: this value is set by clients and is not reliable for anything other than displaying
	// the value to the user. Never use this value to sort events from different users.
	CreatedAtEpocMs int64 `protobuf:"varint,5,opt,name=created_at_epoc_ms,json=createdAtEpocMs,proto3" json:"created_at_epoc_ms,omitempty"`
	// * Variable-type payload.
	// Payloads should obey the following rules:
	// - payloads should have their own unique type
	// - each payload should have a oneof content field
	// - each payload should have an inception field inside the content oneof
	// - each payload should have a unique Inception type
	// - payloads can't violate previous type recursively to inception payload
	//
	// Types that are assignable to Payload:
	//
	//	*StreamEvent_MiniblockHeader
	//	*StreamEvent_SpacePayload
	//	*StreamEvent_ChannelPayload
	//	*StreamEvent_UserPayload
	//	*StreamEvent_UserSettingsPayload
	//	*StreamEvent_UserDeviceKeyPayload
	Payload isStreamEvent_Payload `protobuf_oneof:"payload"`
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent.ProtoReflect.Descriptor instead.
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *StreamEvent) GetCreatorAddress() []byte {
	if x != nil {
		return x.CreatorAddress
	}
	return nil
}

func (x *StreamEvent) GetDelegateSig() []byte {
	if x != nil {
		return x.DelegateSig
	}
	return nil
}

func (x *StreamEvent) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *StreamEvent) GetPrevEvents() [][]byte {
	if x != nil {
		return x.PrevEvents
	}
	return nil
}

func (x *StreamEvent) GetCreatedAtEpocMs() int64 {
	if x != nil {
		return x.CreatedAtEpocMs
	}
	return 0
}

func (m *StreamEvent) GetPayload() isStreamEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamEvent) GetMiniblockHeader() *MiniblockHeader {
	if x, ok := x.GetPayload().(*StreamEvent_MiniblockHeader); ok {
		return x.MiniblockHeader
	}
	return nil
}

func (x *StreamEvent) GetSpacePayload() *SpacePayload {
	if x, ok := x.GetPayload().(*StreamEvent_SpacePayload); ok {
		return x.SpacePayload
	}
	return nil
}

func (x *StreamEvent) GetChannelPayload() *ChannelPayload {
	if x, ok := x.GetPayload().(*StreamEvent_ChannelPayload); ok {
		return x.ChannelPayload
	}
	return nil
}

func (x *StreamEvent) GetUserPayload() *UserPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserPayload); ok {
		return x.UserPayload
	}
	return nil
}

func (x *StreamEvent) GetUserSettingsPayload() *UserSettingsPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserSettingsPayload); ok {
		return x.UserSettingsPayload
	}
	return nil
}

func (x *StreamEvent) GetUserDeviceKeyPayload() *UserDeviceKeyPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserDeviceKeyPayload); ok {
		return x.UserDeviceKeyPayload
	}
	return nil
}

type isStreamEvent_Payload interface {
	isStreamEvent_Payload()
}

type StreamEvent_MiniblockHeader struct {
	MiniblockHeader *MiniblockHeader `protobuf:"bytes,100,opt,name=miniblock_header,json=miniblockHeader,proto3,oneof"`
}

type StreamEvent_SpacePayload struct {
	SpacePayload *SpacePayload `protobuf:"bytes,101,opt,name=space_payload,json=spacePayload,proto3,oneof"`
}

type StreamEvent_ChannelPayload struct {
	ChannelPayload *ChannelPayload `protobuf:"bytes,102,opt,name=channel_payload,json=channelPayload,proto3,oneof"`
}

type StreamEvent_UserPayload struct {
	UserPayload *UserPayload `protobuf:"bytes,103,opt,name=user_payload,json=userPayload,proto3,oneof"`
}

type StreamEvent_UserSettingsPayload struct {
	UserSettingsPayload *UserSettingsPayload `protobuf:"bytes,104,opt,name=user_settings_payload,json=userSettingsPayload,proto3,oneof"`
}

type StreamEvent_UserDeviceKeyPayload struct {
	UserDeviceKeyPayload *UserDeviceKeyPayload `protobuf:"bytes,105,opt,name=user_device_key_payload,json=userDeviceKeyPayload,proto3,oneof"`
}

func (*StreamEvent_MiniblockHeader) isStreamEvent_Payload() {}

func (*StreamEvent_SpacePayload) isStreamEvent_Payload() {}

func (*StreamEvent_ChannelPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserSettingsPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserDeviceKeyPayload) isStreamEvent_Payload() {}

// Represents a miniblock header.
// MiniblockHeader is a special event that forms a block from set of the stream events.
// Hash of the serialized StreamEvent containing MiniblockHeader is used as a block hash.
type MiniblockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Miniblock number.
	// 0 for genesis block.
	// Must be 1 greater than the previous block number.
	MiniblockNum int64 `protobuf:"varint,1,opt,name=miniblock_num,json=miniblockNum,proto3" json:"miniblock_num,omitempty"`
	// Hash of the previous block.
	PrevMiniblockHash []byte `protobuf:"bytes,2,opt,name=prev_miniblock_hash,json=prevMiniblockHash,proto3" json:"prev_miniblock_hash,omitempty"`
	// Timestamp of the block.
	// Must be greater than the previous block timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Hashes of the events included in the block.
	EventHashes [][]byte `protobuf:"bytes,4,rep,name=event_hashes,json=eventHashes,proto3" json:"event_hashes,omitempty"`
	// Snapshot of the state at the end of the block.
	Snapshot *Snapshot `protobuf:"bytes,5,opt,name=snapshot,proto3,oneof" json:"snapshot,omitempty"`
	// stream payloads are required to have a content field
	//
	// Types that are assignable to Content:
	//
	//	*MiniblockHeader_None
	Content isMiniblockHeader_Content `protobuf_oneof:"content"`
}

func (x *MiniblockHeader) Reset() {
	*x = MiniblockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniblockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniblockHeader) ProtoMessage() {}

func (x *MiniblockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniblockHeader.ProtoReflect.Descriptor instead.
func (*MiniblockHeader) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *MiniblockHeader) GetMiniblockNum() int64 {
	if x != nil {
		return x.MiniblockNum
	}
	return 0
}

func (x *MiniblockHeader) GetPrevMiniblockHash() []byte {
	if x != nil {
		return x.PrevMiniblockHash
	}
	return nil
}

func (x *MiniblockHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MiniblockHeader) GetEventHashes() [][]byte {
	if x != nil {
		return x.EventHashes
	}
	return nil
}

func (x *MiniblockHeader) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (m *MiniblockHeader) GetContent() isMiniblockHeader_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *MiniblockHeader) GetNone() *emptypb.Empty {
	if x, ok := x.GetContent().(*MiniblockHeader_None); ok {
		return x.None
	}
	return nil
}

type isMiniblockHeader_Content interface {
	isMiniblockHeader_Content()
}

type MiniblockHeader_None struct {
	None *emptypb.Empty `protobuf:"bytes,100,opt,name=none,proto3,oneof"`
}

func (*MiniblockHeader_None) isMiniblockHeader_Content() {}

// Contains all events in the miniblock, and the header event.
// Events must be in the same order as in the header.
type Miniblock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Header *Envelope   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *Miniblock) Reset() {
	*x = Miniblock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Miniblock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Miniblock) ProtoMessage() {}

func (x *Miniblock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Miniblock.ProtoReflect.Descriptor instead.
func (*Miniblock) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *Miniblock) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Miniblock) GetHeader() *Envelope {
	if x != nil {
		return x.Header
	}
	return nil
}

// Contains a snapshot of all state events up to the most recent miniblock
type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Snapshot data specific for each stream type.
	//
	// Types that are assignable to Content:
	//
	//	*Snapshot_SpaceContent
	//	*Snapshot_ChannelContent
	//	*Snapshot_UserContent
	//	*Snapshot_UserSettingsContent
	//	*Snapshot_UserDeviceKeyContent
	Content isSnapshot_Content `protobuf_oneof:"content"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

func (m *Snapshot) GetContent() isSnapshot_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Snapshot) GetSpaceContent() *SpacePayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_SpaceContent); ok {
		return x.SpaceContent
	}
	return nil
}

func (x *Snapshot) GetChannelContent() *ChannelPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_ChannelContent); ok {
		return x.ChannelContent
	}
	return nil
}

func (x *Snapshot) GetUserContent() *UserPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_UserContent); ok {
		return x.UserContent
	}
	return nil
}

func (x *Snapshot) GetUserSettingsContent() *UserSettingsPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_UserSettingsContent); ok {
		return x.UserSettingsContent
	}
	return nil
}

func (x *Snapshot) GetUserDeviceKeyContent() *UserDeviceKeyPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_UserDeviceKeyContent); ok {
		return x.UserDeviceKeyContent
	}
	return nil
}

type isSnapshot_Content interface {
	isSnapshot_Content()
}

type Snapshot_SpaceContent struct {
	SpaceContent *SpacePayload_Snapshot `protobuf:"bytes,101,opt,name=space_content,json=spaceContent,proto3,oneof"`
}

type Snapshot_ChannelContent struct {
	ChannelContent *ChannelPayload_Snapshot `protobuf:"bytes,102,opt,name=channel_content,json=channelContent,proto3,oneof"`
}

type Snapshot_UserContent struct {
	UserContent *UserPayload_Snapshot `protobuf:"bytes,103,opt,name=user_content,json=userContent,proto3,oneof"`
}

type Snapshot_UserSettingsContent struct {
	UserSettingsContent *UserSettingsPayload_Snapshot `protobuf:"bytes,104,opt,name=user_settings_content,json=userSettingsContent,proto3,oneof"`
}

type Snapshot_UserDeviceKeyContent struct {
	UserDeviceKeyContent *UserDeviceKeyPayload_Snapshot `protobuf:"bytes,105,opt,name=user_device_key_content,json=userDeviceKeyContent,proto3,oneof"`
}

func (*Snapshot_SpaceContent) isSnapshot_Content() {}

func (*Snapshot_ChannelContent) isSnapshot_Content() {}

func (*Snapshot_UserContent) isSnapshot_Content() {}

func (*Snapshot_UserSettingsContent) isSnapshot_Content() {}

func (*Snapshot_UserDeviceKeyContent) isSnapshot_Content() {}

// *
// Derived event is produces by server when there should be additional event to compliment
// received event. For example, when user joins a space through event in the space stream, server will produce a derived event
// in a user stream to indicate that user joined a particual space.
//
// EventRef is used to reference the event that caused the derived event to be produced.
type EventRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId  string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *EventRef) Reset() {
	*x = EventRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRef) ProtoMessage() {}

func (x *EventRef) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRef.ProtoReflect.Descriptor instead.
func (*EventRef) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *EventRef) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *EventRef) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *EventRef) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// *
// StreamSettings is a part of inception payload for each stream type.
type StreamSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This setting controls block production rate for a given stream.
	// It is used for testing and is used only by nodes running in test mode.
	MiniblockTimeMs uint64 `protobuf:"varint,1,opt,name=miniblock_time_ms,json=miniblockTimeMs,proto3" json:"miniblock_time_ms,omitempty"`
	// Minimum number of events before we take a snapshot
	MinEventsPerSnapshot int32 `protobuf:"varint,2,opt,name=min_events_per_snapshot,json=minEventsPerSnapshot,proto3" json:"min_events_per_snapshot,omitempty"`
}

func (x *StreamSettings) Reset() {
	*x = StreamSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSettings) ProtoMessage() {}

func (x *StreamSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSettings.ProtoReflect.Descriptor instead.
func (*StreamSettings) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *StreamSettings) GetMiniblockTimeMs() uint64 {
	if x != nil {
		return x.MiniblockTimeMs
	}
	return 0
}

func (x *StreamSettings) GetMinEventsPerSnapshot() int32 {
	if x != nil {
		return x.MinEventsPerSnapshot
	}
	return 0
}

type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     MembershipOp `protobuf:"varint,1,opt,name=op,proto3,enum=casablanca.MembershipOp" json:"op,omitempty"`
	UserId string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *Membership) GetOp() MembershipOp {
	if x != nil {
		return x.Op
	}
	return MembershipOp_SO_UNSPECIFIED
}

func (x *Membership) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserPayload_Inception_
	//	*UserPayload_UserMembership_
	//	*UserPayload_ToDevice_
	Content isUserPayload_Content `protobuf_oneof:"content"`
}

func (x *UserPayload) Reset() {
	*x = UserPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload) ProtoMessage() {}

func (x *UserPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload.ProtoReflect.Descriptor instead.
func (*UserPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8}
}

func (m *UserPayload) GetContent() isUserPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserPayload) GetInception() *UserPayload_Inception {
	if x, ok := x.GetContent().(*UserPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserPayload) GetUserMembership() *UserPayload_UserMembership {
	if x, ok := x.GetContent().(*UserPayload_UserMembership_); ok {
		return x.UserMembership
	}
	return nil
}

func (x *UserPayload) GetToDevice() *UserPayload_ToDevice {
	if x, ok := x.GetContent().(*UserPayload_ToDevice_); ok {
		return x.ToDevice
	}
	return nil
}

type isUserPayload_Content interface {
	isUserPayload_Content()
}

type UserPayload_Inception_ struct {
	Inception *UserPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserPayload_UserMembership_ struct {
	UserMembership *UserPayload_UserMembership `protobuf:"bytes,2,opt,name=user_membership,json=userMembership,proto3,oneof"`
}

type UserPayload_ToDevice_ struct {
	ToDevice *UserPayload_ToDevice `protobuf:"bytes,3,opt,name=to_device,json=toDevice,proto3,oneof"`
}

func (*UserPayload_Inception_) isUserPayload_Content() {}

func (*UserPayload_UserMembership_) isUserPayload_Content() {}

func (*UserPayload_ToDevice_) isUserPayload_Content() {}

type SpacePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*SpacePayload_Inception_
	//	*SpacePayload_Channel_
	//	*SpacePayload_Membership
	Content isSpacePayload_Content `protobuf_oneof:"content"`
}

func (x *SpacePayload) Reset() {
	*x = SpacePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload) ProtoMessage() {}

func (x *SpacePayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload.ProtoReflect.Descriptor instead.
func (*SpacePayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9}
}

func (m *SpacePayload) GetContent() isSpacePayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *SpacePayload) GetInception() *SpacePayload_Inception {
	if x, ok := x.GetContent().(*SpacePayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *SpacePayload) GetChannel() *SpacePayload_Channel {
	if x, ok := x.GetContent().(*SpacePayload_Channel_); ok {
		return x.Channel
	}
	return nil
}

func (x *SpacePayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*SpacePayload_Membership); ok {
		return x.Membership
	}
	return nil
}

type isSpacePayload_Content interface {
	isSpacePayload_Content()
}

type SpacePayload_Inception_ struct {
	Inception *SpacePayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type SpacePayload_Channel_ struct {
	Channel *SpacePayload_Channel `protobuf:"bytes,2,opt,name=channel,proto3,oneof"`
}

type SpacePayload_Membership struct {
	Membership *Membership `protobuf:"bytes,3,opt,name=membership,proto3,oneof"`
}

func (*SpacePayload_Inception_) isSpacePayload_Content() {}

func (*SpacePayload_Channel_) isSpacePayload_Content() {}

func (*SpacePayload_Membership) isSpacePayload_Content() {}

type EncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Ciphertext of the encryption envelope.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// *
	// Encryption algorithm  used to encrypt this event.
	Algorithm *string `protobuf:"bytes,2,opt,name=algorithm,proto3,oneof" json:"algorithm,omitempty"`
	// *
	// Sender device public key identifying the sender's device.
	SenderKey *string `protobuf:"bytes,3,opt,name=sender_key,json=senderKey,proto3,oneof" json:"sender_key,omitempty"`
	// *
	// Sender's device id.
	DeviceId *string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
	// *
	// The ID of the session used to encrypt the message.
	SessionId *string `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
}

func (x *EncryptedData) Reset() {
	*x = EncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedData) ProtoMessage() {}

func (x *EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedData.ProtoReflect.Descriptor instead.
func (*EncryptedData) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *EncryptedData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EncryptedData) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

func (x *EncryptedData) GetSenderKey() string {
	if x != nil && x.SenderKey != nil {
		return *x.SenderKey
	}
	return ""
}

func (x *EncryptedData) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *EncryptedData) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type EncryptedDeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Mapping from device identifier to encryption envelope.
	Ciphertext map[string]*EncryptedMessageEnvelope `protobuf:"bytes,1,rep,name=ciphertext,proto3" json:"ciphertext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// *
	// Encryption algorithm  used to encrypt this event.
	Algorithm *string `protobuf:"bytes,2,opt,name=algorithm,proto3,oneof" json:"algorithm,omitempty"`
}

func (x *EncryptedDeviceData) Reset() {
	*x = EncryptedDeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedDeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedDeviceData) ProtoMessage() {}

func (x *EncryptedDeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedDeviceData.ProtoReflect.Descriptor instead.
func (*EncryptedDeviceData) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *EncryptedDeviceData) GetCiphertext() map[string]*EncryptedMessageEnvelope {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *EncryptedDeviceData) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

type EncryptedMessageEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32 `protobuf:"varint,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// *
	// Ciphertext of the encryption envelope.
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *EncryptedMessageEnvelope) Reset() {
	*x = EncryptedMessageEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedMessageEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMessageEnvelope) ProtoMessage() {}

func (x *EncryptedMessageEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMessageEnvelope.ProtoReflect.Descriptor instead.
func (*EncryptedMessageEnvelope) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *EncryptedMessageEnvelope) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *EncryptedMessageEnvelope) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type ChannelPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*ChannelPayload_Inception_
	//	*ChannelPayload_Message
	//	*ChannelPayload_Membership
	//	*ChannelPayload_Receipt_
	Content isChannelPayload_Content `protobuf_oneof:"content"`
}

func (x *ChannelPayload) Reset() {
	*x = ChannelPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload) ProtoMessage() {}

func (x *ChannelPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload.ProtoReflect.Descriptor instead.
func (*ChannelPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13}
}

func (m *ChannelPayload) GetContent() isChannelPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ChannelPayload) GetInception() *ChannelPayload_Inception {
	if x, ok := x.GetContent().(*ChannelPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *ChannelPayload) GetMessage() *EncryptedData {
	if x, ok := x.GetContent().(*ChannelPayload_Message); ok {
		return x.Message
	}
	return nil
}

func (x *ChannelPayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*ChannelPayload_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *ChannelPayload) GetReceipt() *ChannelPayload_Receipt {
	if x, ok := x.GetContent().(*ChannelPayload_Receipt_); ok {
		return x.Receipt
	}
	return nil
}

type isChannelPayload_Content interface {
	isChannelPayload_Content()
}

type ChannelPayload_Inception_ struct {
	Inception *ChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type ChannelPayload_Message struct {
	Message *EncryptedData `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type ChannelPayload_Membership struct {
	Membership *Membership `protobuf:"bytes,3,opt,name=membership,proto3,oneof"`
}

type ChannelPayload_Receipt_ struct {
	Receipt *ChannelPayload_Receipt `protobuf:"bytes,4,opt,name=receipt,proto3,oneof"`
}

func (*ChannelPayload_Inception_) isChannelPayload_Content() {}

func (*ChannelPayload_Message) isChannelPayload_Content() {}

func (*ChannelPayload_Membership) isChannelPayload_Content() {}

func (*ChannelPayload_Receipt_) isChannelPayload_Content() {}

type UserSettingsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserSettingsPayload_Inception_
	//	*UserSettingsPayload_FullyReadMarkers_
	Content isUserSettingsPayload_Content `protobuf_oneof:"content"`
}

func (x *UserSettingsPayload) Reset() {
	*x = UserSettingsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload) ProtoMessage() {}

func (x *UserSettingsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{14}
}

func (m *UserSettingsPayload) GetContent() isUserSettingsPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserSettingsPayload) GetInception() *UserSettingsPayload_Inception {
	if x, ok := x.GetContent().(*UserSettingsPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserSettingsPayload) GetFullyReadMarkers() *UserSettingsPayload_FullyReadMarkers {
	if x, ok := x.GetContent().(*UserSettingsPayload_FullyReadMarkers_); ok {
		return x.FullyReadMarkers
	}
	return nil
}

type isUserSettingsPayload_Content interface {
	isUserSettingsPayload_Content()
}

type UserSettingsPayload_Inception_ struct {
	Inception *UserSettingsPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserSettingsPayload_FullyReadMarkers_ struct {
	FullyReadMarkers *UserSettingsPayload_FullyReadMarkers `protobuf:"bytes,2,opt,name=fully_read_markers,json=fullyReadMarkers,proto3,oneof"`
}

func (*UserSettingsPayload_Inception_) isUserSettingsPayload_Content() {}

func (*UserSettingsPayload_FullyReadMarkers_) isUserSettingsPayload_Content() {}

type UserDeviceKeyPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserDeviceKeyPayload_Inception_
	//	*UserDeviceKeyPayload_UserDeviceKey_
	Content isUserDeviceKeyPayload_Content `protobuf_oneof:"content"`
}

func (x *UserDeviceKeyPayload) Reset() {
	*x = UserDeviceKeyPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload) ProtoMessage() {}

func (x *UserDeviceKeyPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{15}
}

func (m *UserDeviceKeyPayload) GetContent() isUserDeviceKeyPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserDeviceKeyPayload) GetInception() *UserDeviceKeyPayload_Inception {
	if x, ok := x.GetContent().(*UserDeviceKeyPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserDeviceKeyPayload) GetUserDeviceKey() *UserDeviceKeyPayload_UserDeviceKey {
	if x, ok := x.GetContent().(*UserDeviceKeyPayload_UserDeviceKey_); ok {
		return x.UserDeviceKey
	}
	return nil
}

type isUserDeviceKeyPayload_Content interface {
	isUserDeviceKeyPayload_Content()
}

type UserDeviceKeyPayload_Inception_ struct {
	Inception *UserDeviceKeyPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserDeviceKeyPayload_UserDeviceKey_ struct {
	UserDeviceKey *UserDeviceKeyPayload_UserDeviceKey `protobuf:"bytes,2,opt,name=user_device_key,json=userDeviceKey,proto3,oneof"`
}

func (*UserDeviceKeyPayload_Inception_) isUserDeviceKeyPayload_Content() {}

func (*UserDeviceKeyPayload_UserDeviceKey_) isUserDeviceKeyPayload_Content() {}

// *
// DeviceKeys are used to store public identity keys and signatures for a particular
// user's device.
//
// device_id: unique identifier for the device - River hash over RDK public part.
// algorithms: encryption algorithms supported by the device.
// keys: public identity keys (signing keys) for the device with property in format <algorithm>:<device_id>.
//
//	Keys should be encoded as specified by key algorithm.
//
// signatures: map from <algorithm>:<device_id> to signature.
type DeviceKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string            `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Algorithms []string          `protobuf:"bytes,2,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	Keys       map[string]string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Signatures map[string]string `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceKeys) Reset() {
	*x = DeviceKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceKeys) ProtoMessage() {}

func (x *DeviceKeys) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceKeys.ProtoReflect.Descriptor instead.
func (*DeviceKeys) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceKeys) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceKeys) GetAlgorithms() []string {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

func (x *DeviceKeys) GetKeys() map[string]string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeviceKeys) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// *
// FallbackKeys are used to store "pre-key" messages for a particular user's device.
//
// algo_key_id: map from <algorithm>:<key_id> to Key.
type FallbackKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgoKeyId map[string]*Key `protobuf:"bytes,1,rep,name=algo_key_id,json=algoKeyId,proto3" json:"algo_key_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FallbackKeys) Reset() {
	*x = FallbackKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackKeys) ProtoMessage() {}

func (x *FallbackKeys) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackKeys.ProtoReflect.Descriptor instead.
func (*FallbackKeys) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{17}
}

func (x *FallbackKeys) GetAlgoKeyId() map[string]*Key {
	if x != nil {
		return x.AlgoKeyId
	}
	return nil
}

// *
// Key is used to store fallback keys and depending on the algorithm signatures
// that are formatted as <algorithm>:<device_id> mapped to <signature>
//
// key: key value
// signatures: map from <algorithm>:<device_id> to signature for given key.
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Signatures map[string]string `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{18}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Key) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SyncCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId     string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	MiniblockNum int64  `protobuf:"varint,2,opt,name=miniblock_num,json=miniblockNum,proto3" json:"miniblock_num,omitempty"`
	// TODO: change to prev_miniblock_hash
	MiniblockHash []byte `protobuf:"bytes,3,opt,name=miniblock_hash,json=miniblockHash,proto3" json:"miniblock_hash,omitempty"`
	// minipool_instance is a unique identifier of a cookie generator.
	// minipool_slots are not necessary consistent across instances or even restarts.
	// If minipool_instance is mismatching, then minipool_slot is ignored and stream is synced from the end of the referenced miniblock_num.
	// This is responsibility of the client to ignore duplicate events.
	MinipoolInstance string `protobuf:"bytes,4,opt,name=minipool_instance,json=minipoolInstance,proto3" json:"minipool_instance,omitempty"`
	MinipoolSlot     int64  `protobuf:"varint,5,opt,name=minipool_slot,json=minipoolSlot,proto3" json:"minipool_slot,omitempty"`
}

func (x *SyncCookie) Reset() {
	*x = SyncCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCookie) ProtoMessage() {}

func (x *SyncCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCookie.ProtoReflect.Descriptor instead.
func (*SyncCookie) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{19}
}

func (x *SyncCookie) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SyncCookie) GetMiniblockNum() int64 {
	if x != nil {
		return x.MiniblockNum
	}
	return 0
}

func (x *SyncCookie) GetMiniblockHash() []byte {
	if x != nil {
		return x.MiniblockHash
	}
	return nil
}

func (x *SyncCookie) GetMinipoolInstance() string {
	if x != nil {
		return x.MinipoolInstance
	}
	return ""
}

func (x *SyncCookie) GetMinipoolSlot() int64 {
	if x != nil {
		return x.MinipoolSlot
	}
	return 0
}

type StreamAndCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// events in the current minipool
	Events             []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextSyncCookie     *SyncCookie `protobuf:"bytes,2,opt,name=next_sync_cookie,json=nextSyncCookie,proto3" json:"next_sync_cookie,omitempty"`
	OriginalSyncCookie *SyncCookie `protobuf:"bytes,3,opt,name=original_sync_cookie,json=originalSyncCookie,proto3" json:"original_sync_cookie,omitempty"` // TODO: rename to start_sync_cookie
	StreamId           string      `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *StreamAndCookie) Reset() {
	*x = StreamAndCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAndCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAndCookie) ProtoMessage() {}

func (x *StreamAndCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAndCookie.ProtoReflect.Descriptor instead.
func (*StreamAndCookie) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{20}
}

func (x *StreamAndCookie) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *StreamAndCookie) GetNextSyncCookie() *SyncCookie {
	if x != nil {
		return x.NextSyncCookie
	}
	return nil
}

func (x *StreamAndCookie) GetOriginalSyncCookie() *SyncCookie {
	if x != nil {
		return x.OriginalSyncCookie
	}
	return nil
}

func (x *StreamAndCookie) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type CreateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events   []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	StreamId string      `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // stream_id should match the stream_id in the inception payload of the first event
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{21}
}

func (x *CreateStreamRequest) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CreateStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type CreateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all events in current minipool and cookie allowing to sync from the end of the stream
	Stream *StreamAndCookie `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// all blocks since the latest snapshot, miniblocks[0].header is the latest snapshot
	Miniblocks []*Miniblock `protobuf:"bytes,2,rep,name=miniblocks,proto3" json:"miniblocks,omitempty"`
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{22}
}

func (x *CreateStreamResponse) GetStream() *StreamAndCookie {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *CreateStreamResponse) GetMiniblocks() []*Miniblock {
	if x != nil {
		return x.Miniblocks
	}
	return nil
}

type GetStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{23}
}

func (x *GetStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type GetStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all events in current minipool and cookie allowing to sync from the end of the stream
	Stream *StreamAndCookie `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// all blocks since the latest snapshot, miniblocks[0].header is the latest snapshot
	Miniblocks []*Miniblock `protobuf:"bytes,2,rep,name=miniblocks,proto3" json:"miniblocks,omitempty"`
}

func (x *GetStreamResponse) Reset() {
	*x = GetStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamResponse) ProtoMessage() {}

func (x *GetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamResponse.ProtoReflect.Descriptor instead.
func (*GetStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{24}
}

func (x *GetStreamResponse) GetStream() *StreamAndCookie {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *GetStreamResponse) GetMiniblocks() []*Miniblock {
	if x != nil {
		return x.Miniblocks
	}
	return nil
}

type GetMiniblocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId      string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	FromInclusive int64  `protobuf:"varint,2,opt,name=fromInclusive,proto3" json:"fromInclusive,omitempty"`
	ToExclusive   int64  `protobuf:"varint,3,opt,name=toExclusive,proto3" json:"toExclusive,omitempty"`
}

func (x *GetMiniblocksRequest) Reset() {
	*x = GetMiniblocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiniblocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiniblocksRequest) ProtoMessage() {}

func (x *GetMiniblocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiniblocksRequest.ProtoReflect.Descriptor instead.
func (*GetMiniblocksRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{25}
}

func (x *GetMiniblocksRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *GetMiniblocksRequest) GetFromInclusive() int64 {
	if x != nil {
		return x.FromInclusive
	}
	return 0
}

func (x *GetMiniblocksRequest) GetToExclusive() int64 {
	if x != nil {
		return x.ToExclusive
	}
	return 0
}

type GetMiniblocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miniblocks []*Miniblock `protobuf:"bytes,1,rep,name=miniblocks,proto3" json:"miniblocks,omitempty"`
	// terminus: true if there are no more blocks to fetch because they've been garbage collected, or you've reached block 0
	Terminus bool `protobuf:"varint,2,opt,name=terminus,proto3" json:"terminus,omitempty"`
}

func (x *GetMiniblocksResponse) Reset() {
	*x = GetMiniblocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiniblocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiniblocksResponse) ProtoMessage() {}

func (x *GetMiniblocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiniblocksResponse.ProtoReflect.Descriptor instead.
func (*GetMiniblocksResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{26}
}

func (x *GetMiniblocksResponse) GetMiniblocks() []*Miniblock {
	if x != nil {
		return x.Miniblocks
	}
	return nil
}

func (x *GetMiniblocksResponse) GetTerminus() bool {
	if x != nil {
		return x.Terminus
	}
	return false
}

type AddEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string    `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Event    *Envelope `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *AddEventRequest) Reset() {
	*x = AddEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventRequest) ProtoMessage() {}

func (x *AddEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventRequest.ProtoReflect.Descriptor instead.
func (*AddEventRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{27}
}

func (x *AddEventRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *AddEventRequest) GetEvent() *Envelope {
	if x != nil {
		return x.Event
	}
	return nil
}

type AddEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEventResponse) Reset() {
	*x = AddEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventResponse) ProtoMessage() {}

func (x *AddEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventResponse.ProtoReflect.Descriptor instead.
func (*AddEventResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{28}
}

type SyncStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncPos []*SyncCookie `protobuf:"bytes,1,rep,name=sync_pos,json=syncPos,proto3" json:"sync_pos,omitempty"`
}

func (x *SyncStreamsRequest) Reset() {
	*x = SyncStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreamsRequest) ProtoMessage() {}

func (x *SyncStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreamsRequest.ProtoReflect.Descriptor instead.
func (*SyncStreamsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{29}
}

func (x *SyncStreamsRequest) GetSyncPos() []*SyncCookie {
	if x != nil {
		return x.SyncPos
	}
	return nil
}

type SyncStreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams []*StreamAndCookie `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *SyncStreamsResponse) Reset() {
	*x = SyncStreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreamsResponse) ProtoMessage() {}

func (x *SyncStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreamsResponse.ProtoReflect.Descriptor instead.
func (*SyncStreamsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{30}
}

func (x *SyncStreamsResponse) GetStreams() []*StreamAndCookie {
	if x != nil {
		return x.Streams
	}
	return nil
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug string `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{31}
}

func (x *InfoRequest) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graffiti string `protobuf:"bytes,1,opt,name=graffiti,proto3" json:"graffiti,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{32}
}

func (x *InfoResponse) GetGraffiti() string {
	if x != nil {
		return x.Graffiti
	}
	return ""
}

type LinkWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootKeyId        string `protobuf:"bytes,1,opt,name=root_key_id,json=rootKeyId,proto3" json:"root_key_id,omitempty"`
	WalletAddress    string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	RootKeySignature string `protobuf:"bytes,3,opt,name=root_key_signature,json=rootKeySignature,proto3" json:"root_key_signature,omitempty"`
	WalletSignature  string `protobuf:"bytes,4,opt,name=wallet_signature,json=walletSignature,proto3" json:"wallet_signature,omitempty"`
}

func (x *LinkWalletRequest) Reset() {
	*x = LinkWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkWalletRequest) ProtoMessage() {}

func (x *LinkWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkWalletRequest.ProtoReflect.Descriptor instead.
func (*LinkWalletRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{33}
}

func (x *LinkWalletRequest) GetRootKeyId() string {
	if x != nil {
		return x.RootKeyId
	}
	return ""
}

func (x *LinkWalletRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *LinkWalletRequest) GetRootKeySignature() string {
	if x != nil {
		return x.RootKeySignature
	}
	return ""
}

func (x *LinkWalletRequest) GetWalletSignature() string {
	if x != nil {
		return x.WalletSignature
	}
	return ""
}

type LinkWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkWalletResponse) Reset() {
	*x = LinkWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkWalletResponse) ProtoMessage() {}

func (x *LinkWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkWalletResponse.ProtoReflect.Descriptor instead.
func (*LinkWalletResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{34}
}

type GetLinkedWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootKeyId string `protobuf:"bytes,1,opt,name=root_key_id,json=rootKeyId,proto3" json:"root_key_id,omitempty"`
}

func (x *GetLinkedWalletsRequest) Reset() {
	*x = GetLinkedWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinkedWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkedWalletsRequest) ProtoMessage() {}

func (x *GetLinkedWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkedWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetLinkedWalletsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{35}
}

func (x *GetLinkedWalletsRequest) GetRootKeyId() string {
	if x != nil {
		return x.RootKeyId
	}
	return ""
}

type GetLinkedWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddresses []string `protobuf:"bytes,1,rep,name=wallet_addresses,json=walletAddresses,proto3" json:"wallet_addresses,omitempty"`
}

func (x *GetLinkedWalletsResponse) Reset() {
	*x = GetLinkedWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinkedWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkedWalletsResponse) ProtoMessage() {}

func (x *GetLinkedWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkedWalletsResponse.ProtoReflect.Descriptor instead.
func (*GetLinkedWalletsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{36}
}

func (x *GetLinkedWalletsResponse) GetWalletAddresses() []string {
	if x != nil {
		return x.WalletAddresses
	}
	return nil
}

type UserPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *UserPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// streamId: UserMembership
	Memberships map[string]*UserPayload_UserMembership `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserPayload_Snapshot) Reset() {
	*x = UserPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_Snapshot) ProtoMessage() {}

func (x *UserPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*UserPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UserPayload_Snapshot) GetInception() *UserPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *UserPayload_Snapshot) GetMemberships() map[string]*UserPayload_UserMembership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type UserPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UserPayload_Inception) Reset() {
	*x = UserPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_Inception) ProtoMessage() {}

func (x *UserPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UserPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserPayload_UserMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId    string       `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	OriginEvent *EventRef    `protobuf:"bytes,2,opt,name=origin_event,json=originEvent,proto3" json:"origin_event,omitempty"`
	InviterId   string       `protobuf:"bytes,3,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	Op          MembershipOp `protobuf:"varint,4,opt,name=op,proto3,enum=casablanca.MembershipOp" json:"op,omitempty"`
}

func (x *UserPayload_UserMembership) Reset() {
	*x = UserPayload_UserMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_UserMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_UserMembership) ProtoMessage() {}

func (x *UserPayload_UserMembership) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_UserMembership.ProtoReflect.Descriptor instead.
func (*UserPayload_UserMembership) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 2}
}

func (x *UserPayload_UserMembership) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserPayload_UserMembership) GetOriginEvent() *EventRef {
	if x != nil {
		return x.OriginEvent
	}
	return nil
}

func (x *UserPayload_UserMembership) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *UserPayload_UserMembership) GetOp() MembershipOp {
	if x != nil {
		return x.Op
	}
	return MembershipOp_SO_UNSPECIFIED
}

type UserPayload_ToDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op        ToDeviceOp           `protobuf:"varint,1,opt,name=op,proto3,enum=casablanca.ToDeviceOp" json:"op,omitempty"`
	Message   *EncryptedDeviceData `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	DeviceKey string               `protobuf:"bytes,3,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"`
	SenderKey string               `protobuf:"bytes,4,opt,name=sender_key,json=senderKey,proto3" json:"sender_key,omitempty"`
}

func (x *UserPayload_ToDevice) Reset() {
	*x = UserPayload_ToDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_ToDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_ToDevice) ProtoMessage() {}

func (x *UserPayload_ToDevice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_ToDevice.ProtoReflect.Descriptor instead.
func (*UserPayload_ToDevice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 3}
}

func (x *UserPayload_ToDevice) GetOp() ToDeviceOp {
	if x != nil {
		return x.Op
	}
	return ToDeviceOp_TDO_UNSPECIFIED
}

func (x *UserPayload_ToDevice) GetMessage() *EncryptedDeviceData {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *UserPayload_ToDevice) GetDeviceKey() string {
	if x != nil {
		return x.DeviceKey
	}
	return ""
}

func (x *UserPayload_ToDevice) GetSenderKey() string {
	if x != nil {
		return x.SenderKey
	}
	return ""
}

type SpacePayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *SpacePayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// streamId: Channel
	Channels map[string]*SpacePayload_Channel `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// userId: Membership
	Memberships map[string]*Membership `protobuf:"bytes,3,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpacePayload_Snapshot) Reset() {
	*x = SpacePayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Snapshot) ProtoMessage() {}

func (x *SpacePayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Snapshot.ProtoReflect.Descriptor instead.
func (*SpacePayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SpacePayload_Snapshot) GetInception() *SpacePayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *SpacePayload_Snapshot) GetChannels() map[string]*SpacePayload_Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *SpacePayload_Snapshot) GetMemberships() map[string]*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type SpacePayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *SpacePayload_Inception) Reset() {
	*x = SpacePayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Inception) ProtoMessage() {}

func (x *SpacePayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Inception.ProtoReflect.Descriptor instead.
func (*SpacePayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9, 1}
}

func (x *SpacePayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SpacePayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type SpacePayload_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op                ChannelOp      `protobuf:"varint,1,opt,name=op,proto3,enum=casablanca.ChannelOp" json:"op,omitempty"`
	ChannelId         string         `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	OriginEvent       *EventRef      `protobuf:"bytes,3,opt,name=origin_event,json=originEvent,proto3" json:"origin_event,omitempty"`
	ChannelProperties *EncryptedData `protobuf:"bytes,4,opt,name=channel_properties,json=channelProperties,proto3" json:"channel_properties,omitempty"`
}

func (x *SpacePayload_Channel) Reset() {
	*x = SpacePayload_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Channel) ProtoMessage() {}

func (x *SpacePayload_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Channel.ProtoReflect.Descriptor instead.
func (*SpacePayload_Channel) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9, 2}
}

func (x *SpacePayload_Channel) GetOp() ChannelOp {
	if x != nil {
		return x.Op
	}
	return ChannelOp_CO_UNSPECIFIED
}

func (x *SpacePayload_Channel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SpacePayload_Channel) GetOriginEvent() *EventRef {
	if x != nil {
		return x.OriginEvent
	}
	return nil
}

func (x *SpacePayload_Channel) GetChannelProperties() *EncryptedData {
	if x != nil {
		return x.ChannelProperties
	}
	return nil
}

type ChannelPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *ChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// userId: Membership
	Memberships map[string]*Membership `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelPayload_Snapshot) Reset() {
	*x = ChannelPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Snapshot) ProtoMessage() {}

func (x *ChannelPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ChannelPayload_Snapshot) GetInception() *ChannelPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *ChannelPayload_Snapshot) GetMemberships() map[string]*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type ChannelPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SpaceId  string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// *
	// channel_name and channel_topic from this payload will be used to
	// create associated with that channel space event for stream as we agreed
	// that channel names and topics will be delivered using space stream
	ChannelProperties *EncryptedData  `protobuf:"bytes,4,opt,name=channel_properties,json=channelProperties,proto3" json:"channel_properties,omitempty"`
	Settings          *StreamSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ChannelPayload_Inception) Reset() {
	*x = ChannelPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Inception) ProtoMessage() {}

func (x *ChannelPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Inception.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ChannelPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *ChannelPayload_Inception) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ChannelPayload_Inception) GetChannelProperties() *EncryptedData {
	if x != nil {
		return x.ChannelProperties
	}
	return nil
}

func (x *ChannelPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// *
// Receipt is used to acknowledge that the event depicted by origin_op and hash
// was responded to by a device. Used to prevent spurious processing of to-device events
// by multiple requested users' devices.
type ChannelPayload_Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginOp   ToDeviceOp `protobuf:"varint,1,opt,name=origin_op,json=originOp,proto3,enum=casablanca.ToDeviceOp" json:"origin_op,omitempty"`
	OriginHash []byte     `protobuf:"bytes,2,opt,name=origin_hash,json=originHash,proto3" json:"origin_hash,omitempty"`
}

func (x *ChannelPayload_Receipt) Reset() {
	*x = ChannelPayload_Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Receipt) ProtoMessage() {}

func (x *ChannelPayload_Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Receipt.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Receipt) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13, 2}
}

func (x *ChannelPayload_Receipt) GetOriginOp() ToDeviceOp {
	if x != nil {
		return x.OriginOp
	}
	return ToDeviceOp_TDO_UNSPECIFIED
}

func (x *ChannelPayload_Receipt) GetOriginHash() []byte {
	if x != nil {
		return x.OriginHash
	}
	return nil
}

type UserSettingsPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *UserSettingsPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// channelId: FullyReadMarker
	FullyReadMarkers map[string]*UserSettingsPayload_FullyReadMarkers `protobuf:"bytes,2,rep,name=fully_read_markers,json=fullyReadMarkers,proto3" json:"fully_read_markers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserSettingsPayload_Snapshot) Reset() {
	*x = UserSettingsPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_Snapshot) ProtoMessage() {}

func (x *UserSettingsPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{14, 0}
}

func (x *UserSettingsPayload_Snapshot) GetInception() *UserSettingsPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *UserSettingsPayload_Snapshot) GetFullyReadMarkers() map[string]*UserSettingsPayload_FullyReadMarkers {
	if x != nil {
		return x.FullyReadMarkers
	}
	return nil
}

type UserSettingsPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UserSettingsPayload_Inception) Reset() {
	*x = UserSettingsPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_Inception) ProtoMessage() {}

func (x *UserSettingsPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{14, 1}
}

func (x *UserSettingsPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserSettingsPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserSettingsPayload_FullyReadMarkers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelStreamId string         `protobuf:"bytes,1,opt,name=channel_stream_id,json=channelStreamId,proto3" json:"channel_stream_id,omitempty"`
	Content         *EncryptedData `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UserSettingsPayload_FullyReadMarkers) Reset() {
	*x = UserSettingsPayload_FullyReadMarkers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_FullyReadMarkers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_FullyReadMarkers) ProtoMessage() {}

func (x *UserSettingsPayload_FullyReadMarkers) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_FullyReadMarkers.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_FullyReadMarkers) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{14, 2}
}

func (x *UserSettingsPayload_FullyReadMarkers) GetChannelStreamId() string {
	if x != nil {
		return x.ChannelStreamId
	}
	return ""
}

func (x *UserSettingsPayload_FullyReadMarkers) GetContent() *EncryptedData {
	if x != nil {
		return x.Content
	}
	return nil
}

type UserDeviceKeyPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *UserDeviceKeyPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// deviceId: UserDeviceKey
	UserDeviceKeys map[string]*UserDeviceKeyPayload_UserDeviceKey `protobuf:"bytes,2,rep,name=user_device_keys,json=userDeviceKeys,proto3" json:"user_device_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserDeviceKeyPayload_Snapshot) Reset() {
	*x = UserDeviceKeyPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_Snapshot) ProtoMessage() {}

func (x *UserDeviceKeyPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{15, 0}
}

func (x *UserDeviceKeyPayload_Snapshot) GetInception() *UserDeviceKeyPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *UserDeviceKeyPayload_Snapshot) GetUserDeviceKeys() map[string]*UserDeviceKeyPayload_UserDeviceKey {
	if x != nil {
		return x.UserDeviceKeys
	}
	return nil
}

type UserDeviceKeyPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId   string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UserDeviceKeyPayload_Inception) Reset() {
	*x = UserDeviceKeyPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_Inception) ProtoMessage() {}

func (x *UserDeviceKeyPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{15, 1}
}

func (x *UserDeviceKeyPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserDeviceKeyPayload_Inception) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDeviceKeyPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserDeviceKeyPayload_UserDeviceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceKeys   *DeviceKeys   `protobuf:"bytes,2,opt,name=device_keys,json=deviceKeys,proto3,oneof" json:"device_keys,omitempty"`
	FallbackKeys *FallbackKeys `protobuf:"bytes,3,opt,name=fallback_keys,json=fallbackKeys,proto3,oneof" json:"fallback_keys,omitempty"`
	RiverKeyOp   *RiverKeyOp   `protobuf:"varint,4,opt,name=river_key_op,json=riverKeyOp,proto3,enum=casablanca.RiverKeyOp,oneof" json:"river_key_op,omitempty"`
}

func (x *UserDeviceKeyPayload_UserDeviceKey) Reset() {
	*x = UserDeviceKeyPayload_UserDeviceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_UserDeviceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_UserDeviceKey) ProtoMessage() {}

func (x *UserDeviceKeyPayload_UserDeviceKey) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_UserDeviceKey.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_UserDeviceKey) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{15, 2}
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetDeviceKeys() *DeviceKeys {
	if x != nil {
		return x.DeviceKeys
	}
	return nil
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetFallbackKeys() *FallbackKeys {
	if x != nil {
		return x.FallbackKeys
	}
	return nil
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetRiverKeyOp() RiverKeyOp {
	if x != nil && x.RiverKeyOp != nil {
		return *x.RiverKeyOp
	}
	return RiverKeyOp_RDKO_KEY_REVOKE
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x08, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x88,
	0x05, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x4d, 0x73, 0x12, 0x48, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x15,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x59, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc0, 0x02, 0x0a, 0x0f, 0x4d, 0x69,
	0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x01, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x67, 0x0a, 0x09,
	0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xba, 0x03, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x59, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x73, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x69,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x4f, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x28, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xbc, 0x07, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x88, 0x02, 0x0a, 0x08, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x66, 0x0a,
	0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x1a, 0xab, 0x01, 0x0a, 0x08, 0x54, 0x6f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x39,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xb5, 0x07, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a,
	0xa6, 0x03, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x1a, 0x5d, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x56, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x0d, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4f, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x88, 0x01, 0x01, 0x1a, 0x63, 0x0a, 0x0f, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x50, 0x0a, 0x18, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x06, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x1a, 0xfe, 0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x56, 0x0a, 0x10, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xc5, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x5f, 0x0a, 0x07, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xdf, 0x05, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x49, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x12, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0xb8, 0x02, 0x0a,
	0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x1a, 0x75, 0x0a, 0x15, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x73, 0x0a, 0x10, 0x46, 0x75, 0x6c,
	0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x07, 0x0a, 0x14, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0xb0, 0x02, 0x0a, 0x08, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x67, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x71, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x79, 0x0a, 0x09, 0x49,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x9c, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x00,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73,
	0x48, 0x01, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x52, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4f,
	0x70, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x6f, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4b, 0x65,
	0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65,
	0x79, 0x73, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x1a, 0x4d, 0x0a, 0x0e,
	0x41, 0x6c, 0x67, 0x6f, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a,
	0x11, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69,
	0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x22,
	0xe8, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x69, 0x6e, 0x69,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x7f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x69,
	0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x22, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x12,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07, 0x73, 0x79,
	0x6e, 0x63, 0x50, 0x6f, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x2a, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x74, 0x69, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69,
	0x6e, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2a, 0x4c, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x4f, 0x70, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x5f, 0x4a, 0x4f, 0x49, 0x4e,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x03,
	0x2a, 0x4f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x2a, 0x4c, 0x0a, 0x0a, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x44, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x44, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x44, 0x4f,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x2a,
	0x21, 0x0a, 0x0a, 0x52, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x44, 0x4b, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45,
	0x10, 0x00, 0x2a, 0xcf, 0x07, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58,
	0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53,
	0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x42,
	0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x16, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x56, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53, 0x10, 0x1c, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x1d, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x41, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x20, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x21,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x58, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x24, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x26, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x49,
	0x4e, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x27,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x49,
	0x4e, 0x49, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x29, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x2b, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41,
	0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x2c, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x44,
	0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x2e, 0x32, 0x82, 0x05, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x61, 0x6e, 0x63, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e,
	0x63, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e,
	0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x1e, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x1d, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61,
	0x6e, 0x63, 0x61, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x63, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x63, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_protocol_proto_goTypes = []interface{}{
	(MembershipOp)(0),                            // 0: casablanca.MembershipOp
	(ChannelOp)(0),                               // 1: casablanca.ChannelOp
	(ToDeviceOp)(0),                              // 2: casablanca.ToDeviceOp
	(RiverKeyOp)(0),                              // 3: casablanca.RiverKeyOp
	(Err)(0),                                     // 4: casablanca.Err
	(*Envelope)(nil),                             // 5: casablanca.Envelope
	(*StreamEvent)(nil),                          // 6: casablanca.StreamEvent
	(*MiniblockHeader)(nil),                      // 7: casablanca.MiniblockHeader
	(*Miniblock)(nil),                            // 8: casablanca.Miniblock
	(*Snapshot)(nil),                             // 9: casablanca.Snapshot
	(*EventRef)(nil),                             // 10: casablanca.EventRef
	(*StreamSettings)(nil),                       // 11: casablanca.StreamSettings
	(*Membership)(nil),                           // 12: casablanca.Membership
	(*UserPayload)(nil),                          // 13: casablanca.UserPayload
	(*SpacePayload)(nil),                         // 14: casablanca.SpacePayload
	(*EncryptedData)(nil),                        // 15: casablanca.EncryptedData
	(*EncryptedDeviceData)(nil),                  // 16: casablanca.EncryptedDeviceData
	(*EncryptedMessageEnvelope)(nil),             // 17: casablanca.EncryptedMessageEnvelope
	(*ChannelPayload)(nil),                       // 18: casablanca.ChannelPayload
	(*UserSettingsPayload)(nil),                  // 19: casablanca.UserSettingsPayload
	(*UserDeviceKeyPayload)(nil),                 // 20: casablanca.UserDeviceKeyPayload
	(*DeviceKeys)(nil),                           // 21: casablanca.DeviceKeys
	(*FallbackKeys)(nil),                         // 22: casablanca.FallbackKeys
	(*Key)(nil),                                  // 23: casablanca.Key
	(*SyncCookie)(nil),                           // 24: casablanca.SyncCookie
	(*StreamAndCookie)(nil),                      // 25: casablanca.StreamAndCookie
	(*CreateStreamRequest)(nil),                  // 26: casablanca.CreateStreamRequest
	(*CreateStreamResponse)(nil),                 // 27: casablanca.CreateStreamResponse
	(*GetStreamRequest)(nil),                     // 28: casablanca.GetStreamRequest
	(*GetStreamResponse)(nil),                    // 29: casablanca.GetStreamResponse
	(*GetMiniblocksRequest)(nil),                 // 30: casablanca.GetMiniblocksRequest
	(*GetMiniblocksResponse)(nil),                // 31: casablanca.GetMiniblocksResponse
	(*AddEventRequest)(nil),                      // 32: casablanca.AddEventRequest
	(*AddEventResponse)(nil),                     // 33: casablanca.AddEventResponse
	(*SyncStreamsRequest)(nil),                   // 34: casablanca.SyncStreamsRequest
	(*SyncStreamsResponse)(nil),                  // 35: casablanca.SyncStreamsResponse
	(*InfoRequest)(nil),                          // 36: casablanca.InfoRequest
	(*InfoResponse)(nil),                         // 37: casablanca.InfoResponse
	(*LinkWalletRequest)(nil),                    // 38: casablanca.LinkWalletRequest
	(*LinkWalletResponse)(nil),                   // 39: casablanca.LinkWalletResponse
	(*GetLinkedWalletsRequest)(nil),              // 40: casablanca.GetLinkedWalletsRequest
	(*GetLinkedWalletsResponse)(nil),             // 41: casablanca.GetLinkedWalletsResponse
	(*UserPayload_Snapshot)(nil),                 // 42: casablanca.UserPayload.Snapshot
	(*UserPayload_Inception)(nil),                // 43: casablanca.UserPayload.Inception
	(*UserPayload_UserMembership)(nil),           // 44: casablanca.UserPayload.UserMembership
	(*UserPayload_ToDevice)(nil),                 // 45: casablanca.UserPayload.ToDevice
	nil,                                          // 46: casablanca.UserPayload.Snapshot.MembershipsEntry
	(*SpacePayload_Snapshot)(nil),                // 47: casablanca.SpacePayload.Snapshot
	(*SpacePayload_Inception)(nil),               // 48: casablanca.SpacePayload.Inception
	(*SpacePayload_Channel)(nil),                 // 49: casablanca.SpacePayload.Channel
	nil,                                          // 50: casablanca.SpacePayload.Snapshot.ChannelsEntry
	nil,                                          // 51: casablanca.SpacePayload.Snapshot.MembershipsEntry
	nil,                                          // 52: casablanca.EncryptedDeviceData.CiphertextEntry
	(*ChannelPayload_Snapshot)(nil),              // 53: casablanca.ChannelPayload.Snapshot
	(*ChannelPayload_Inception)(nil),             // 54: casablanca.ChannelPayload.Inception
	(*ChannelPayload_Receipt)(nil),               // 55: casablanca.ChannelPayload.Receipt
	nil,                                          // 56: casablanca.ChannelPayload.Snapshot.MembershipsEntry
	(*UserSettingsPayload_Snapshot)(nil),         // 57: casablanca.UserSettingsPayload.Snapshot
	(*UserSettingsPayload_Inception)(nil),        // 58: casablanca.UserSettingsPayload.Inception
	(*UserSettingsPayload_FullyReadMarkers)(nil), // 59: casablanca.UserSettingsPayload.FullyReadMarkers
	nil,                                    // 60: casablanca.UserSettingsPayload.Snapshot.FullyReadMarkersEntry
	(*UserDeviceKeyPayload_Snapshot)(nil),  // 61: casablanca.UserDeviceKeyPayload.Snapshot
	(*UserDeviceKeyPayload_Inception)(nil), // 62: casablanca.UserDeviceKeyPayload.Inception
	(*UserDeviceKeyPayload_UserDeviceKey)(nil), // 63: casablanca.UserDeviceKeyPayload.UserDeviceKey
	nil,                           // 64: casablanca.UserDeviceKeyPayload.Snapshot.UserDeviceKeysEntry
	nil,                           // 65: casablanca.DeviceKeys.KeysEntry
	nil,                           // 66: casablanca.DeviceKeys.SignaturesEntry
	nil,                           // 67: casablanca.FallbackKeys.AlgoKeyIdEntry
	nil,                           // 68: casablanca.Key.SignaturesEntry
	(*timestamppb.Timestamp)(nil), // 69: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 70: google.protobuf.Empty
}
var file_protocol_proto_depIdxs = []int32{
	7,  // 0: casablanca.StreamEvent.miniblock_header:type_name -> casablanca.MiniblockHeader
	14, // 1: casablanca.StreamEvent.space_payload:type_name -> casablanca.SpacePayload
	18, // 2: casablanca.StreamEvent.channel_payload:type_name -> casablanca.ChannelPayload
	13, // 3: casablanca.StreamEvent.user_payload:type_name -> casablanca.UserPayload
	19, // 4: casablanca.StreamEvent.user_settings_payload:type_name -> casablanca.UserSettingsPayload
	20, // 5: casablanca.StreamEvent.user_device_key_payload:type_name -> casablanca.UserDeviceKeyPayload
	69, // 6: casablanca.MiniblockHeader.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 7: casablanca.MiniblockHeader.snapshot:type_name -> casablanca.Snapshot
	70, // 8: casablanca.MiniblockHeader.none:type_name -> google.protobuf.Empty
	5,  // 9: casablanca.Miniblock.events:type_name -> casablanca.Envelope
	5,  // 10: casablanca.Miniblock.header:type_name -> casablanca.Envelope
	47, // 11: casablanca.Snapshot.space_content:type_name -> casablanca.SpacePayload.Snapshot
	53, // 12: casablanca.Snapshot.channel_content:type_name -> casablanca.ChannelPayload.Snapshot
	42, // 13: casablanca.Snapshot.user_content:type_name -> casablanca.UserPayload.Snapshot
	57, // 14: casablanca.Snapshot.user_settings_content:type_name -> casablanca.UserSettingsPayload.Snapshot
	61, // 15: casablanca.Snapshot.user_device_key_content:type_name -> casablanca.UserDeviceKeyPayload.Snapshot
	0,  // 16: casablanca.Membership.op:type_name -> casablanca.MembershipOp
	43, // 17: casablanca.UserPayload.inception:type_name -> casablanca.UserPayload.Inception
	44, // 18: casablanca.UserPayload.user_membership:type_name -> casablanca.UserPayload.UserMembership
	45, // 19: casablanca.UserPayload.to_device:type_name -> casablanca.UserPayload.ToDevice
	48, // 20: casablanca.SpacePayload.inception:type_name -> casablanca.SpacePayload.Inception
	49, // 21: casablanca.SpacePayload.channel:type_name -> casablanca.SpacePayload.Channel
	12, // 22: casablanca.SpacePayload.membership:type_name -> casablanca.Membership
	52, // 23: casablanca.EncryptedDeviceData.ciphertext:type_name -> casablanca.EncryptedDeviceData.CiphertextEntry
	54, // 24: casablanca.ChannelPayload.inception:type_name -> casablanca.ChannelPayload.Inception
	15, // 25: casablanca.ChannelPayload.message:type_name -> casablanca.EncryptedData
	12, // 26: casablanca.ChannelPayload.membership:type_name -> casablanca.Membership
	55, // 27: casablanca.ChannelPayload.receipt:type_name -> casablanca.ChannelPayload.Receipt
	58, // 28: casablanca.UserSettingsPayload.inception:type_name -> casablanca.UserSettingsPayload.Inception
	59, // 29: casablanca.UserSettingsPayload.fully_read_markers:type_name -> casablanca.UserSettingsPayload.FullyReadMarkers
	62, // 30: casablanca.UserDeviceKeyPayload.inception:type_name -> casablanca.UserDeviceKeyPayload.Inception
	63, // 31: casablanca.UserDeviceKeyPayload.user_device_key:type_name -> casablanca.UserDeviceKeyPayload.UserDeviceKey
	65, // 32: casablanca.DeviceKeys.keys:type_name -> casablanca.DeviceKeys.KeysEntry
	66, // 33: casablanca.DeviceKeys.signatures:type_name -> casablanca.DeviceKeys.SignaturesEntry
	67, // 34: casablanca.FallbackKeys.algo_key_id:type_name -> casablanca.FallbackKeys.AlgoKeyIdEntry
	68, // 35: casablanca.Key.signatures:type_name -> casablanca.Key.SignaturesEntry
	5,  // 36: casablanca.StreamAndCookie.events:type_name -> casablanca.Envelope
	24, // 37: casablanca.StreamAndCookie.next_sync_cookie:type_name -> casablanca.SyncCookie
	24, // 38: casablanca.StreamAndCookie.original_sync_cookie:type_name -> casablanca.SyncCookie
	5,  // 39: casablanca.CreateStreamRequest.events:type_name -> casablanca.Envelope
	25, // 40: casablanca.CreateStreamResponse.stream:type_name -> casablanca.StreamAndCookie
	8,  // 41: casablanca.CreateStreamResponse.miniblocks:type_name -> casablanca.Miniblock
	25, // 42: casablanca.GetStreamResponse.stream:type_name -> casablanca.StreamAndCookie
	8,  // 43: casablanca.GetStreamResponse.miniblocks:type_name -> casablanca.Miniblock
	8,  // 44: casablanca.GetMiniblocksResponse.miniblocks:type_name -> casablanca.Miniblock
	5,  // 45: casablanca.AddEventRequest.event:type_name -> casablanca.Envelope
	24, // 46: casablanca.SyncStreamsRequest.sync_pos:type_name -> casablanca.SyncCookie
	25, // 47: casablanca.SyncStreamsResponse.streams:type_name -> casablanca.StreamAndCookie
	43, // 48: casablanca.UserPayload.Snapshot.inception:type_name -> casablanca.UserPayload.Inception
	46, // 49: casablanca.UserPayload.Snapshot.memberships:type_name -> casablanca.UserPayload.Snapshot.MembershipsEntry
	11, // 50: casablanca.UserPayload.Inception.settings:type_name -> casablanca.StreamSettings
	10, // 51: casablanca.UserPayload.UserMembership.origin_event:type_name -> casablanca.EventRef
	0,  // 52: casablanca.UserPayload.UserMembership.op:type_name -> casablanca.MembershipOp
	2,  // 53: casablanca.UserPayload.ToDevice.op:type_name -> casablanca.ToDeviceOp
	16, // 54: casablanca.UserPayload.ToDevice.message:type_name -> casablanca.EncryptedDeviceData
	44, // 55: casablanca.UserPayload.Snapshot.MembershipsEntry.value:type_name -> casablanca.UserPayload.UserMembership
	48, // 56: casablanca.SpacePayload.Snapshot.inception:type_name -> casablanca.SpacePayload.Inception
	50, // 57: casablanca.SpacePayload.Snapshot.channels:type_name -> casablanca.SpacePayload.Snapshot.ChannelsEntry
	51, // 58: casablanca.SpacePayload.Snapshot.memberships:type_name -> casablanca.SpacePayload.Snapshot.MembershipsEntry
	11, // 59: casablanca.SpacePayload.Inception.settings:type_name -> casablanca.StreamSettings
	1,  // 60: casablanca.SpacePayload.Channel.op:type_name -> casablanca.ChannelOp
	10, // 61: casablanca.SpacePayload.Channel.origin_event:type_name -> casablanca.EventRef
	15, // 62: casablanca.SpacePayload.Channel.channel_properties:type_name -> casablanca.EncryptedData
	49, // 63: casablanca.SpacePayload.Snapshot.ChannelsEntry.value:type_name -> casablanca.SpacePayload.Channel
	12, // 64: casablanca.SpacePayload.Snapshot.MembershipsEntry.value:type_name -> casablanca.Membership
	17, // 65: casablanca.EncryptedDeviceData.CiphertextEntry.value:type_name -> casablanca.EncryptedMessageEnvelope
	54, // 66: casablanca.ChannelPayload.Snapshot.inception:type_name -> casablanca.ChannelPayload.Inception
	56, // 67: casablanca.ChannelPayload.Snapshot.memberships:type_name -> casablanca.ChannelPayload.Snapshot.MembershipsEntry
	15, // 68: casablanca.ChannelPayload.Inception.channel_properties:type_name -> casablanca.EncryptedData
	11, // 69: casablanca.ChannelPayload.Inception.settings:type_name -> casablanca.StreamSettings
	2,  // 70: casablanca.ChannelPayload.Receipt.origin_op:type_name -> casablanca.ToDeviceOp
	12, // 71: casablanca.ChannelPayload.Snapshot.MembershipsEntry.value:type_name -> casablanca.Membership
	58, // 72: casablanca.UserSettingsPayload.Snapshot.inception:type_name -> casablanca.UserSettingsPayload.Inception
	60, // 73: casablanca.UserSettingsPayload.Snapshot.fully_read_markers:type_name -> casablanca.UserSettingsPayload.Snapshot.FullyReadMarkersEntry
	11, // 74: casablanca.UserSettingsPayload.Inception.settings:type_name -> casablanca.StreamSettings
	15, // 75: casablanca.UserSettingsPayload.FullyReadMarkers.content:type_name -> casablanca.EncryptedData
	59, // 76: casablanca.UserSettingsPayload.Snapshot.FullyReadMarkersEntry.value:type_name -> casablanca.UserSettingsPayload.FullyReadMarkers
	62, // 77: casablanca.UserDeviceKeyPayload.Snapshot.inception:type_name -> casablanca.UserDeviceKeyPayload.Inception
	64, // 78: casablanca.UserDeviceKeyPayload.Snapshot.user_device_keys:type_name -> casablanca.UserDeviceKeyPayload.Snapshot.UserDeviceKeysEntry
	11, // 79: casablanca.UserDeviceKeyPayload.Inception.settings:type_name -> casablanca.StreamSettings
	21, // 80: casablanca.UserDeviceKeyPayload.UserDeviceKey.device_keys:type_name -> casablanca.DeviceKeys
	22, // 81: casablanca.UserDeviceKeyPayload.UserDeviceKey.fallback_keys:type_name -> casablanca.FallbackKeys
	3,  // 82: casablanca.UserDeviceKeyPayload.UserDeviceKey.river_key_op:type_name -> casablanca.RiverKeyOp
	63, // 83: casablanca.UserDeviceKeyPayload.Snapshot.UserDeviceKeysEntry.value:type_name -> casablanca.UserDeviceKeyPayload.UserDeviceKey
	23, // 84: casablanca.FallbackKeys.AlgoKeyIdEntry.value:type_name -> casablanca.Key
	26, // 85: casablanca.StreamService.CreateStream:input_type -> casablanca.CreateStreamRequest
	28, // 86: casablanca.StreamService.GetStream:input_type -> casablanca.GetStreamRequest
	30, // 87: casablanca.StreamService.GetMiniblocks:input_type -> casablanca.GetMiniblocksRequest
	32, // 88: casablanca.StreamService.AddEvent:input_type -> casablanca.AddEventRequest
	34, // 89: casablanca.StreamService.SyncStreams:input_type -> casablanca.SyncStreamsRequest
	38, // 90: casablanca.StreamService.LinkWallet:input_type -> casablanca.LinkWalletRequest
	40, // 91: casablanca.StreamService.GetLinkedWallets:input_type -> casablanca.GetLinkedWalletsRequest
	36, // 92: casablanca.StreamService.Info:input_type -> casablanca.InfoRequest
	27, // 93: casablanca.StreamService.CreateStream:output_type -> casablanca.CreateStreamResponse
	29, // 94: casablanca.StreamService.GetStream:output_type -> casablanca.GetStreamResponse
	31, // 95: casablanca.StreamService.GetMiniblocks:output_type -> casablanca.GetMiniblocksResponse
	33, // 96: casablanca.StreamService.AddEvent:output_type -> casablanca.AddEventResponse
	35, // 97: casablanca.StreamService.SyncStreams:output_type -> casablanca.SyncStreamsResponse
	39, // 98: casablanca.StreamService.LinkWallet:output_type -> casablanca.LinkWalletResponse
	41, // 99: casablanca.StreamService.GetLinkedWallets:output_type -> casablanca.GetLinkedWalletsResponse
	37, // 100: casablanca.StreamService.Info:output_type -> casablanca.InfoResponse
	93, // [93:101] is the sub-list for method output_type
	85, // [85:93] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniblockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Miniblock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedDeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedMessageEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAndCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiniblocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiniblocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinkedWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinkedWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_UserMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_ToDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_FullyReadMarkers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_UserDeviceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StreamEvent_MiniblockHeader)(nil),
		(*StreamEvent_SpacePayload)(nil),
		(*StreamEvent_ChannelPayload)(nil),
		(*StreamEvent_UserPayload)(nil),
		(*StreamEvent_UserSettingsPayload)(nil),
		(*StreamEvent_UserDeviceKeyPayload)(nil),
	}
	file_protocol_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MiniblockHeader_None)(nil),
	}
	file_protocol_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Snapshot_SpaceContent)(nil),
		(*Snapshot_ChannelContent)(nil),
		(*Snapshot_UserContent)(nil),
		(*Snapshot_UserSettingsContent)(nil),
		(*Snapshot_UserDeviceKeyContent)(nil),
	}
	file_protocol_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UserPayload_Inception_)(nil),
		(*UserPayload_UserMembership_)(nil),
		(*UserPayload_ToDevice_)(nil),
	}
	file_protocol_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SpacePayload_Inception_)(nil),
		(*SpacePayload_Channel_)(nil),
		(*SpacePayload_Membership)(nil),
	}
	file_protocol_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_protocol_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_protocol_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_protocol_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ChannelPayload_Inception_)(nil),
		(*ChannelPayload_Message)(nil),
		(*ChannelPayload_Membership)(nil),
		(*ChannelPayload_Receipt_)(nil),
	}
	file_protocol_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*UserSettingsPayload_Inception_)(nil),
		(*UserSettingsPayload_FullyReadMarkers_)(nil),
	}
	file_protocol_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*UserDeviceKeyPayload_Inception_)(nil),
		(*UserDeviceKeyPayload_UserDeviceKey_)(nil),
	}
	file_protocol_proto_msgTypes[58].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
