// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: protocol.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MembershipOp int32

const (
	MembershipOp_SO_UNSPECIFIED MembershipOp = 0
	MembershipOp_SO_INVITE      MembershipOp = 1
	MembershipOp_SO_JOIN        MembershipOp = 2
	MembershipOp_SO_LEAVE       MembershipOp = 3
)

// Enum value maps for MembershipOp.
var (
	MembershipOp_name = map[int32]string{
		0: "SO_UNSPECIFIED",
		1: "SO_INVITE",
		2: "SO_JOIN",
		3: "SO_LEAVE",
	}
	MembershipOp_value = map[string]int32{
		"SO_UNSPECIFIED": 0,
		"SO_INVITE":      1,
		"SO_JOIN":        2,
		"SO_LEAVE":       3,
	}
)

func (x MembershipOp) Enum() *MembershipOp {
	p := new(MembershipOp)
	*p = x
	return p
}

func (x MembershipOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (MembershipOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x MembershipOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipOp.Descriptor instead.
func (MembershipOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

type ChannelOp int32

const (
	ChannelOp_CO_UNSPECIFIED ChannelOp = 0
	ChannelOp_CO_CREATED     ChannelOp = 1
	ChannelOp_CO_DELETED     ChannelOp = 2
	ChannelOp_CO_UPDATED     ChannelOp = 4
)

// Enum value maps for ChannelOp.
var (
	ChannelOp_name = map[int32]string{
		0: "CO_UNSPECIFIED",
		1: "CO_CREATED",
		2: "CO_DELETED",
		4: "CO_UPDATED",
	}
	ChannelOp_value = map[string]int32{
		"CO_UNSPECIFIED": 0,
		"CO_CREATED":     1,
		"CO_DELETED":     2,
		"CO_UPDATED":     4,
	}
)

func (x ChannelOp) Enum() *ChannelOp {
	p := new(ChannelOp)
	*p = x
	return p
}

func (x ChannelOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelOp) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[1].Descriptor()
}

func (ChannelOp) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[1]
}

func (x ChannelOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelOp.Descriptor instead.
func (ChannelOp) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

// Codes from 1 to 16 match gRPC/Connect codes.
type Err int32

const (
	Err_ERR_UNSPECIFIED Err = 0
	// Canceled indicates that the operation was canceled, typically by the
	// caller.
	Err_CANCELED Err = 1
	// Unknown indicates that the operation failed for an unknown reason.
	Err_UNKNOWN Err = 2
	// InvalidArgument indicates that client supplied an invalid argument.
	Err_INVALID_ARGUMENT Err = 3
	// DeadlineExceeded indicates that deadline expired before the operation
	// could complete.
	Err_DEADLINE_EXCEEDED Err = 4
	// NotFound indicates that some requested entity (for example, a file or
	// directory) was not found.
	Err_NOT_FOUND Err = 5
	// AlreadyExists indicates that client attempted to create an entity (for
	// example, a file or directory) that already exists.
	Err_ALREADY_EXISTS Err = 6
	// PermissionDenied indicates that the caller doesn't have permission to
	// execute the specified operation.
	Err_PERMISSION_DENIED Err = 7
	// ResourceExhausted indicates that some resource has been exhausted. For
	// example, a per-user quota may be exhausted or the entire file system may
	// be full.
	Err_RESOURCE_EXHAUSTED Err = 8
	// FailedPrecondition indicates that the system is not in a state
	// required for the operation's execution.
	Err_FAILED_PRECONDITION Err = 9
	// Aborted indicates that operation was aborted by the system, usually
	// because of a concurrency issue such as a sequencer check failure or
	// transaction abort.
	Err_ABORTED Err = 10
	// OutOfRange indicates that the operation was attempted past the valid
	// range (for example, seeking past end-of-file).
	Err_OUT_OF_RANGE Err = 11
	// Unimplemented indicates that the operation isn't implemented,
	// supported, or enabled in this service.
	Err_UNIMPLEMENTED Err = 12
	// Internal indicates that some invariants expected by the underlying
	// system have been broken. This code is reserved for serious errors.
	Err_INTERNAL Err = 13
	// Unavailable indicates that the service is currently unavailable. This
	// is usually temporary, so clients can back off and retry idempotent
	// operations.
	Err_UNAVAILABLE Err = 14
	// DataLoss indicates that the operation has resulted in unrecoverable
	// data loss or corruption.
	Err_DATA_LOSS Err = 15
	// Unauthenticated indicates that the request does not have valid
	// authentication credentials for the operation.
	Err_UNAUTHENTICATED               Err = 16
	Err_DEBUG_ERROR                   Err = 17
	Err_BAD_STREAM_ID                 Err = 18
	Err_BAD_STREAM_CREATION_PARAMS    Err = 19
	Err_INTERNAL_ERROR_SWITCH         Err = 20
	Err_BAD_EVENT_ID                  Err = 21
	Err_BAD_EVENT_SIGNATURE           Err = 22
	Err_BAD_HASH_FORMAT               Err = 23
	Err_BAD_PREV_MINIBLOCK_HASH       Err = 24
	Err_NO_EVENT_SPECIFIED            Err = 25
	Err_BAD_EVENT                     Err = 26
	Err_USER_CANT_POST                Err = 27
	Err_STREAM_BAD_HASHES             Err = 28
	Err_STREAM_EMPTY                  Err = 29
	Err_STREAM_BAD_EVENT              Err = 30
	Err_BAD_DELEGATE_SIG              Err = 31
	Err_BAD_PUBLIC_KEY                Err = 32
	Err_BAD_PAYLOAD                   Err = 33
	Err_BAD_HEX_STRING                Err = 34
	Err_BAD_EVENT_HASH                Err = 35
	Err_BAD_SYNC_COOKIE               Err = 36
	Err_DUPLICATE_EVENT               Err = 37
	Err_BAD_BLOCK                     Err = 38
	Err_STREAM_NO_INCEPTION_EVENT     Err = 39
	Err_BAD_BLOCK_NUMBER              Err = 40
	Err_BAD_MINIPOOL_SLOT             Err = 41
	Err_BAD_CREATOR_ADDRESS           Err = 42
	Err_STALE_DELEGATE                Err = 43
	Err_BAD_LINK_WALLET_BAD_SIGNATURE Err = 44
	Err_BAD_ROOT_KEY_ID               Err = 45
	Err_UNKNOWN_NODE                  Err = 46
	Err_DB_OPERATION_FAILURE          Err = 47
	Err_MINIBLOCKS_STORAGE_FAILURE    Err = 48
	Err_BAD_ADDRESS                   Err = 49
	Err_BUFFER_FULL                   Err = 50
	Err_BAD_CONFIG                    Err = 51
	Err_BAD_CONTRACT                  Err = 52
	Err_CANNOT_CONNECT                Err = 53
	Err_CANNOT_GET_LINKED_WALLETS     Err = 54
	Err_CANNOT_CHECK_ENTITLEMENTS     Err = 55
	Err_CANNOT_CALL_CONTRACT          Err = 56
)

// Enum value maps for Err.
var (
	Err_name = map[int32]string{
		0:  "ERR_UNSPECIFIED",
		1:  "CANCELED",
		2:  "UNKNOWN",
		3:  "INVALID_ARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATA_LOSS",
		16: "UNAUTHENTICATED",
		17: "DEBUG_ERROR",
		18: "BAD_STREAM_ID",
		19: "BAD_STREAM_CREATION_PARAMS",
		20: "INTERNAL_ERROR_SWITCH",
		21: "BAD_EVENT_ID",
		22: "BAD_EVENT_SIGNATURE",
		23: "BAD_HASH_FORMAT",
		24: "BAD_PREV_MINIBLOCK_HASH",
		25: "NO_EVENT_SPECIFIED",
		26: "BAD_EVENT",
		27: "USER_CANT_POST",
		28: "STREAM_BAD_HASHES",
		29: "STREAM_EMPTY",
		30: "STREAM_BAD_EVENT",
		31: "BAD_DELEGATE_SIG",
		32: "BAD_PUBLIC_KEY",
		33: "BAD_PAYLOAD",
		34: "BAD_HEX_STRING",
		35: "BAD_EVENT_HASH",
		36: "BAD_SYNC_COOKIE",
		37: "DUPLICATE_EVENT",
		38: "BAD_BLOCK",
		39: "STREAM_NO_INCEPTION_EVENT",
		40: "BAD_BLOCK_NUMBER",
		41: "BAD_MINIPOOL_SLOT",
		42: "BAD_CREATOR_ADDRESS",
		43: "STALE_DELEGATE",
		44: "BAD_LINK_WALLET_BAD_SIGNATURE",
		45: "BAD_ROOT_KEY_ID",
		46: "UNKNOWN_NODE",
		47: "DB_OPERATION_FAILURE",
		48: "MINIBLOCKS_STORAGE_FAILURE",
		49: "BAD_ADDRESS",
		50: "BUFFER_FULL",
		51: "BAD_CONFIG",
		52: "BAD_CONTRACT",
		53: "CANNOT_CONNECT",
		54: "CANNOT_GET_LINKED_WALLETS",
		55: "CANNOT_CHECK_ENTITLEMENTS",
		56: "CANNOT_CALL_CONTRACT",
	}
	Err_value = map[string]int32{
		"ERR_UNSPECIFIED":               0,
		"CANCELED":                      1,
		"UNKNOWN":                       2,
		"INVALID_ARGUMENT":              3,
		"DEADLINE_EXCEEDED":             4,
		"NOT_FOUND":                     5,
		"ALREADY_EXISTS":                6,
		"PERMISSION_DENIED":             7,
		"RESOURCE_EXHAUSTED":            8,
		"FAILED_PRECONDITION":           9,
		"ABORTED":                       10,
		"OUT_OF_RANGE":                  11,
		"UNIMPLEMENTED":                 12,
		"INTERNAL":                      13,
		"UNAVAILABLE":                   14,
		"DATA_LOSS":                     15,
		"UNAUTHENTICATED":               16,
		"DEBUG_ERROR":                   17,
		"BAD_STREAM_ID":                 18,
		"BAD_STREAM_CREATION_PARAMS":    19,
		"INTERNAL_ERROR_SWITCH":         20,
		"BAD_EVENT_ID":                  21,
		"BAD_EVENT_SIGNATURE":           22,
		"BAD_HASH_FORMAT":               23,
		"BAD_PREV_MINIBLOCK_HASH":       24,
		"NO_EVENT_SPECIFIED":            25,
		"BAD_EVENT":                     26,
		"USER_CANT_POST":                27,
		"STREAM_BAD_HASHES":             28,
		"STREAM_EMPTY":                  29,
		"STREAM_BAD_EVENT":              30,
		"BAD_DELEGATE_SIG":              31,
		"BAD_PUBLIC_KEY":                32,
		"BAD_PAYLOAD":                   33,
		"BAD_HEX_STRING":                34,
		"BAD_EVENT_HASH":                35,
		"BAD_SYNC_COOKIE":               36,
		"DUPLICATE_EVENT":               37,
		"BAD_BLOCK":                     38,
		"STREAM_NO_INCEPTION_EVENT":     39,
		"BAD_BLOCK_NUMBER":              40,
		"BAD_MINIPOOL_SLOT":             41,
		"BAD_CREATOR_ADDRESS":           42,
		"STALE_DELEGATE":                43,
		"BAD_LINK_WALLET_BAD_SIGNATURE": 44,
		"BAD_ROOT_KEY_ID":               45,
		"UNKNOWN_NODE":                  46,
		"DB_OPERATION_FAILURE":          47,
		"MINIBLOCKS_STORAGE_FAILURE":    48,
		"BAD_ADDRESS":                   49,
		"BUFFER_FULL":                   50,
		"BAD_CONFIG":                    51,
		"BAD_CONTRACT":                  52,
		"CANNOT_CONNECT":                53,
		"CANNOT_GET_LINKED_WALLETS":     54,
		"CANNOT_CHECK_ENTITLEMENTS":     55,
		"CANNOT_CALL_CONTRACT":          56,
	}
)

func (x Err) Enum() *Err {
	p := new(Err)
	*p = x
	return p
}

func (x Err) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Err) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[2].Descriptor()
}

func (Err) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[2]
}

func (x Err) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Err.Descriptor instead.
func (Err) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

// *
// Miniblock contains a list of events and the header event.
// Events must be in the same order as in the header, which is of type MiniblockHeader.
// Only signed data (Envelopes) should exist in this data structure.
type Miniblock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Header *Envelope   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *Miniblock) Reset() {
	*x = Miniblock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Miniblock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Miniblock) ProtoMessage() {}

func (x *Miniblock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Miniblock.ProtoReflect.Descriptor instead.
func (*Miniblock) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Miniblock) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Miniblock) GetHeader() *Envelope {
	if x != nil {
		return x.Header
	}
	return nil
}

// *
// Envelope contains serialized event, and its hash and signature.
// hash is used as event id. Subsequent events reference this event by hash.
// event is a serialized StreamEvent
type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Hash of event.
	// While hash can be recalculated from the event, having it here explicitely
	// makes it easier to work with event.
	// For the event to be valid, must match hash of event field.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// *
	// Signature.
	// For the event to be valid, signature must match event.creator_address
	// or be signed by the address from evant.delegate_sig.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Event     []byte `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *Envelope) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Envelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Envelope) GetEvent() []byte {
	if x != nil {
		return x.Event
	}
	return nil
}

// *
// StreamEvent is a single event in the stream.
type StreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Address of the creator of the event.
	// For user - address of the user's Towns wallet.
	// For server - address of the server's keypair in staking smart contract.
	//
	// For the event to be valid:
	// If delegate_sig is present, creator_address must match delegate_sig.
	// If delegate_sig is not present, creator_address must match event signature in the Envelope.
	CreatorAddress []byte `protobuf:"bytes,1,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	// *
	// delegate_sig allows event to be signed by device keypair
	// which is linked to the user's Towns wallet.
	//
	// delegate_sig constains signature of the public key of the device keypair.
	// User's Towns wallet is used to produce this signature.
	//
	// If present, for the event to be valid:
	// 1. creator_address must match delegate_sig's signer public key
	// 2. delegate_sig should be the signature of Envelope.signature's public key.
	//
	// Server nodes sign node-produced events with their own keypair and do not
	// need to use delegate_sig.
	DelegateSig []byte `protobuf:"bytes,2,opt,name=delegate_sig,json=delegateSig,proto3" json:"delegate_sig,omitempty"`
	// * Salt ensures that similar messages are not hashed to the same value. genId() from id.ts may be used.
	Salt []byte `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// * Hash of a preceding miniblock. Null for the inception event. Must be a recent miniblock
	PrevMiniblockHash []byte `protobuf:"bytes,4,opt,name=prev_miniblock_hash,json=prevMiniblockHash,proto3,oneof" json:"prev_miniblock_hash,omitempty"`
	// * CreatedAt is the time when the event was created.
	// NOTE: this value is set by clients and is not reliable for anything other than displaying
	// the value to the user. Never use this value to sort events from different users.
	CreatedAtEpocMs int64 `protobuf:"varint,5,opt,name=created_at_epoc_ms,json=createdAtEpocMs,proto3" json:"created_at_epoc_ms,omitempty"`
	// * Variable-type payload.
	// Payloads should obey the following rules:
	// - payloads should have their own unique type
	// - each payload should have a oneof content field
	// - each payload should have an inception field inside the content oneof
	// - each payload should have a unique Inception type
	// - payloads can't violate previous type recursively to inception payload
	//
	// Types that are assignable to Payload:
	//
	//	*StreamEvent_MiniblockHeader
	//	*StreamEvent_SpacePayload
	//	*StreamEvent_ChannelPayload
	//	*StreamEvent_UserPayload
	//	*StreamEvent_UserSettingsPayload
	//	*StreamEvent_UserDeviceKeyPayload
	//	*StreamEvent_MediaPayload
	//	*StreamEvent_DmChannelPayload
	//	*StreamEvent_GdmChannelPayload
	Payload isStreamEvent_Payload `protobuf_oneof:"payload"`
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent.ProtoReflect.Descriptor instead.
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *StreamEvent) GetCreatorAddress() []byte {
	if x != nil {
		return x.CreatorAddress
	}
	return nil
}

func (x *StreamEvent) GetDelegateSig() []byte {
	if x != nil {
		return x.DelegateSig
	}
	return nil
}

func (x *StreamEvent) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *StreamEvent) GetPrevMiniblockHash() []byte {
	if x != nil {
		return x.PrevMiniblockHash
	}
	return nil
}

func (x *StreamEvent) GetCreatedAtEpocMs() int64 {
	if x != nil {
		return x.CreatedAtEpocMs
	}
	return 0
}

func (m *StreamEvent) GetPayload() isStreamEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamEvent) GetMiniblockHeader() *MiniblockHeader {
	if x, ok := x.GetPayload().(*StreamEvent_MiniblockHeader); ok {
		return x.MiniblockHeader
	}
	return nil
}

func (x *StreamEvent) GetSpacePayload() *SpacePayload {
	if x, ok := x.GetPayload().(*StreamEvent_SpacePayload); ok {
		return x.SpacePayload
	}
	return nil
}

func (x *StreamEvent) GetChannelPayload() *ChannelPayload {
	if x, ok := x.GetPayload().(*StreamEvent_ChannelPayload); ok {
		return x.ChannelPayload
	}
	return nil
}

func (x *StreamEvent) GetUserPayload() *UserPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserPayload); ok {
		return x.UserPayload
	}
	return nil
}

func (x *StreamEvent) GetUserSettingsPayload() *UserSettingsPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserSettingsPayload); ok {
		return x.UserSettingsPayload
	}
	return nil
}

func (x *StreamEvent) GetUserDeviceKeyPayload() *UserDeviceKeyPayload {
	if x, ok := x.GetPayload().(*StreamEvent_UserDeviceKeyPayload); ok {
		return x.UserDeviceKeyPayload
	}
	return nil
}

func (x *StreamEvent) GetMediaPayload() *MediaPayload {
	if x, ok := x.GetPayload().(*StreamEvent_MediaPayload); ok {
		return x.MediaPayload
	}
	return nil
}

func (x *StreamEvent) GetDmChannelPayload() *DmChannelPayload {
	if x, ok := x.GetPayload().(*StreamEvent_DmChannelPayload); ok {
		return x.DmChannelPayload
	}
	return nil
}

func (x *StreamEvent) GetGdmChannelPayload() *GdmChannelPayload {
	if x, ok := x.GetPayload().(*StreamEvent_GdmChannelPayload); ok {
		return x.GdmChannelPayload
	}
	return nil
}

type isStreamEvent_Payload interface {
	isStreamEvent_Payload()
}

type StreamEvent_MiniblockHeader struct {
	MiniblockHeader *MiniblockHeader `protobuf:"bytes,100,opt,name=miniblock_header,json=miniblockHeader,proto3,oneof"`
}

type StreamEvent_SpacePayload struct {
	SpacePayload *SpacePayload `protobuf:"bytes,101,opt,name=space_payload,json=spacePayload,proto3,oneof"`
}

type StreamEvent_ChannelPayload struct {
	ChannelPayload *ChannelPayload `protobuf:"bytes,102,opt,name=channel_payload,json=channelPayload,proto3,oneof"`
}

type StreamEvent_UserPayload struct {
	UserPayload *UserPayload `protobuf:"bytes,103,opt,name=user_payload,json=userPayload,proto3,oneof"`
}

type StreamEvent_UserSettingsPayload struct {
	UserSettingsPayload *UserSettingsPayload `protobuf:"bytes,104,opt,name=user_settings_payload,json=userSettingsPayload,proto3,oneof"`
}

type StreamEvent_UserDeviceKeyPayload struct {
	UserDeviceKeyPayload *UserDeviceKeyPayload `protobuf:"bytes,105,opt,name=user_device_key_payload,json=userDeviceKeyPayload,proto3,oneof"`
}

type StreamEvent_MediaPayload struct {
	MediaPayload *MediaPayload `protobuf:"bytes,106,opt,name=media_payload,json=mediaPayload,proto3,oneof"`
}

type StreamEvent_DmChannelPayload struct {
	DmChannelPayload *DmChannelPayload `protobuf:"bytes,107,opt,name=dm_channel_payload,json=dmChannelPayload,proto3,oneof"`
}

type StreamEvent_GdmChannelPayload struct {
	GdmChannelPayload *GdmChannelPayload `protobuf:"bytes,108,opt,name=gdm_channel_payload,json=gdmChannelPayload,proto3,oneof"`
}

func (*StreamEvent_MiniblockHeader) isStreamEvent_Payload() {}

func (*StreamEvent_SpacePayload) isStreamEvent_Payload() {}

func (*StreamEvent_ChannelPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserSettingsPayload) isStreamEvent_Payload() {}

func (*StreamEvent_UserDeviceKeyPayload) isStreamEvent_Payload() {}

func (*StreamEvent_MediaPayload) isStreamEvent_Payload() {}

func (*StreamEvent_DmChannelPayload) isStreamEvent_Payload() {}

func (*StreamEvent_GdmChannelPayload) isStreamEvent_Payload() {}

// *
// MiniblockHeader is a special event that forms a block from set of the stream events.
// Hash of the serialized StreamEvent containing MiniblockHeader is used as a block hash.
type MiniblockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Miniblock number.
	// 0 for genesis block.
	// Must be 1 greater than the previous block number.
	MiniblockNum int64 `protobuf:"varint,1,opt,name=miniblock_num,json=miniblockNum,proto3" json:"miniblock_num,omitempty"`
	// Hash of the previous block.
	PrevMiniblockHash []byte `protobuf:"bytes,2,opt,name=prev_miniblock_hash,json=prevMiniblockHash,proto3" json:"prev_miniblock_hash,omitempty"`
	// Timestamp of the block.
	// Must be greater than the previous block timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Hashes of the events included in the block.
	EventHashes [][]byte `protobuf:"bytes,4,rep,name=event_hashes,json=eventHashes,proto3" json:"event_hashes,omitempty"`
	// Snapshot of the state at the end of the block.
	Snapshot *Snapshot `protobuf:"bytes,5,opt,name=snapshot,proto3,oneof" json:"snapshot,omitempty"`
	// count of all events in the stream before this block
	EventNumOffset int64 `protobuf:"varint,6,opt,name=event_num_offset,json=eventNumOffset,proto3" json:"event_num_offset,omitempty"`
	// pointer to block with previous snapshot
	PrevSnapshotMiniblockNum int64 `protobuf:"varint,7,opt,name=prev_snapshot_miniblock_num,json=prevSnapshotMiniblockNum,proto3" json:"prev_snapshot_miniblock_num,omitempty"`
	// stream payloads are required to have a content field
	//
	// Types that are assignable to Content:
	//
	//	*MiniblockHeader_None
	Content isMiniblockHeader_Content `protobuf_oneof:"content"`
}

func (x *MiniblockHeader) Reset() {
	*x = MiniblockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniblockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniblockHeader) ProtoMessage() {}

func (x *MiniblockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniblockHeader.ProtoReflect.Descriptor instead.
func (*MiniblockHeader) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *MiniblockHeader) GetMiniblockNum() int64 {
	if x != nil {
		return x.MiniblockNum
	}
	return 0
}

func (x *MiniblockHeader) GetPrevMiniblockHash() []byte {
	if x != nil {
		return x.PrevMiniblockHash
	}
	return nil
}

func (x *MiniblockHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MiniblockHeader) GetEventHashes() [][]byte {
	if x != nil {
		return x.EventHashes
	}
	return nil
}

func (x *MiniblockHeader) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *MiniblockHeader) GetEventNumOffset() int64 {
	if x != nil {
		return x.EventNumOffset
	}
	return 0
}

func (x *MiniblockHeader) GetPrevSnapshotMiniblockNum() int64 {
	if x != nil {
		return x.PrevSnapshotMiniblockNum
	}
	return 0
}

func (m *MiniblockHeader) GetContent() isMiniblockHeader_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *MiniblockHeader) GetNone() *emptypb.Empty {
	if x, ok := x.GetContent().(*MiniblockHeader_None); ok {
		return x.None
	}
	return nil
}

type isMiniblockHeader_Content interface {
	isMiniblockHeader_Content()
}

type MiniblockHeader_None struct {
	None *emptypb.Empty `protobuf:"bytes,100,opt,name=none,proto3,oneof"`
}

func (*MiniblockHeader_None) isMiniblockHeader_Content() {}

// *
// SpacePayload
type SpacePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*SpacePayload_Inception_
	//	*SpacePayload_Channel_
	//	*SpacePayload_Membership
	//	*SpacePayload_Username
	//	*SpacePayload_DisplayName
	Content isSpacePayload_Content `protobuf_oneof:"content"`
}

func (x *SpacePayload) Reset() {
	*x = SpacePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload) ProtoMessage() {}

func (x *SpacePayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload.ProtoReflect.Descriptor instead.
func (*SpacePayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

func (m *SpacePayload) GetContent() isSpacePayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *SpacePayload) GetInception() *SpacePayload_Inception {
	if x, ok := x.GetContent().(*SpacePayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *SpacePayload) GetChannel() *SpacePayload_Channel {
	if x, ok := x.GetContent().(*SpacePayload_Channel_); ok {
		return x.Channel
	}
	return nil
}

func (x *SpacePayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*SpacePayload_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *SpacePayload) GetUsername() *EncryptedData {
	if x, ok := x.GetContent().(*SpacePayload_Username); ok {
		return x.Username
	}
	return nil
}

func (x *SpacePayload) GetDisplayName() *EncryptedData {
	if x, ok := x.GetContent().(*SpacePayload_DisplayName); ok {
		return x.DisplayName
	}
	return nil
}

type isSpacePayload_Content interface {
	isSpacePayload_Content()
}

type SpacePayload_Inception_ struct {
	Inception *SpacePayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type SpacePayload_Channel_ struct {
	Channel *SpacePayload_Channel `protobuf:"bytes,2,opt,name=channel,proto3,oneof"`
}

type SpacePayload_Membership struct {
	Membership *Membership `protobuf:"bytes,3,opt,name=membership,proto3,oneof"`
}

type SpacePayload_Username struct {
	Username *EncryptedData `protobuf:"bytes,4,opt,name=username,proto3,oneof"`
}

type SpacePayload_DisplayName struct {
	DisplayName *EncryptedData `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3,oneof"`
}

func (*SpacePayload_Inception_) isSpacePayload_Content() {}

func (*SpacePayload_Channel_) isSpacePayload_Content() {}

func (*SpacePayload_Membership) isSpacePayload_Content() {}

func (*SpacePayload_Username) isSpacePayload_Content() {}

func (*SpacePayload_DisplayName) isSpacePayload_Content() {}

// *
// ChannelPayload
type ChannelPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*ChannelPayload_Inception_
	//	*ChannelPayload_Message
	//	*ChannelPayload_Membership
	//	*ChannelPayload_Fulfillment
	//	*ChannelPayload_KeySolicitation
	Content isChannelPayload_Content `protobuf_oneof:"content"`
}

func (x *ChannelPayload) Reset() {
	*x = ChannelPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload) ProtoMessage() {}

func (x *ChannelPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload.ProtoReflect.Descriptor instead.
func (*ChannelPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5}
}

func (m *ChannelPayload) GetContent() isChannelPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ChannelPayload) GetInception() *ChannelPayload_Inception {
	if x, ok := x.GetContent().(*ChannelPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *ChannelPayload) GetMessage() *EncryptedData {
	if x, ok := x.GetContent().(*ChannelPayload_Message); ok {
		return x.Message
	}
	return nil
}

func (x *ChannelPayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*ChannelPayload_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *ChannelPayload) GetFulfillment() *Fulfillment {
	if x, ok := x.GetContent().(*ChannelPayload_Fulfillment); ok {
		return x.Fulfillment
	}
	return nil
}

func (x *ChannelPayload) GetKeySolicitation() *KeySolicitation {
	if x, ok := x.GetContent().(*ChannelPayload_KeySolicitation); ok {
		return x.KeySolicitation
	}
	return nil
}

type isChannelPayload_Content interface {
	isChannelPayload_Content()
}

type ChannelPayload_Inception_ struct {
	Inception *ChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type ChannelPayload_Message struct {
	Message *EncryptedData `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type ChannelPayload_Membership struct {
	Membership *Membership `protobuf:"bytes,3,opt,name=membership,proto3,oneof"`
}

type ChannelPayload_Fulfillment struct {
	Fulfillment *Fulfillment `protobuf:"bytes,4,opt,name=fulfillment,proto3,oneof"`
}

type ChannelPayload_KeySolicitation struct {
	KeySolicitation *KeySolicitation `protobuf:"bytes,5,opt,name=key_solicitation,json=keySolicitation,proto3,oneof"`
}

func (*ChannelPayload_Inception_) isChannelPayload_Content() {}

func (*ChannelPayload_Message) isChannelPayload_Content() {}

func (*ChannelPayload_Membership) isChannelPayload_Content() {}

func (*ChannelPayload_Fulfillment) isChannelPayload_Content() {}

func (*ChannelPayload_KeySolicitation) isChannelPayload_Content() {}

// *
// DmChannelPayload
type DmChannelPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*DmChannelPayload_Inception_
	//	*DmChannelPayload_Membership
	//	*DmChannelPayload_Message
	//	*DmChannelPayload_Fulfillment
	//	*DmChannelPayload_KeySolicitation
	Content isDmChannelPayload_Content `protobuf_oneof:"content"`
}

func (x *DmChannelPayload) Reset() {
	*x = DmChannelPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmChannelPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmChannelPayload) ProtoMessage() {}

func (x *DmChannelPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmChannelPayload.ProtoReflect.Descriptor instead.
func (*DmChannelPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6}
}

func (m *DmChannelPayload) GetContent() isDmChannelPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *DmChannelPayload) GetInception() *DmChannelPayload_Inception {
	if x, ok := x.GetContent().(*DmChannelPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *DmChannelPayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*DmChannelPayload_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *DmChannelPayload) GetMessage() *EncryptedData {
	if x, ok := x.GetContent().(*DmChannelPayload_Message); ok {
		return x.Message
	}
	return nil
}

func (x *DmChannelPayload) GetFulfillment() *Fulfillment {
	if x, ok := x.GetContent().(*DmChannelPayload_Fulfillment); ok {
		return x.Fulfillment
	}
	return nil
}

func (x *DmChannelPayload) GetKeySolicitation() *KeySolicitation {
	if x, ok := x.GetContent().(*DmChannelPayload_KeySolicitation); ok {
		return x.KeySolicitation
	}
	return nil
}

type isDmChannelPayload_Content interface {
	isDmChannelPayload_Content()
}

type DmChannelPayload_Inception_ struct {
	Inception *DmChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type DmChannelPayload_Membership struct {
	Membership *Membership `protobuf:"bytes,2,opt,name=membership,proto3,oneof"`
}

type DmChannelPayload_Message struct {
	Message *EncryptedData `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

type DmChannelPayload_Fulfillment struct {
	Fulfillment *Fulfillment `protobuf:"bytes,4,opt,name=fulfillment,proto3,oneof"`
}

type DmChannelPayload_KeySolicitation struct {
	KeySolicitation *KeySolicitation `protobuf:"bytes,5,opt,name=key_solicitation,json=keySolicitation,proto3,oneof"`
}

func (*DmChannelPayload_Inception_) isDmChannelPayload_Content() {}

func (*DmChannelPayload_Membership) isDmChannelPayload_Content() {}

func (*DmChannelPayload_Message) isDmChannelPayload_Content() {}

func (*DmChannelPayload_Fulfillment) isDmChannelPayload_Content() {}

func (*DmChannelPayload_KeySolicitation) isDmChannelPayload_Content() {}

// *
// GdmChannelPayload
type GdmChannelPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*GdmChannelPayload_Inception_
	//	*GdmChannelPayload_Membership
	//	*GdmChannelPayload_Message
	//	*GdmChannelPayload_Fulfillment
	//	*GdmChannelPayload_KeySolicitation
	Content isGdmChannelPayload_Content `protobuf_oneof:"content"`
}

func (x *GdmChannelPayload) Reset() {
	*x = GdmChannelPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GdmChannelPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GdmChannelPayload) ProtoMessage() {}

func (x *GdmChannelPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GdmChannelPayload.ProtoReflect.Descriptor instead.
func (*GdmChannelPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7}
}

func (m *GdmChannelPayload) GetContent() isGdmChannelPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *GdmChannelPayload) GetInception() *GdmChannelPayload_Inception {
	if x, ok := x.GetContent().(*GdmChannelPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *GdmChannelPayload) GetMembership() *Membership {
	if x, ok := x.GetContent().(*GdmChannelPayload_Membership); ok {
		return x.Membership
	}
	return nil
}

func (x *GdmChannelPayload) GetMessage() *EncryptedData {
	if x, ok := x.GetContent().(*GdmChannelPayload_Message); ok {
		return x.Message
	}
	return nil
}

func (x *GdmChannelPayload) GetFulfillment() *Fulfillment {
	if x, ok := x.GetContent().(*GdmChannelPayload_Fulfillment); ok {
		return x.Fulfillment
	}
	return nil
}

func (x *GdmChannelPayload) GetKeySolicitation() *KeySolicitation {
	if x, ok := x.GetContent().(*GdmChannelPayload_KeySolicitation); ok {
		return x.KeySolicitation
	}
	return nil
}

type isGdmChannelPayload_Content interface {
	isGdmChannelPayload_Content()
}

type GdmChannelPayload_Inception_ struct {
	Inception *GdmChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type GdmChannelPayload_Membership struct {
	Membership *Membership `protobuf:"bytes,2,opt,name=membership,proto3,oneof"`
}

type GdmChannelPayload_Message struct {
	Message *EncryptedData `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

type GdmChannelPayload_Fulfillment struct {
	Fulfillment *Fulfillment `protobuf:"bytes,4,opt,name=fulfillment,proto3,oneof"`
}

type GdmChannelPayload_KeySolicitation struct {
	KeySolicitation *KeySolicitation `protobuf:"bytes,5,opt,name=key_solicitation,json=keySolicitation,proto3,oneof"`
}

func (*GdmChannelPayload_Inception_) isGdmChannelPayload_Content() {}

func (*GdmChannelPayload_Membership) isGdmChannelPayload_Content() {}

func (*GdmChannelPayload_Message) isGdmChannelPayload_Content() {}

func (*GdmChannelPayload_Fulfillment) isGdmChannelPayload_Content() {}

func (*GdmChannelPayload_KeySolicitation) isGdmChannelPayload_Content() {}

// *
// UserPayload
type UserPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserPayload_Inception_
	//	*UserPayload_UserMembership_
	//	*UserPayload_ToDevice_
	Content isUserPayload_Content `protobuf_oneof:"content"`
}

func (x *UserPayload) Reset() {
	*x = UserPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload) ProtoMessage() {}

func (x *UserPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload.ProtoReflect.Descriptor instead.
func (*UserPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8}
}

func (m *UserPayload) GetContent() isUserPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserPayload) GetInception() *UserPayload_Inception {
	if x, ok := x.GetContent().(*UserPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserPayload) GetUserMembership() *UserPayload_UserMembership {
	if x, ok := x.GetContent().(*UserPayload_UserMembership_); ok {
		return x.UserMembership
	}
	return nil
}

func (x *UserPayload) GetToDevice() *UserPayload_ToDevice {
	if x, ok := x.GetContent().(*UserPayload_ToDevice_); ok {
		return x.ToDevice
	}
	return nil
}

type isUserPayload_Content interface {
	isUserPayload_Content()
}

type UserPayload_Inception_ struct {
	Inception *UserPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserPayload_UserMembership_ struct {
	UserMembership *UserPayload_UserMembership `protobuf:"bytes,2,opt,name=user_membership,json=userMembership,proto3,oneof"`
}

type UserPayload_ToDevice_ struct {
	ToDevice *UserPayload_ToDevice `protobuf:"bytes,3,opt,name=to_device,json=toDevice,proto3,oneof"`
}

func (*UserPayload_Inception_) isUserPayload_Content() {}

func (*UserPayload_UserMembership_) isUserPayload_Content() {}

func (*UserPayload_ToDevice_) isUserPayload_Content() {}

// *
// KeySolicitation messages are used to request keys pertaining to a given session,
// stream and optional algorithm. For now, algorithm is megolm, but this can change.
type KeySolicitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// known session ids
	KnownSessionIds []string `protobuf:"bytes,3,rep,name=known_session_ids,json=knownSessionIds,proto3" json:"known_session_ids,omitempty"`
	SenderKey       string   `protobuf:"bytes,4,opt,name=sender_key,json=senderKey,proto3" json:"sender_key,omitempty"`
}

func (x *KeySolicitation) Reset() {
	*x = KeySolicitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySolicitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySolicitation) ProtoMessage() {}

func (x *KeySolicitation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySolicitation.ProtoReflect.Descriptor instead.
func (*KeySolicitation) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *KeySolicitation) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeySolicitation) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *KeySolicitation) GetKnownSessionIds() []string {
	if x != nil {
		return x.KnownSessionIds
	}
	return nil
}

func (x *KeySolicitation) GetSenderKey() string {
	if x != nil {
		return x.SenderKey
	}
	return ""
}

// *
// Fulfillment is used to acknowledge that the event depicted by event hash
// was responded to by a device over secure to device communication
// with the requested session.
// Used to prevent spurious processing of key requests
// by multiple requested users' devices.
type Fulfillment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginHash []byte   `protobuf:"bytes,1,opt,name=origin_hash,json=originHash,proto3" json:"origin_hash,omitempty"` // origin KeySolicitation event hash
	SessionIds []string `protobuf:"bytes,2,rep,name=session_ids,json=sessionIds,proto3" json:"session_ids,omitempty"`
	Algorithm  *string  `protobuf:"bytes,3,opt,name=algorithm,proto3,oneof" json:"algorithm,omitempty"`
}

func (x *Fulfillment) Reset() {
	*x = Fulfillment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fulfillment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fulfillment) ProtoMessage() {}

func (x *Fulfillment) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fulfillment.ProtoReflect.Descriptor instead.
func (*Fulfillment) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *Fulfillment) GetOriginHash() []byte {
	if x != nil {
		return x.OriginHash
	}
	return nil
}

func (x *Fulfillment) GetSessionIds() []string {
	if x != nil {
		return x.SessionIds
	}
	return nil
}

func (x *Fulfillment) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

// *
// UserSettingsPayload
type UserSettingsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserSettingsPayload_Inception_
	//	*UserSettingsPayload_FullyReadMarkers_
	Content isUserSettingsPayload_Content `protobuf_oneof:"content"`
}

func (x *UserSettingsPayload) Reset() {
	*x = UserSettingsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload) ProtoMessage() {}

func (x *UserSettingsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{11}
}

func (m *UserSettingsPayload) GetContent() isUserSettingsPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserSettingsPayload) GetInception() *UserSettingsPayload_Inception {
	if x, ok := x.GetContent().(*UserSettingsPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserSettingsPayload) GetFullyReadMarkers() *UserSettingsPayload_FullyReadMarkers {
	if x, ok := x.GetContent().(*UserSettingsPayload_FullyReadMarkers_); ok {
		return x.FullyReadMarkers
	}
	return nil
}

type isUserSettingsPayload_Content interface {
	isUserSettingsPayload_Content()
}

type UserSettingsPayload_Inception_ struct {
	Inception *UserSettingsPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserSettingsPayload_FullyReadMarkers_ struct {
	FullyReadMarkers *UserSettingsPayload_FullyReadMarkers `protobuf:"bytes,2,opt,name=fully_read_markers,json=fullyReadMarkers,proto3,oneof"`
}

func (*UserSettingsPayload_Inception_) isUserSettingsPayload_Content() {}

func (*UserSettingsPayload_FullyReadMarkers_) isUserSettingsPayload_Content() {}

// *
// UserDeviceKeyPayload
type UserDeviceKeyPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*UserDeviceKeyPayload_Inception_
	//	*UserDeviceKeyPayload_UserDeviceKey_
	Content isUserDeviceKeyPayload_Content `protobuf_oneof:"content"`
}

func (x *UserDeviceKeyPayload) Reset() {
	*x = UserDeviceKeyPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload) ProtoMessage() {}

func (x *UserDeviceKeyPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{12}
}

func (m *UserDeviceKeyPayload) GetContent() isUserDeviceKeyPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *UserDeviceKeyPayload) GetInception() *UserDeviceKeyPayload_Inception {
	if x, ok := x.GetContent().(*UserDeviceKeyPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *UserDeviceKeyPayload) GetUserDeviceKey() *UserDeviceKeyPayload_UserDeviceKey {
	if x, ok := x.GetContent().(*UserDeviceKeyPayload_UserDeviceKey_); ok {
		return x.UserDeviceKey
	}
	return nil
}

type isUserDeviceKeyPayload_Content interface {
	isUserDeviceKeyPayload_Content()
}

type UserDeviceKeyPayload_Inception_ struct {
	Inception *UserDeviceKeyPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type UserDeviceKeyPayload_UserDeviceKey_ struct {
	UserDeviceKey *UserDeviceKeyPayload_UserDeviceKey `protobuf:"bytes,2,opt,name=user_device_key,json=userDeviceKey,proto3,oneof"`
}

func (*UserDeviceKeyPayload_Inception_) isUserDeviceKeyPayload_Content() {}

func (*UserDeviceKeyPayload_UserDeviceKey_) isUserDeviceKeyPayload_Content() {}

// *
// MediaPayload
type MediaPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*MediaPayload_Inception_
	//	*MediaPayload_Chunk_
	Content isMediaPayload_Content `protobuf_oneof:"content"`
}

func (x *MediaPayload) Reset() {
	*x = MediaPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPayload) ProtoMessage() {}

func (x *MediaPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPayload.ProtoReflect.Descriptor instead.
func (*MediaPayload) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13}
}

func (m *MediaPayload) GetContent() isMediaPayload_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *MediaPayload) GetInception() *MediaPayload_Inception {
	if x, ok := x.GetContent().(*MediaPayload_Inception_); ok {
		return x.Inception
	}
	return nil
}

func (x *MediaPayload) GetChunk() *MediaPayload_Chunk {
	if x, ok := x.GetContent().(*MediaPayload_Chunk_); ok {
		return x.Chunk
	}
	return nil
}

type isMediaPayload_Content interface {
	isMediaPayload_Content()
}

type MediaPayload_Inception_ struct {
	Inception *MediaPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3,oneof"`
}

type MediaPayload_Chunk_ struct {
	Chunk *MediaPayload_Chunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*MediaPayload_Inception_) isMediaPayload_Content() {}

func (*MediaPayload_Chunk_) isMediaPayload_Content() {}

// *
// Snapshot contains a summary of all state events up to the most recent miniblock
type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Snapshot data specific for each stream type.
	//
	// Types that are assignable to Content:
	//
	//	*Snapshot_SpaceContent
	//	*Snapshot_ChannelContent
	//	*Snapshot_UserContent
	//	*Snapshot_UserSettingsContent
	//	*Snapshot_UserDeviceKeyContent
	//	*Snapshot_MediaContent
	//	*Snapshot_DmChannelContent
	//	*Snapshot_GdmChannelContent
	Content isSnapshot_Content `protobuf_oneof:"content"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{14}
}

func (m *Snapshot) GetContent() isSnapshot_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Snapshot) GetSpaceContent() *SpacePayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_SpaceContent); ok {
		return x.SpaceContent
	}
	return nil
}

func (x *Snapshot) GetChannelContent() *ChannelPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_ChannelContent); ok {
		return x.ChannelContent
	}
	return nil
}

func (x *Snapshot) GetUserContent() *UserPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_UserContent); ok {
		return x.UserContent
	}
	return nil
}

func (x *Snapshot) GetUserSettingsContent() *UserSettingsPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_UserSettingsContent); ok {
		return x.UserSettingsContent
	}
	return nil
}

func (x *Snapshot) GetUserDeviceKeyContent() *UserDeviceKeyPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_UserDeviceKeyContent); ok {
		return x.UserDeviceKeyContent
	}
	return nil
}

func (x *Snapshot) GetMediaContent() *MediaPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_MediaContent); ok {
		return x.MediaContent
	}
	return nil
}

func (x *Snapshot) GetDmChannelContent() *DmChannelPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_DmChannelContent); ok {
		return x.DmChannelContent
	}
	return nil
}

func (x *Snapshot) GetGdmChannelContent() *GdmChannelPayload_Snapshot {
	if x, ok := x.GetContent().(*Snapshot_GdmChannelContent); ok {
		return x.GdmChannelContent
	}
	return nil
}

type isSnapshot_Content interface {
	isSnapshot_Content()
}

type Snapshot_SpaceContent struct {
	SpaceContent *SpacePayload_Snapshot `protobuf:"bytes,101,opt,name=space_content,json=spaceContent,proto3,oneof"`
}

type Snapshot_ChannelContent struct {
	ChannelContent *ChannelPayload_Snapshot `protobuf:"bytes,102,opt,name=channel_content,json=channelContent,proto3,oneof"`
}

type Snapshot_UserContent struct {
	UserContent *UserPayload_Snapshot `protobuf:"bytes,103,opt,name=user_content,json=userContent,proto3,oneof"`
}

type Snapshot_UserSettingsContent struct {
	UserSettingsContent *UserSettingsPayload_Snapshot `protobuf:"bytes,104,opt,name=user_settings_content,json=userSettingsContent,proto3,oneof"`
}

type Snapshot_UserDeviceKeyContent struct {
	UserDeviceKeyContent *UserDeviceKeyPayload_Snapshot `protobuf:"bytes,105,opt,name=user_device_key_content,json=userDeviceKeyContent,proto3,oneof"`
}

type Snapshot_MediaContent struct {
	MediaContent *MediaPayload_Snapshot `protobuf:"bytes,106,opt,name=media_content,json=mediaContent,proto3,oneof"`
}

type Snapshot_DmChannelContent struct {
	DmChannelContent *DmChannelPayload_Snapshot `protobuf:"bytes,107,opt,name=dm_channel_content,json=dmChannelContent,proto3,oneof"`
}

type Snapshot_GdmChannelContent struct {
	GdmChannelContent *GdmChannelPayload_Snapshot `protobuf:"bytes,108,opt,name=gdm_channel_content,json=gdmChannelContent,proto3,oneof"`
}

func (*Snapshot_SpaceContent) isSnapshot_Content() {}

func (*Snapshot_ChannelContent) isSnapshot_Content() {}

func (*Snapshot_UserContent) isSnapshot_Content() {}

func (*Snapshot_UserSettingsContent) isSnapshot_Content() {}

func (*Snapshot_UserDeviceKeyContent) isSnapshot_Content() {}

func (*Snapshot_MediaContent) isSnapshot_Content() {}

func (*Snapshot_DmChannelContent) isSnapshot_Content() {}

func (*Snapshot_GdmChannelContent) isSnapshot_Content() {}

// *
// Derived event is produces by server when there should be additional event to compliment
// received event. For example, when user joins a space through event in the space stream, server will produce a derived event
// in a user stream to indicate that user joined a particual space.
//
// EventRef is used to reference the event that caused the derived event to be produced.
type EventRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId  string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *EventRef) Reset() {
	*x = EventRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRef) ProtoMessage() {}

func (x *EventRef) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRef.ProtoReflect.Descriptor instead.
func (*EventRef) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{15}
}

func (x *EventRef) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *EventRef) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *EventRef) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// *
// StreamSettings is a part of inception payload for each stream type.
type StreamSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This setting controls block production rate for a given stream.
	// It is used for testing and is used only by nodes running in test mode.
	MiniblockTimeMs uint64 `protobuf:"varint,1,opt,name=miniblock_time_ms,json=miniblockTimeMs,proto3" json:"miniblock_time_ms,omitempty"`
	// Minimum number of events before we take a snapshot
	MinEventsPerSnapshot int32 `protobuf:"varint,2,opt,name=min_events_per_snapshot,json=minEventsPerSnapshot,proto3" json:"min_events_per_snapshot,omitempty"`
}

func (x *StreamSettings) Reset() {
	*x = StreamSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSettings) ProtoMessage() {}

func (x *StreamSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSettings.ProtoReflect.Descriptor instead.
func (*StreamSettings) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{16}
}

func (x *StreamSettings) GetMiniblockTimeMs() uint64 {
	if x != nil {
		return x.MiniblockTimeMs
	}
	return 0
}

func (x *StreamSettings) GetMinEventsPerSnapshot() int32 {
	if x != nil {
		return x.MinEventsPerSnapshot
	}
	return 0
}

type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     MembershipOp `protobuf:"varint,1,opt,name=op,proto3,enum=river.MembershipOp" json:"op,omitempty"`
	UserId string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{17}
}

func (x *Membership) GetOp() MembershipOp {
	if x != nil {
		return x.Op
	}
	return MembershipOp_SO_UNSPECIFIED
}

func (x *Membership) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type EncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Ciphertext of the encryption envelope.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// *
	// Encryption algorithm  used to encrypt this event.
	Algorithm *string `protobuf:"bytes,2,opt,name=algorithm,proto3,oneof" json:"algorithm,omitempty"`
	// *
	// Sender device public key identifying the sender's device.
	SenderKey *string `protobuf:"bytes,3,opt,name=sender_key,json=senderKey,proto3,oneof" json:"sender_key,omitempty"`
	// *
	// Sender's device id.
	DeviceId *string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
	// *
	// The ID of the session used to encrypt the message.
	SessionId *string `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
}

func (x *EncryptedData) Reset() {
	*x = EncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedData) ProtoMessage() {}

func (x *EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedData.ProtoReflect.Descriptor instead.
func (*EncryptedData) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{18}
}

func (x *EncryptedData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EncryptedData) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

func (x *EncryptedData) GetSenderKey() string {
	if x != nil && x.SenderKey != nil {
		return *x.SenderKey
	}
	return ""
}

func (x *EncryptedData) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *EncryptedData) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type EncryptedDeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Mapping from device identifier to encryption envelope.
	Ciphertext map[string]*EncryptedMessageEnvelope `protobuf:"bytes,1,rep,name=ciphertext,proto3" json:"ciphertext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// *
	// Encryption algorithm  used to encrypt this event.
	Algorithm *string `protobuf:"bytes,2,opt,name=algorithm,proto3,oneof" json:"algorithm,omitempty"`
}

func (x *EncryptedDeviceData) Reset() {
	*x = EncryptedDeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedDeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedDeviceData) ProtoMessage() {}

func (x *EncryptedDeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedDeviceData.ProtoReflect.Descriptor instead.
func (*EncryptedDeviceData) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{19}
}

func (x *EncryptedDeviceData) GetCiphertext() map[string]*EncryptedMessageEnvelope {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *EncryptedDeviceData) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

type EncryptedMessageEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either 0 for pre-key messages or 1 after session is established.
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// *
	// Ciphertext of the encryption envelope.
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *EncryptedMessageEnvelope) Reset() {
	*x = EncryptedMessageEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedMessageEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMessageEnvelope) ProtoMessage() {}

func (x *EncryptedMessageEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMessageEnvelope.ProtoReflect.Descriptor instead.
func (*EncryptedMessageEnvelope) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{20}
}

func (x *EncryptedMessageEnvelope) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EncryptedMessageEnvelope) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// *
// DeviceKeys are used to store public identity keys and signatures for a particular
// user's device.
//
// device_id: unique identifier for the device - River hash over RDK public part.
// algorithms: encryption algorithms supported by the device.
// keys: public identity keys (signing keys) for the device with property in format <algorithm>:<device_id>.
//
//	Keys should be encoded as specified by key algorithm.
//
// signatures: map from <algorithm>:<device_id> to signature.
type DeviceKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string            `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Algorithms []string          `protobuf:"bytes,2,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	Keys       map[string]string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Signatures map[string]string `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceKeys) Reset() {
	*x = DeviceKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceKeys) ProtoMessage() {}

func (x *DeviceKeys) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceKeys.ProtoReflect.Descriptor instead.
func (*DeviceKeys) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{21}
}

func (x *DeviceKeys) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceKeys) GetAlgorithms() []string {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

func (x *DeviceKeys) GetKeys() map[string]string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeviceKeys) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// *
// FallbackKeys are used to store "pre-key" messages for a particular user's device.
//
// algo_key_id: map from <algorithm>:<key_id> to Key.
type FallbackKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgoKeyId map[string]*Key `protobuf:"bytes,1,rep,name=algo_key_id,json=algoKeyId,proto3" json:"algo_key_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FallbackKeys) Reset() {
	*x = FallbackKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackKeys) ProtoMessage() {}

func (x *FallbackKeys) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackKeys.ProtoReflect.Descriptor instead.
func (*FallbackKeys) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{22}
}

func (x *FallbackKeys) GetAlgoKeyId() map[string]*Key {
	if x != nil {
		return x.AlgoKeyId
	}
	return nil
}

// *
// Key is used to store fallback keys and depending on the algorithm signatures
// that are formatted as <algorithm>:<device_id> mapped to <signature>
//
// key: key value
// signatures: map from <algorithm>:<device_id> to signature for given key.
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Signatures map[string]string `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{23}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Key) GetSignatures() map[string]string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SyncCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddress       string `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	StreamId          string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	MinipoolGen       int64  `protobuf:"varint,3,opt,name=minipool_gen,json=minipoolGen,proto3" json:"minipool_gen,omitempty"`
	MinipoolSlot      int64  `protobuf:"varint,4,opt,name=minipool_slot,json=minipoolSlot,proto3" json:"minipool_slot,omitempty"`
	PrevMiniblockHash []byte `protobuf:"bytes,5,opt,name=prev_miniblock_hash,json=prevMiniblockHash,proto3" json:"prev_miniblock_hash,omitempty"`
}

func (x *SyncCookie) Reset() {
	*x = SyncCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCookie) ProtoMessage() {}

func (x *SyncCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCookie.ProtoReflect.Descriptor instead.
func (*SyncCookie) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{24}
}

func (x *SyncCookie) GetNodeAddress() string {
	if x != nil {
		return x.NodeAddress
	}
	return ""
}

func (x *SyncCookie) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SyncCookie) GetMinipoolGen() int64 {
	if x != nil {
		return x.MinipoolGen
	}
	return 0
}

func (x *SyncCookie) GetMinipoolSlot() int64 {
	if x != nil {
		return x.MinipoolSlot
	}
	return 0
}

func (x *SyncCookie) GetPrevMiniblockHash() []byte {
	if x != nil {
		return x.PrevMiniblockHash
	}
	return nil
}

type StreamAndCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events          []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextSyncCookie  *SyncCookie `protobuf:"bytes,2,opt,name=next_sync_cookie,json=nextSyncCookie,proto3" json:"next_sync_cookie,omitempty"`
	StartSyncCookie *SyncCookie `protobuf:"bytes,3,opt,name=start_sync_cookie,json=startSyncCookie,proto3" json:"start_sync_cookie,omitempty"`
}

func (x *StreamAndCookie) Reset() {
	*x = StreamAndCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAndCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAndCookie) ProtoMessage() {}

func (x *StreamAndCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAndCookie.ProtoReflect.Descriptor instead.
func (*StreamAndCookie) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{25}
}

func (x *StreamAndCookie) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *StreamAndCookie) GetNextSyncCookie() *SyncCookie {
	if x != nil {
		return x.NextSyncCookie
	}
	return nil
}

func (x *StreamAndCookie) GetStartSyncCookie() *SyncCookie {
	if x != nil {
		return x.StartSyncCookie
	}
	return nil
}

type CreateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events   []*Envelope `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	StreamId string      `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // stream_id should match the stream_id in the inception payload of the first event
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{26}
}

func (x *CreateStreamRequest) GetEvents() []*Envelope {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CreateStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type CreateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all events in current minipool and cookie allowing to sync from the end of the stream
	Stream *StreamAndCookie `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// all blocks since the latest snapshot, miniblocks[0].header is the latest snapshot
	Miniblocks []*Miniblock `protobuf:"bytes,2,rep,name=miniblocks,proto3" json:"miniblocks,omitempty"`
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{27}
}

func (x *CreateStreamResponse) GetStream() *StreamAndCookie {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *CreateStreamResponse) GetMiniblocks() []*Miniblock {
	if x != nil {
		return x.Miniblocks
	}
	return nil
}

type GetStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{28}
}

func (x *GetStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type GetStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all events in current minipool and cookie allowing to sync from the end of the stream
	Stream *StreamAndCookie `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// all blocks since the latest snapshot, miniblocks[0].header is the latest snapshot
	Miniblocks []*Miniblock `protobuf:"bytes,2,rep,name=miniblocks,proto3" json:"miniblocks,omitempty"`
}

func (x *GetStreamResponse) Reset() {
	*x = GetStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamResponse) ProtoMessage() {}

func (x *GetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamResponse.ProtoReflect.Descriptor instead.
func (*GetStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{29}
}

func (x *GetStreamResponse) GetStream() *StreamAndCookie {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *GetStreamResponse) GetMiniblocks() []*Miniblock {
	if x != nil {
		return x.Miniblocks
	}
	return nil
}

type GetMiniblocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId      string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	FromInclusive int64  `protobuf:"varint,2,opt,name=fromInclusive,proto3" json:"fromInclusive,omitempty"`
	ToExclusive   int64  `protobuf:"varint,3,opt,name=toExclusive,proto3" json:"toExclusive,omitempty"`
}

func (x *GetMiniblocksRequest) Reset() {
	*x = GetMiniblocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiniblocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiniblocksRequest) ProtoMessage() {}

func (x *GetMiniblocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiniblocksRequest.ProtoReflect.Descriptor instead.
func (*GetMiniblocksRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{30}
}

func (x *GetMiniblocksRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *GetMiniblocksRequest) GetFromInclusive() int64 {
	if x != nil {
		return x.FromInclusive
	}
	return 0
}

func (x *GetMiniblocksRequest) GetToExclusive() int64 {
	if x != nil {
		return x.ToExclusive
	}
	return 0
}

type GetMiniblocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Miniblocks []*Miniblock `protobuf:"bytes,1,rep,name=miniblocks,proto3" json:"miniblocks,omitempty"`
	// terminus: true if there are no more blocks to fetch because they've been garbage collected, or you've reached block 0
	Terminus bool `protobuf:"varint,2,opt,name=terminus,proto3" json:"terminus,omitempty"`
}

func (x *GetMiniblocksResponse) Reset() {
	*x = GetMiniblocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiniblocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiniblocksResponse) ProtoMessage() {}

func (x *GetMiniblocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiniblocksResponse.ProtoReflect.Descriptor instead.
func (*GetMiniblocksResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{31}
}

func (x *GetMiniblocksResponse) GetMiniblocks() []*Miniblock {
	if x != nil {
		return x.Miniblocks
	}
	return nil
}

func (x *GetMiniblocksResponse) GetTerminus() bool {
	if x != nil {
		return x.Terminus
	}
	return false
}

type GetLastMiniblockHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *GetLastMiniblockHashRequest) Reset() {
	*x = GetLastMiniblockHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastMiniblockHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastMiniblockHashRequest) ProtoMessage() {}

func (x *GetLastMiniblockHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastMiniblockHashRequest.ProtoReflect.Descriptor instead.
func (*GetLastMiniblockHashRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{32}
}

func (x *GetLastMiniblockHashRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type GetLastMiniblockHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	MiniblockNum int64  `protobuf:"varint,2,opt,name=miniblock_num,json=miniblockNum,proto3" json:"miniblock_num,omitempty"`
}

func (x *GetLastMiniblockHashResponse) Reset() {
	*x = GetLastMiniblockHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastMiniblockHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastMiniblockHashResponse) ProtoMessage() {}

func (x *GetLastMiniblockHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastMiniblockHashResponse.ProtoReflect.Descriptor instead.
func (*GetLastMiniblockHashResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{33}
}

func (x *GetLastMiniblockHashResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetLastMiniblockHashResponse) GetMiniblockNum() int64 {
	if x != nil {
		return x.MiniblockNum
	}
	return 0
}

type AddEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string    `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Event    *Envelope `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *AddEventRequest) Reset() {
	*x = AddEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventRequest) ProtoMessage() {}

func (x *AddEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventRequest.ProtoReflect.Descriptor instead.
func (*AddEventRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{34}
}

func (x *AddEventRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *AddEventRequest) GetEvent() *Envelope {
	if x != nil {
		return x.Event
	}
	return nil
}

type AddEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEventResponse) Reset() {
	*x = AddEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventResponse) ProtoMessage() {}

func (x *AddEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventResponse.ProtoReflect.Descriptor instead.
func (*AddEventResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{35}
}

type SyncStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncPos []*SyncCookie `protobuf:"bytes,1,rep,name=sync_pos,json=syncPos,proto3" json:"sync_pos,omitempty"`
}

func (x *SyncStreamsRequest) Reset() {
	*x = SyncStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreamsRequest) ProtoMessage() {}

func (x *SyncStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreamsRequest.ProtoReflect.Descriptor instead.
func (*SyncStreamsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{36}
}

func (x *SyncStreamsRequest) GetSyncPos() []*SyncCookie {
	if x != nil {
		return x.SyncPos
	}
	return nil
}

type SyncStreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncId string           `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	Stream *StreamAndCookie `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *SyncStreamsResponse) Reset() {
	*x = SyncStreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStreamsResponse) ProtoMessage() {}

func (x *SyncStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStreamsResponse.ProtoReflect.Descriptor instead.
func (*SyncStreamsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{37}
}

func (x *SyncStreamsResponse) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *SyncStreamsResponse) GetStream() *StreamAndCookie {
	if x != nil {
		return x.Stream
	}
	return nil
}

type AddStreamToSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncId  string      `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	SyncPos *SyncCookie `protobuf:"bytes,2,opt,name=sync_pos,json=syncPos,proto3" json:"sync_pos,omitempty"`
}

func (x *AddStreamToSyncRequest) Reset() {
	*x = AddStreamToSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddStreamToSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamToSyncRequest) ProtoMessage() {}

func (x *AddStreamToSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamToSyncRequest.ProtoReflect.Descriptor instead.
func (*AddStreamToSyncRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{38}
}

func (x *AddStreamToSyncRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *AddStreamToSyncRequest) GetSyncPos() *SyncCookie {
	if x != nil {
		return x.SyncPos
	}
	return nil
}

type AddStreamToSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddStreamToSyncResponse) Reset() {
	*x = AddStreamToSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddStreamToSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamToSyncResponse) ProtoMessage() {}

func (x *AddStreamToSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamToSyncResponse.ProtoReflect.Descriptor instead.
func (*AddStreamToSyncResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{39}
}

type RemoveStreamFromSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncId   string `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *RemoveStreamFromSyncRequest) Reset() {
	*x = RemoveStreamFromSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStreamFromSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamFromSyncRequest) ProtoMessage() {}

func (x *RemoveStreamFromSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamFromSyncRequest.ProtoReflect.Descriptor instead.
func (*RemoveStreamFromSyncRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{40}
}

func (x *RemoveStreamFromSyncRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *RemoveStreamFromSyncRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type RemoveStreamFromSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveStreamFromSyncResponse) Reset() {
	*x = RemoveStreamFromSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStreamFromSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamFromSyncResponse) ProtoMessage() {}

func (x *RemoveStreamFromSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamFromSyncResponse.ProtoReflect.Descriptor instead.
func (*RemoveStreamFromSyncResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{41}
}

type RemoveSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncId string `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
}

func (x *RemoveSyncRequest) Reset() {
	*x = RemoveSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSyncRequest) ProtoMessage() {}

func (x *RemoveSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSyncRequest.ProtoReflect.Descriptor instead.
func (*RemoveSyncRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{42}
}

func (x *RemoveSyncRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

type RemoveSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSyncResponse) Reset() {
	*x = RemoveSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSyncResponse) ProtoMessage() {}

func (x *RemoveSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSyncResponse.ProtoReflect.Descriptor instead.
func (*RemoveSyncResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{43}
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug string `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{44}
}

func (x *InfoRequest) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graffiti string `protobuf:"bytes,1,opt,name=graffiti,proto3" json:"graffiti,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{45}
}

func (x *InfoResponse) GetGraffiti() string {
	if x != nil {
		return x.Graffiti
	}
	return ""
}

type SpacePayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *SpacePayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// streamId: Channel
	Channels map[string]*SpacePayload_Channel `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// userId: Membership
	Memberships map[string]*Membership `protobuf:"bytes,3,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// userId: Username
	Usernames map[string]*SpacePayload_WrappedEncryptedData `protobuf:"bytes,4,rep,name=usernames,proto3" json:"usernames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// userId: Displayname
	DisplayNames map[string]*SpacePayload_WrappedEncryptedData `protobuf:"bytes,5,rep,name=display_names,json=displayNames,proto3" json:"display_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpacePayload_Snapshot) Reset() {
	*x = SpacePayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Snapshot) ProtoMessage() {}

func (x *SpacePayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Snapshot.ProtoReflect.Descriptor instead.
func (*SpacePayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SpacePayload_Snapshot) GetInception() *SpacePayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *SpacePayload_Snapshot) GetChannels() map[string]*SpacePayload_Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *SpacePayload_Snapshot) GetMemberships() map[string]*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *SpacePayload_Snapshot) GetUsernames() map[string]*SpacePayload_WrappedEncryptedData {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *SpacePayload_Snapshot) GetDisplayNames() map[string]*SpacePayload_WrappedEncryptedData {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

type SpacePayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *SpacePayload_Inception) Reset() {
	*x = SpacePayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Inception) ProtoMessage() {}

func (x *SpacePayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Inception.ProtoReflect.Descriptor instead.
func (*SpacePayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 1}
}

func (x *SpacePayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SpacePayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type SpacePayload_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op                ChannelOp      `protobuf:"varint,1,opt,name=op,proto3,enum=river.ChannelOp" json:"op,omitempty"`
	ChannelId         string         `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	OriginEvent       *EventRef      `protobuf:"bytes,3,opt,name=origin_event,json=originEvent,proto3" json:"origin_event,omitempty"`
	ChannelProperties *EncryptedData `protobuf:"bytes,4,opt,name=channel_properties,json=channelProperties,proto3" json:"channel_properties,omitempty"`
}

func (x *SpacePayload_Channel) Reset() {
	*x = SpacePayload_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_Channel) ProtoMessage() {}

func (x *SpacePayload_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_Channel.ProtoReflect.Descriptor instead.
func (*SpacePayload_Channel) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 2}
}

func (x *SpacePayload_Channel) GetOp() ChannelOp {
	if x != nil {
		return x.Op
	}
	return ChannelOp_CO_UNSPECIFIED
}

func (x *SpacePayload_Channel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SpacePayload_Channel) GetOriginEvent() *EventRef {
	if x != nil {
		return x.OriginEvent
	}
	return nil
}

func (x *SpacePayload_Channel) GetChannelProperties() *EncryptedData {
	if x != nil {
		return x.ChannelProperties
	}
	return nil
}

type SpacePayload_WrappedEncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *EncryptedData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	EventNum int64          `protobuf:"varint,2,opt,name=event_num,json=eventNum,proto3" json:"event_num,omitempty"`
}

func (x *SpacePayload_WrappedEncryptedData) Reset() {
	*x = SpacePayload_WrappedEncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePayload_WrappedEncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePayload_WrappedEncryptedData) ProtoMessage() {}

func (x *SpacePayload_WrappedEncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePayload_WrappedEncryptedData.ProtoReflect.Descriptor instead.
func (*SpacePayload_WrappedEncryptedData) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4, 3}
}

func (x *SpacePayload_WrappedEncryptedData) GetData() *EncryptedData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SpacePayload_WrappedEncryptedData) GetEventNum() int64 {
	if x != nil {
		return x.EventNum
	}
	return 0
}

type ChannelPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *ChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// userId: Membership
	Memberships map[string]*Membership `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelPayload_Snapshot) Reset() {
	*x = ChannelPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Snapshot) ProtoMessage() {}

func (x *ChannelPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ChannelPayload_Snapshot) GetInception() *ChannelPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *ChannelPayload_Snapshot) GetMemberships() map[string]*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type ChannelPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SpaceId  string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// *
	// channel_name and channel_topic from this payload will be used to
	// create associated with that channel space event for stream as we agreed
	// that channel names and topics will be delivered using space stream
	ChannelProperties *EncryptedData  `protobuf:"bytes,4,opt,name=channel_properties,json=channelProperties,proto3" json:"channel_properties,omitempty"`
	Settings          *StreamSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ChannelPayload_Inception) Reset() {
	*x = ChannelPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPayload_Inception) ProtoMessage() {}

func (x *ChannelPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPayload_Inception.ProtoReflect.Descriptor instead.
func (*ChannelPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ChannelPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *ChannelPayload_Inception) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ChannelPayload_Inception) GetChannelProperties() *EncryptedData {
	if x != nil {
		return x.ChannelProperties
	}
	return nil
}

func (x *ChannelPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type DmChannelPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inception   *DmChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	Memberships map[string]*Membership      `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DmChannelPayload_Snapshot) Reset() {
	*x = DmChannelPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmChannelPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmChannelPayload_Snapshot) ProtoMessage() {}

func (x *DmChannelPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmChannelPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*DmChannelPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DmChannelPayload_Snapshot) GetInception() *DmChannelPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *DmChannelPayload_Snapshot) GetMemberships() map[string]*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type DmChannelPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId      string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	FirstPartyId  string          `protobuf:"bytes,2,opt,name=first_party_id,json=firstPartyId,proto3" json:"first_party_id,omitempty"`
	SecondPartyId string          `protobuf:"bytes,3,opt,name=second_party_id,json=secondPartyId,proto3" json:"second_party_id,omitempty"`
	Settings      *StreamSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DmChannelPayload_Inception) Reset() {
	*x = DmChannelPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmChannelPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmChannelPayload_Inception) ProtoMessage() {}

func (x *DmChannelPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmChannelPayload_Inception.ProtoReflect.Descriptor instead.
func (*DmChannelPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6, 1}
}

func (x *DmChannelPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *DmChannelPayload_Inception) GetFirstPartyId() string {
	if x != nil {
		return x.FirstPartyId
	}
	return ""
}

func (x *DmChannelPayload_Inception) GetSecondPartyId() string {
	if x != nil {
		return x.SecondPartyId
	}
	return ""
}

func (x *DmChannelPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GdmChannelPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inception   *GdmChannelPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	Memberships map[string]*Membership       `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GdmChannelPayload_Snapshot) Reset() {
	*x = GdmChannelPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GdmChannelPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GdmChannelPayload_Snapshot) ProtoMessage() {}

func (x *GdmChannelPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GdmChannelPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*GdmChannelPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GdmChannelPayload_Snapshot) GetInception() *GdmChannelPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *GdmChannelPayload_Snapshot) GetMemberships() map[string]*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type GdmChannelPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId          string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ChannelProperties *EncryptedData  `protobuf:"bytes,2,opt,name=channel_properties,json=channelProperties,proto3" json:"channel_properties,omitempty"`
	Settings          *StreamSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *GdmChannelPayload_Inception) Reset() {
	*x = GdmChannelPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GdmChannelPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GdmChannelPayload_Inception) ProtoMessage() {}

func (x *GdmChannelPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GdmChannelPayload_Inception.ProtoReflect.Descriptor instead.
func (*GdmChannelPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7, 1}
}

func (x *GdmChannelPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *GdmChannelPayload_Inception) GetChannelProperties() *EncryptedData {
	if x != nil {
		return x.ChannelProperties
	}
	return nil
}

func (x *GdmChannelPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *UserPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// streamId: UserMembership
	Memberships map[string]*UserPayload_UserMembership `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserPayload_Snapshot) Reset() {
	*x = UserPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_Snapshot) ProtoMessage() {}

func (x *UserPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*UserPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UserPayload_Snapshot) GetInception() *UserPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *UserPayload_Snapshot) GetMemberships() map[string]*UserPayload_UserMembership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type UserPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UserPayload_Inception) Reset() {
	*x = UserPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_Inception) ProtoMessage() {}

func (x *UserPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UserPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserPayload_UserMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId    string       `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	OriginEvent *EventRef    `protobuf:"bytes,2,opt,name=origin_event,json=originEvent,proto3" json:"origin_event,omitempty"`
	InviterId   string       `protobuf:"bytes,3,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	Op          MembershipOp `protobuf:"varint,4,opt,name=op,proto3,enum=river.MembershipOp" json:"op,omitempty"`
}

func (x *UserPayload_UserMembership) Reset() {
	*x = UserPayload_UserMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_UserMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_UserMembership) ProtoMessage() {}

func (x *UserPayload_UserMembership) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_UserMembership.ProtoReflect.Descriptor instead.
func (*UserPayload_UserMembership) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 2}
}

func (x *UserPayload_UserMembership) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserPayload_UserMembership) GetOriginEvent() *EventRef {
	if x != nil {
		return x.OriginEvent
	}
	return nil
}

func (x *UserPayload_UserMembership) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *UserPayload_UserMembership) GetOp() MembershipOp {
	if x != nil {
		return x.Op
	}
	return MembershipOp_SO_UNSPECIFIED
}

type UserPayload_ToDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   *EncryptedDeviceData `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SenderKey string               `protobuf:"bytes,3,opt,name=sender_key,json=senderKey,proto3" json:"sender_key,omitempty"`
}

func (x *UserPayload_ToDevice) Reset() {
	*x = UserPayload_ToDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayload_ToDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayload_ToDevice) ProtoMessage() {}

func (x *UserPayload_ToDevice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayload_ToDevice.ProtoReflect.Descriptor instead.
func (*UserPayload_ToDevice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8, 3}
}

func (x *UserPayload_ToDevice) GetMessage() *EncryptedDeviceData {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *UserPayload_ToDevice) GetSenderKey() string {
	if x != nil {
		return x.SenderKey
	}
	return ""
}

type UserSettingsPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *UserSettingsPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// channelStreamId: FullyReadMarker
	FullyReadMarkers map[string]*UserSettingsPayload_FullyReadMarkers `protobuf:"bytes,2,rep,name=fully_read_markers,json=fullyReadMarkers,proto3" json:"fully_read_markers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserSettingsPayload_Snapshot) Reset() {
	*x = UserSettingsPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_Snapshot) ProtoMessage() {}

func (x *UserSettingsPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{11, 0}
}

func (x *UserSettingsPayload_Snapshot) GetInception() *UserSettingsPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *UserSettingsPayload_Snapshot) GetFullyReadMarkers() map[string]*UserSettingsPayload_FullyReadMarkers {
	if x != nil {
		return x.FullyReadMarkers
	}
	return nil
}

type UserSettingsPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UserSettingsPayload_Inception) Reset() {
	*x = UserSettingsPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_Inception) ProtoMessage() {}

func (x *UserSettingsPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{11, 1}
}

func (x *UserSettingsPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserSettingsPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserSettingsPayload_FullyReadMarkers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelStreamId string         `protobuf:"bytes,1,opt,name=channel_stream_id,json=channelStreamId,proto3" json:"channel_stream_id,omitempty"`
	Content         *EncryptedData `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UserSettingsPayload_FullyReadMarkers) Reset() {
	*x = UserSettingsPayload_FullyReadMarkers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingsPayload_FullyReadMarkers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingsPayload_FullyReadMarkers) ProtoMessage() {}

func (x *UserSettingsPayload_FullyReadMarkers) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingsPayload_FullyReadMarkers.ProtoReflect.Descriptor instead.
func (*UserSettingsPayload_FullyReadMarkers) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{11, 2}
}

func (x *UserSettingsPayload_FullyReadMarkers) GetChannelStreamId() string {
	if x != nil {
		return x.ChannelStreamId
	}
	return ""
}

func (x *UserSettingsPayload_FullyReadMarkers) GetContent() *EncryptedData {
	if x != nil {
		return x.Content
	}
	return nil
}

type UserDeviceKeyPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inception
	Inception *UserDeviceKeyPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
	// deviceId: UserDeviceKey
	UserDeviceKeys map[string]*UserDeviceKeyPayload_UserDeviceKey `protobuf:"bytes,2,rep,name=user_device_keys,json=userDeviceKeys,proto3" json:"user_device_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserDeviceKeyPayload_Snapshot) Reset() {
	*x = UserDeviceKeyPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_Snapshot) ProtoMessage() {}

func (x *UserDeviceKeyPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UserDeviceKeyPayload_Snapshot) GetInception() *UserDeviceKeyPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

func (x *UserDeviceKeyPayload_Snapshot) GetUserDeviceKeys() map[string]*UserDeviceKeyPayload_UserDeviceKey {
	if x != nil {
		return x.UserDeviceKeys
	}
	return nil
}

type UserDeviceKeyPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId   string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Settings *StreamSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UserDeviceKeyPayload_Inception) Reset() {
	*x = UserDeviceKeyPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_Inception) ProtoMessage() {}

func (x *UserDeviceKeyPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_Inception.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{12, 1}
}

func (x *UserDeviceKeyPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UserDeviceKeyPayload_Inception) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDeviceKeyPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserDeviceKeyPayload_UserDeviceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceKeys   *DeviceKeys   `protobuf:"bytes,2,opt,name=device_keys,json=deviceKeys,proto3" json:"device_keys,omitempty"`
	FallbackKeys *FallbackKeys `protobuf:"bytes,3,opt,name=fallback_keys,json=fallbackKeys,proto3" json:"fallback_keys,omitempty"`
}

func (x *UserDeviceKeyPayload_UserDeviceKey) Reset() {
	*x = UserDeviceKeyPayload_UserDeviceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceKeyPayload_UserDeviceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceKeyPayload_UserDeviceKey) ProtoMessage() {}

func (x *UserDeviceKeyPayload_UserDeviceKey) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceKeyPayload_UserDeviceKey.ProtoReflect.Descriptor instead.
func (*UserDeviceKeyPayload_UserDeviceKey) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{12, 2}
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetDeviceKeys() *DeviceKeys {
	if x != nil {
		return x.DeviceKeys
	}
	return nil
}

func (x *UserDeviceKeyPayload_UserDeviceKey) GetFallbackKeys() *FallbackKeys {
	if x != nil {
		return x.FallbackKeys
	}
	return nil
}

type MediaPayload_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inception *MediaPayload_Inception `protobuf:"bytes,1,opt,name=inception,proto3" json:"inception,omitempty"`
}

func (x *MediaPayload_Snapshot) Reset() {
	*x = MediaPayload_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPayload_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPayload_Snapshot) ProtoMessage() {}

func (x *MediaPayload_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPayload_Snapshot.ProtoReflect.Descriptor instead.
func (*MediaPayload_Snapshot) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13, 0}
}

func (x *MediaPayload_Snapshot) GetInception() *MediaPayload_Inception {
	if x != nil {
		return x.Inception
	}
	return nil
}

type MediaPayload_Inception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   string          `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ChannelId  string          `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ChunkCount int32           `protobuf:"varint,3,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`
	Settings   *StreamSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *MediaPayload_Inception) Reset() {
	*x = MediaPayload_Inception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPayload_Inception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPayload_Inception) ProtoMessage() {}

func (x *MediaPayload_Inception) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPayload_Inception.ProtoReflect.Descriptor instead.
func (*MediaPayload_Inception) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13, 1}
}

func (x *MediaPayload_Inception) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *MediaPayload_Inception) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MediaPayload_Inception) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *MediaPayload_Inception) GetSettings() *StreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type MediaPayload_Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ChunkIndex int32  `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
}

func (x *MediaPayload_Chunk) Reset() {
	*x = MediaPayload_Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPayload_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPayload_Chunk) ProtoMessage() {}

func (x *MediaPayload_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPayload_Chunk.ProtoReflect.Descriptor instead.
func (*MediaPayload_Chunk) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13, 2}
}

func (x *MediaPayload_Chunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MediaPayload_Chunk) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xe7, 0x06, 0x0a, 0x0b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x4d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x4d, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x00, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3a,
	0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x12, 0x64, 0x6d,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x10, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x67, 0x64, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x67, 0x64,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x22, 0xa4, 0x03, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x4d, 0x69,
	0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x01, 0x52, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x72, 0x65, 0x76, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xba, 0x0b, 0x0a, 0x0c, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x80, 0x06, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69,
	0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x09, 0x49, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x14,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xf0, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x53,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xef,
	0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x51, 0x0a,
	0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xbb, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x05, 0x0a, 0x10, 0x44, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x41,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf3, 0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x51, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa9, 0x01, 0x0a, 0x09,
	0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xe1, 0x05, 0x0a, 0x11, 0x47, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4b, 0x65,
	0x79, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x6b, 0x65, 0x79, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xf5, 0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x40, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x64, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x51, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa0, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc8, 0x06, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x48, 0x00, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xf9,
	0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x61, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x09, 0x49, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x1a,
	0x65, 0x0a, 0x08, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x80, 0x01,
	0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x22, 0xbc, 0x05, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b,
	0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0xa9, 0x02, 0x0a, 0x08,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x12,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x70, 0x0a, 0x15, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x79, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x6e, 0x0a, 0x10, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xf0, 0x05, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x1a, 0xa1, 0x02, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x6c, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x96,
	0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x38, 0x0a,
	0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xb0, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x47, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9b,
	0x01, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x05,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x05, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x5d, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x64, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x67, 0x64, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x64, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x11, 0x67, 0x64, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x73, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x35,
	0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x4a, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xea, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xf2,
	0x01, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x5e, 0x0a, 0x0f, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x22, 0x42, 0x0a, 0x18, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xb5, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9c, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x1a, 0x48, 0x0a, 0x0e, 0x41, 0x6c, 0x67, 0x6f, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92,
	0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x67,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f,
	0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69,
	0x6e, 0x69, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x4d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x27,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0x78, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x22, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22,
	0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x57, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x55, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x22, 0x5e, 0x0a, 0x13, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x5f, 0x0a, 0x16, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41,
	0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x2a, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x66, 0x66, 0x69, 0x74, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x61, 0x66, 0x66, 0x69, 0x74, 0x69,
	0x2a, 0x4c, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x70,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x03, 0x2a, 0x4f,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0xc1, 0x09, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0d, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0f, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x16, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f,
	0x4d, 0x49, 0x4e, 0x49, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x18,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53,
	0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x42,
	0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x10, 0x1f,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x58,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x23, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45,
	0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x26, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x44, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x42,
	0x41, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x4c, 0x4f, 0x54,
	0x10, 0x29, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x2b, 0x12,
	0x21, 0x0a, 0x1d, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x2e, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x42, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x2f, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x4e, 0x49, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x30, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x33, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x34, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x35, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x36, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x37, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x38, 0x32, 0xf1, 0x05, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x1b, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x50, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x1d, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x18, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x63, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x61, 0x6e, 0x63, 0x61, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 84)
var file_protocol_proto_goTypes = []interface{}{
	(MembershipOp)(0),                         // 0: river.MembershipOp
	(ChannelOp)(0),                            // 1: river.ChannelOp
	(Err)(0),                                  // 2: river.Err
	(*Miniblock)(nil),                         // 3: river.Miniblock
	(*Envelope)(nil),                          // 4: river.Envelope
	(*StreamEvent)(nil),                       // 5: river.StreamEvent
	(*MiniblockHeader)(nil),                   // 6: river.MiniblockHeader
	(*SpacePayload)(nil),                      // 7: river.SpacePayload
	(*ChannelPayload)(nil),                    // 8: river.ChannelPayload
	(*DmChannelPayload)(nil),                  // 9: river.DmChannelPayload
	(*GdmChannelPayload)(nil),                 // 10: river.GdmChannelPayload
	(*UserPayload)(nil),                       // 11: river.UserPayload
	(*KeySolicitation)(nil),                   // 12: river.KeySolicitation
	(*Fulfillment)(nil),                       // 13: river.Fulfillment
	(*UserSettingsPayload)(nil),               // 14: river.UserSettingsPayload
	(*UserDeviceKeyPayload)(nil),              // 15: river.UserDeviceKeyPayload
	(*MediaPayload)(nil),                      // 16: river.MediaPayload
	(*Snapshot)(nil),                          // 17: river.Snapshot
	(*EventRef)(nil),                          // 18: river.EventRef
	(*StreamSettings)(nil),                    // 19: river.StreamSettings
	(*Membership)(nil),                        // 20: river.Membership
	(*EncryptedData)(nil),                     // 21: river.EncryptedData
	(*EncryptedDeviceData)(nil),               // 22: river.EncryptedDeviceData
	(*EncryptedMessageEnvelope)(nil),          // 23: river.EncryptedMessageEnvelope
	(*DeviceKeys)(nil),                        // 24: river.DeviceKeys
	(*FallbackKeys)(nil),                      // 25: river.FallbackKeys
	(*Key)(nil),                               // 26: river.Key
	(*SyncCookie)(nil),                        // 27: river.SyncCookie
	(*StreamAndCookie)(nil),                   // 28: river.StreamAndCookie
	(*CreateStreamRequest)(nil),               // 29: river.CreateStreamRequest
	(*CreateStreamResponse)(nil),              // 30: river.CreateStreamResponse
	(*GetStreamRequest)(nil),                  // 31: river.GetStreamRequest
	(*GetStreamResponse)(nil),                 // 32: river.GetStreamResponse
	(*GetMiniblocksRequest)(nil),              // 33: river.GetMiniblocksRequest
	(*GetMiniblocksResponse)(nil),             // 34: river.GetMiniblocksResponse
	(*GetLastMiniblockHashRequest)(nil),       // 35: river.GetLastMiniblockHashRequest
	(*GetLastMiniblockHashResponse)(nil),      // 36: river.GetLastMiniblockHashResponse
	(*AddEventRequest)(nil),                   // 37: river.AddEventRequest
	(*AddEventResponse)(nil),                  // 38: river.AddEventResponse
	(*SyncStreamsRequest)(nil),                // 39: river.SyncStreamsRequest
	(*SyncStreamsResponse)(nil),               // 40: river.SyncStreamsResponse
	(*AddStreamToSyncRequest)(nil),            // 41: river.AddStreamToSyncRequest
	(*AddStreamToSyncResponse)(nil),           // 42: river.AddStreamToSyncResponse
	(*RemoveStreamFromSyncRequest)(nil),       // 43: river.RemoveStreamFromSyncRequest
	(*RemoveStreamFromSyncResponse)(nil),      // 44: river.RemoveStreamFromSyncResponse
	(*RemoveSyncRequest)(nil),                 // 45: river.RemoveSyncRequest
	(*RemoveSyncResponse)(nil),                // 46: river.RemoveSyncResponse
	(*InfoRequest)(nil),                       // 47: river.InfoRequest
	(*InfoResponse)(nil),                      // 48: river.InfoResponse
	(*SpacePayload_Snapshot)(nil),             // 49: river.SpacePayload.Snapshot
	(*SpacePayload_Inception)(nil),            // 50: river.SpacePayload.Inception
	(*SpacePayload_Channel)(nil),              // 51: river.SpacePayload.Channel
	(*SpacePayload_WrappedEncryptedData)(nil), // 52: river.SpacePayload.WrappedEncryptedData
	nil,                                   // 53: river.SpacePayload.Snapshot.ChannelsEntry
	nil,                                   // 54: river.SpacePayload.Snapshot.MembershipsEntry
	nil,                                   // 55: river.SpacePayload.Snapshot.UsernamesEntry
	nil,                                   // 56: river.SpacePayload.Snapshot.DisplayNamesEntry
	(*ChannelPayload_Snapshot)(nil),       // 57: river.ChannelPayload.Snapshot
	(*ChannelPayload_Inception)(nil),      // 58: river.ChannelPayload.Inception
	nil,                                   // 59: river.ChannelPayload.Snapshot.MembershipsEntry
	(*DmChannelPayload_Snapshot)(nil),     // 60: river.DmChannelPayload.Snapshot
	(*DmChannelPayload_Inception)(nil),    // 61: river.DmChannelPayload.Inception
	nil,                                   // 62: river.DmChannelPayload.Snapshot.MembershipsEntry
	(*GdmChannelPayload_Snapshot)(nil),    // 63: river.GdmChannelPayload.Snapshot
	(*GdmChannelPayload_Inception)(nil),   // 64: river.GdmChannelPayload.Inception
	nil,                                   // 65: river.GdmChannelPayload.Snapshot.MembershipsEntry
	(*UserPayload_Snapshot)(nil),          // 66: river.UserPayload.Snapshot
	(*UserPayload_Inception)(nil),         // 67: river.UserPayload.Inception
	(*UserPayload_UserMembership)(nil),    // 68: river.UserPayload.UserMembership
	(*UserPayload_ToDevice)(nil),          // 69: river.UserPayload.ToDevice
	nil,                                   // 70: river.UserPayload.Snapshot.MembershipsEntry
	(*UserSettingsPayload_Snapshot)(nil),  // 71: river.UserSettingsPayload.Snapshot
	(*UserSettingsPayload_Inception)(nil), // 72: river.UserSettingsPayload.Inception
	(*UserSettingsPayload_FullyReadMarkers)(nil), // 73: river.UserSettingsPayload.FullyReadMarkers
	nil,                                    // 74: river.UserSettingsPayload.Snapshot.FullyReadMarkersEntry
	(*UserDeviceKeyPayload_Snapshot)(nil),  // 75: river.UserDeviceKeyPayload.Snapshot
	(*UserDeviceKeyPayload_Inception)(nil), // 76: river.UserDeviceKeyPayload.Inception
	(*UserDeviceKeyPayload_UserDeviceKey)(nil), // 77: river.UserDeviceKeyPayload.UserDeviceKey
	nil,                            // 78: river.UserDeviceKeyPayload.Snapshot.UserDeviceKeysEntry
	(*MediaPayload_Snapshot)(nil),  // 79: river.MediaPayload.Snapshot
	(*MediaPayload_Inception)(nil), // 80: river.MediaPayload.Inception
	(*MediaPayload_Chunk)(nil),     // 81: river.MediaPayload.Chunk
	nil,                            // 82: river.EncryptedDeviceData.CiphertextEntry
	nil,                            // 83: river.DeviceKeys.KeysEntry
	nil,                            // 84: river.DeviceKeys.SignaturesEntry
	nil,                            // 85: river.FallbackKeys.AlgoKeyIdEntry
	nil,                            // 86: river.Key.SignaturesEntry
	(*timestamppb.Timestamp)(nil),  // 87: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 88: google.protobuf.Empty
}
var file_protocol_proto_depIdxs = []int32{
	4,   // 0: river.Miniblock.events:type_name -> river.Envelope
	4,   // 1: river.Miniblock.header:type_name -> river.Envelope
	6,   // 2: river.StreamEvent.miniblock_header:type_name -> river.MiniblockHeader
	7,   // 3: river.StreamEvent.space_payload:type_name -> river.SpacePayload
	8,   // 4: river.StreamEvent.channel_payload:type_name -> river.ChannelPayload
	11,  // 5: river.StreamEvent.user_payload:type_name -> river.UserPayload
	14,  // 6: river.StreamEvent.user_settings_payload:type_name -> river.UserSettingsPayload
	15,  // 7: river.StreamEvent.user_device_key_payload:type_name -> river.UserDeviceKeyPayload
	16,  // 8: river.StreamEvent.media_payload:type_name -> river.MediaPayload
	9,   // 9: river.StreamEvent.dm_channel_payload:type_name -> river.DmChannelPayload
	10,  // 10: river.StreamEvent.gdm_channel_payload:type_name -> river.GdmChannelPayload
	87,  // 11: river.MiniblockHeader.timestamp:type_name -> google.protobuf.Timestamp
	17,  // 12: river.MiniblockHeader.snapshot:type_name -> river.Snapshot
	88,  // 13: river.MiniblockHeader.none:type_name -> google.protobuf.Empty
	50,  // 14: river.SpacePayload.inception:type_name -> river.SpacePayload.Inception
	51,  // 15: river.SpacePayload.channel:type_name -> river.SpacePayload.Channel
	20,  // 16: river.SpacePayload.membership:type_name -> river.Membership
	21,  // 17: river.SpacePayload.username:type_name -> river.EncryptedData
	21,  // 18: river.SpacePayload.display_name:type_name -> river.EncryptedData
	58,  // 19: river.ChannelPayload.inception:type_name -> river.ChannelPayload.Inception
	21,  // 20: river.ChannelPayload.message:type_name -> river.EncryptedData
	20,  // 21: river.ChannelPayload.membership:type_name -> river.Membership
	13,  // 22: river.ChannelPayload.fulfillment:type_name -> river.Fulfillment
	12,  // 23: river.ChannelPayload.key_solicitation:type_name -> river.KeySolicitation
	61,  // 24: river.DmChannelPayload.inception:type_name -> river.DmChannelPayload.Inception
	20,  // 25: river.DmChannelPayload.membership:type_name -> river.Membership
	21,  // 26: river.DmChannelPayload.message:type_name -> river.EncryptedData
	13,  // 27: river.DmChannelPayload.fulfillment:type_name -> river.Fulfillment
	12,  // 28: river.DmChannelPayload.key_solicitation:type_name -> river.KeySolicitation
	64,  // 29: river.GdmChannelPayload.inception:type_name -> river.GdmChannelPayload.Inception
	20,  // 30: river.GdmChannelPayload.membership:type_name -> river.Membership
	21,  // 31: river.GdmChannelPayload.message:type_name -> river.EncryptedData
	13,  // 32: river.GdmChannelPayload.fulfillment:type_name -> river.Fulfillment
	12,  // 33: river.GdmChannelPayload.key_solicitation:type_name -> river.KeySolicitation
	67,  // 34: river.UserPayload.inception:type_name -> river.UserPayload.Inception
	68,  // 35: river.UserPayload.user_membership:type_name -> river.UserPayload.UserMembership
	69,  // 36: river.UserPayload.to_device:type_name -> river.UserPayload.ToDevice
	72,  // 37: river.UserSettingsPayload.inception:type_name -> river.UserSettingsPayload.Inception
	73,  // 38: river.UserSettingsPayload.fully_read_markers:type_name -> river.UserSettingsPayload.FullyReadMarkers
	76,  // 39: river.UserDeviceKeyPayload.inception:type_name -> river.UserDeviceKeyPayload.Inception
	77,  // 40: river.UserDeviceKeyPayload.user_device_key:type_name -> river.UserDeviceKeyPayload.UserDeviceKey
	80,  // 41: river.MediaPayload.inception:type_name -> river.MediaPayload.Inception
	81,  // 42: river.MediaPayload.chunk:type_name -> river.MediaPayload.Chunk
	49,  // 43: river.Snapshot.space_content:type_name -> river.SpacePayload.Snapshot
	57,  // 44: river.Snapshot.channel_content:type_name -> river.ChannelPayload.Snapshot
	66,  // 45: river.Snapshot.user_content:type_name -> river.UserPayload.Snapshot
	71,  // 46: river.Snapshot.user_settings_content:type_name -> river.UserSettingsPayload.Snapshot
	75,  // 47: river.Snapshot.user_device_key_content:type_name -> river.UserDeviceKeyPayload.Snapshot
	79,  // 48: river.Snapshot.media_content:type_name -> river.MediaPayload.Snapshot
	60,  // 49: river.Snapshot.dm_channel_content:type_name -> river.DmChannelPayload.Snapshot
	63,  // 50: river.Snapshot.gdm_channel_content:type_name -> river.GdmChannelPayload.Snapshot
	0,   // 51: river.Membership.op:type_name -> river.MembershipOp
	82,  // 52: river.EncryptedDeviceData.ciphertext:type_name -> river.EncryptedDeviceData.CiphertextEntry
	83,  // 53: river.DeviceKeys.keys:type_name -> river.DeviceKeys.KeysEntry
	84,  // 54: river.DeviceKeys.signatures:type_name -> river.DeviceKeys.SignaturesEntry
	85,  // 55: river.FallbackKeys.algo_key_id:type_name -> river.FallbackKeys.AlgoKeyIdEntry
	86,  // 56: river.Key.signatures:type_name -> river.Key.SignaturesEntry
	4,   // 57: river.StreamAndCookie.events:type_name -> river.Envelope
	27,  // 58: river.StreamAndCookie.next_sync_cookie:type_name -> river.SyncCookie
	27,  // 59: river.StreamAndCookie.start_sync_cookie:type_name -> river.SyncCookie
	4,   // 60: river.CreateStreamRequest.events:type_name -> river.Envelope
	28,  // 61: river.CreateStreamResponse.stream:type_name -> river.StreamAndCookie
	3,   // 62: river.CreateStreamResponse.miniblocks:type_name -> river.Miniblock
	28,  // 63: river.GetStreamResponse.stream:type_name -> river.StreamAndCookie
	3,   // 64: river.GetStreamResponse.miniblocks:type_name -> river.Miniblock
	3,   // 65: river.GetMiniblocksResponse.miniblocks:type_name -> river.Miniblock
	4,   // 66: river.AddEventRequest.event:type_name -> river.Envelope
	27,  // 67: river.SyncStreamsRequest.sync_pos:type_name -> river.SyncCookie
	28,  // 68: river.SyncStreamsResponse.stream:type_name -> river.StreamAndCookie
	27,  // 69: river.AddStreamToSyncRequest.sync_pos:type_name -> river.SyncCookie
	50,  // 70: river.SpacePayload.Snapshot.inception:type_name -> river.SpacePayload.Inception
	53,  // 71: river.SpacePayload.Snapshot.channels:type_name -> river.SpacePayload.Snapshot.ChannelsEntry
	54,  // 72: river.SpacePayload.Snapshot.memberships:type_name -> river.SpacePayload.Snapshot.MembershipsEntry
	55,  // 73: river.SpacePayload.Snapshot.usernames:type_name -> river.SpacePayload.Snapshot.UsernamesEntry
	56,  // 74: river.SpacePayload.Snapshot.display_names:type_name -> river.SpacePayload.Snapshot.DisplayNamesEntry
	19,  // 75: river.SpacePayload.Inception.settings:type_name -> river.StreamSettings
	1,   // 76: river.SpacePayload.Channel.op:type_name -> river.ChannelOp
	18,  // 77: river.SpacePayload.Channel.origin_event:type_name -> river.EventRef
	21,  // 78: river.SpacePayload.Channel.channel_properties:type_name -> river.EncryptedData
	21,  // 79: river.SpacePayload.WrappedEncryptedData.data:type_name -> river.EncryptedData
	51,  // 80: river.SpacePayload.Snapshot.ChannelsEntry.value:type_name -> river.SpacePayload.Channel
	20,  // 81: river.SpacePayload.Snapshot.MembershipsEntry.value:type_name -> river.Membership
	52,  // 82: river.SpacePayload.Snapshot.UsernamesEntry.value:type_name -> river.SpacePayload.WrappedEncryptedData
	52,  // 83: river.SpacePayload.Snapshot.DisplayNamesEntry.value:type_name -> river.SpacePayload.WrappedEncryptedData
	58,  // 84: river.ChannelPayload.Snapshot.inception:type_name -> river.ChannelPayload.Inception
	59,  // 85: river.ChannelPayload.Snapshot.memberships:type_name -> river.ChannelPayload.Snapshot.MembershipsEntry
	21,  // 86: river.ChannelPayload.Inception.channel_properties:type_name -> river.EncryptedData
	19,  // 87: river.ChannelPayload.Inception.settings:type_name -> river.StreamSettings
	20,  // 88: river.ChannelPayload.Snapshot.MembershipsEntry.value:type_name -> river.Membership
	61,  // 89: river.DmChannelPayload.Snapshot.inception:type_name -> river.DmChannelPayload.Inception
	62,  // 90: river.DmChannelPayload.Snapshot.memberships:type_name -> river.DmChannelPayload.Snapshot.MembershipsEntry
	19,  // 91: river.DmChannelPayload.Inception.settings:type_name -> river.StreamSettings
	20,  // 92: river.DmChannelPayload.Snapshot.MembershipsEntry.value:type_name -> river.Membership
	64,  // 93: river.GdmChannelPayload.Snapshot.inception:type_name -> river.GdmChannelPayload.Inception
	65,  // 94: river.GdmChannelPayload.Snapshot.memberships:type_name -> river.GdmChannelPayload.Snapshot.MembershipsEntry
	21,  // 95: river.GdmChannelPayload.Inception.channel_properties:type_name -> river.EncryptedData
	19,  // 96: river.GdmChannelPayload.Inception.settings:type_name -> river.StreamSettings
	20,  // 97: river.GdmChannelPayload.Snapshot.MembershipsEntry.value:type_name -> river.Membership
	67,  // 98: river.UserPayload.Snapshot.inception:type_name -> river.UserPayload.Inception
	70,  // 99: river.UserPayload.Snapshot.memberships:type_name -> river.UserPayload.Snapshot.MembershipsEntry
	19,  // 100: river.UserPayload.Inception.settings:type_name -> river.StreamSettings
	18,  // 101: river.UserPayload.UserMembership.origin_event:type_name -> river.EventRef
	0,   // 102: river.UserPayload.UserMembership.op:type_name -> river.MembershipOp
	22,  // 103: river.UserPayload.ToDevice.message:type_name -> river.EncryptedDeviceData
	68,  // 104: river.UserPayload.Snapshot.MembershipsEntry.value:type_name -> river.UserPayload.UserMembership
	72,  // 105: river.UserSettingsPayload.Snapshot.inception:type_name -> river.UserSettingsPayload.Inception
	74,  // 106: river.UserSettingsPayload.Snapshot.fully_read_markers:type_name -> river.UserSettingsPayload.Snapshot.FullyReadMarkersEntry
	19,  // 107: river.UserSettingsPayload.Inception.settings:type_name -> river.StreamSettings
	21,  // 108: river.UserSettingsPayload.FullyReadMarkers.content:type_name -> river.EncryptedData
	73,  // 109: river.UserSettingsPayload.Snapshot.FullyReadMarkersEntry.value:type_name -> river.UserSettingsPayload.FullyReadMarkers
	76,  // 110: river.UserDeviceKeyPayload.Snapshot.inception:type_name -> river.UserDeviceKeyPayload.Inception
	78,  // 111: river.UserDeviceKeyPayload.Snapshot.user_device_keys:type_name -> river.UserDeviceKeyPayload.Snapshot.UserDeviceKeysEntry
	19,  // 112: river.UserDeviceKeyPayload.Inception.settings:type_name -> river.StreamSettings
	24,  // 113: river.UserDeviceKeyPayload.UserDeviceKey.device_keys:type_name -> river.DeviceKeys
	25,  // 114: river.UserDeviceKeyPayload.UserDeviceKey.fallback_keys:type_name -> river.FallbackKeys
	77,  // 115: river.UserDeviceKeyPayload.Snapshot.UserDeviceKeysEntry.value:type_name -> river.UserDeviceKeyPayload.UserDeviceKey
	80,  // 116: river.MediaPayload.Snapshot.inception:type_name -> river.MediaPayload.Inception
	19,  // 117: river.MediaPayload.Inception.settings:type_name -> river.StreamSettings
	23,  // 118: river.EncryptedDeviceData.CiphertextEntry.value:type_name -> river.EncryptedMessageEnvelope
	26,  // 119: river.FallbackKeys.AlgoKeyIdEntry.value:type_name -> river.Key
	29,  // 120: river.StreamService.CreateStream:input_type -> river.CreateStreamRequest
	31,  // 121: river.StreamService.GetStream:input_type -> river.GetStreamRequest
	33,  // 122: river.StreamService.GetMiniblocks:input_type -> river.GetMiniblocksRequest
	35,  // 123: river.StreamService.GetLastMiniblockHash:input_type -> river.GetLastMiniblockHashRequest
	37,  // 124: river.StreamService.AddEvent:input_type -> river.AddEventRequest
	39,  // 125: river.StreamService.SyncStreams:input_type -> river.SyncStreamsRequest
	41,  // 126: river.StreamService.AddStreamToSync:input_type -> river.AddStreamToSyncRequest
	43,  // 127: river.StreamService.RemoveStreamFromSync:input_type -> river.RemoveStreamFromSyncRequest
	45,  // 128: river.StreamService.RemoveSync:input_type -> river.RemoveSyncRequest
	47,  // 129: river.StreamService.Info:input_type -> river.InfoRequest
	30,  // 130: river.StreamService.CreateStream:output_type -> river.CreateStreamResponse
	32,  // 131: river.StreamService.GetStream:output_type -> river.GetStreamResponse
	34,  // 132: river.StreamService.GetMiniblocks:output_type -> river.GetMiniblocksResponse
	36,  // 133: river.StreamService.GetLastMiniblockHash:output_type -> river.GetLastMiniblockHashResponse
	38,  // 134: river.StreamService.AddEvent:output_type -> river.AddEventResponse
	40,  // 135: river.StreamService.SyncStreams:output_type -> river.SyncStreamsResponse
	42,  // 136: river.StreamService.AddStreamToSync:output_type -> river.AddStreamToSyncResponse
	44,  // 137: river.StreamService.RemoveStreamFromSync:output_type -> river.RemoveStreamFromSyncResponse
	46,  // 138: river.StreamService.RemoveSync:output_type -> river.RemoveSyncResponse
	48,  // 139: river.StreamService.Info:output_type -> river.InfoResponse
	130, // [130:140] is the sub-list for method output_type
	120, // [120:130] is the sub-list for method input_type
	120, // [120:120] is the sub-list for extension type_name
	120, // [120:120] is the sub-list for extension extendee
	0,   // [0:120] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Miniblock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniblockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmChannelPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GdmChannelPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySolicitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fulfillment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedDeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedMessageEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAndCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiniblocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiniblocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastMiniblockHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastMiniblockHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddStreamToSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddStreamToSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStreamFromSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStreamFromSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePayload_WrappedEncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmChannelPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmChannelPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GdmChannelPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GdmChannelPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_UserMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayload_ToDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingsPayload_FullyReadMarkers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceKeyPayload_UserDeviceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPayload_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPayload_Inception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPayload_Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*StreamEvent_MiniblockHeader)(nil),
		(*StreamEvent_SpacePayload)(nil),
		(*StreamEvent_ChannelPayload)(nil),
		(*StreamEvent_UserPayload)(nil),
		(*StreamEvent_UserSettingsPayload)(nil),
		(*StreamEvent_UserDeviceKeyPayload)(nil),
		(*StreamEvent_MediaPayload)(nil),
		(*StreamEvent_DmChannelPayload)(nil),
		(*StreamEvent_GdmChannelPayload)(nil),
	}
	file_protocol_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*MiniblockHeader_None)(nil),
	}
	file_protocol_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SpacePayload_Inception_)(nil),
		(*SpacePayload_Channel_)(nil),
		(*SpacePayload_Membership)(nil),
		(*SpacePayload_Username)(nil),
		(*SpacePayload_DisplayName)(nil),
	}
	file_protocol_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ChannelPayload_Inception_)(nil),
		(*ChannelPayload_Message)(nil),
		(*ChannelPayload_Membership)(nil),
		(*ChannelPayload_Fulfillment)(nil),
		(*ChannelPayload_KeySolicitation)(nil),
	}
	file_protocol_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*DmChannelPayload_Inception_)(nil),
		(*DmChannelPayload_Membership)(nil),
		(*DmChannelPayload_Message)(nil),
		(*DmChannelPayload_Fulfillment)(nil),
		(*DmChannelPayload_KeySolicitation)(nil),
	}
	file_protocol_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GdmChannelPayload_Inception_)(nil),
		(*GdmChannelPayload_Membership)(nil),
		(*GdmChannelPayload_Message)(nil),
		(*GdmChannelPayload_Fulfillment)(nil),
		(*GdmChannelPayload_KeySolicitation)(nil),
	}
	file_protocol_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UserPayload_Inception_)(nil),
		(*UserPayload_UserMembership_)(nil),
		(*UserPayload_ToDevice_)(nil),
	}
	file_protocol_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_protocol_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*UserSettingsPayload_Inception_)(nil),
		(*UserSettingsPayload_FullyReadMarkers_)(nil),
	}
	file_protocol_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*UserDeviceKeyPayload_Inception_)(nil),
		(*UserDeviceKeyPayload_UserDeviceKey_)(nil),
	}
	file_protocol_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MediaPayload_Inception_)(nil),
		(*MediaPayload_Chunk_)(nil),
	}
	file_protocol_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Snapshot_SpaceContent)(nil),
		(*Snapshot_ChannelContent)(nil),
		(*Snapshot_UserContent)(nil),
		(*Snapshot_UserSettingsContent)(nil),
		(*Snapshot_UserDeviceKeyContent)(nil),
		(*Snapshot_MediaContent)(nil),
		(*Snapshot_DmChannelContent)(nil),
		(*Snapshot_GdmChannelContent)(nil),
	}
	file_protocol_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_protocol_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   84,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
