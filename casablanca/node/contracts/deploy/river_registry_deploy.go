// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package deploy

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRiverRegistryBaseNode is an auto generated low-level Go binding around an user-defined struct.
type IRiverRegistryBaseNode struct {
	NodeAddress common.Address
	Url         string
	Status      uint8
}

// IRiverRegistryBaseStream is an auto generated low-level Go binding around an user-defined struct.
type IRiverRegistryBaseStream struct {
	LastMiniblockHash [32]byte
	LastMiniblockNum  uint64
	Flags             uint64
	Reserved0         uint64
	Reserved1         uint64
	Nodes             []common.Address
}

// IRiverRegistryBaseStreamWithId is an auto generated low-level Go binding around an user-defined struct.
type IRiverRegistryBaseStreamWithId struct {
	Id     [32]byte
	Stream IRiverRegistryBaseStream
}

// RiverRegistryDeployMetaData contains all meta data concerning the RiverRegistryDeploy contract.
var RiverRegistryDeployMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"approvedOperators\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"__RiverRegistry_init\",\"inputs\":[{\"name\":\"approvedOperators\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allocateStream\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nodes\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"genesisMiniblockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"genesisMiniblock\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"approveOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getAllNodeAddresses\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAllNodes\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIRiverRegistryBase.Node[]\",\"components\":[{\"name\":\"nodeAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"url\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enumIRiverRegistryBase.NodeStatus\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAllStreamIds\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAllStreams\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIRiverRegistryBase.StreamWithId[]\",\"components\":[{\"name\":\"id\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"stream\",\"type\":\"tuple\",\"internalType\":\"structIRiverRegistryBase.Stream\",\"components\":[{\"name\":\"lastMiniblockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"lastMiniblockNum\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"flags\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"reserved0\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"reserved1\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"nodes\",\"type\":\"address[]\",\"internalType\":\"address[]\"}]}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getNode\",\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIRiverRegistryBase.Node\",\"components\":[{\"name\":\"nodeAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"url\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enumIRiverRegistryBase.NodeStatus\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getNodeCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStream\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIRiverRegistryBase.Stream\",\"components\":[{\"name\":\"lastMiniblockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"lastMiniblockNum\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"flags\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"reserved0\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"reserved1\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"nodes\",\"type\":\"address[]\",\"internalType\":\"address[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStreamCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStreamWithGenesis\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIRiverRegistryBase.Stream\",\"components\":[{\"name\":\"lastMiniblockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"lastMiniblockNum\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"flags\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"reserved0\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"reserved1\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"nodes\",\"type\":\"address[]\",\"internalType\":\"address[]\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"placeStreamOnNode\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nodeAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerNode\",\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"url\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeStreamFromNode\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nodeAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStreamLastMiniblock\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"lastMiniblockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"lastMiniblockNum\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"isSealed\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateNodeStatus\",\"inputs\":[{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enumIRiverRegistryBase.NodeStatus\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateNodeUrl\",\"inputs\":[{\"name\":\"url\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InterfaceAdded\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"indexed\":true,\"internalType\":\"bytes4\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InterfaceRemoved\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"indexed\":true,\"internalType\":\"bytes4\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NodeAdded\",\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"url\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIRiverRegistryBase.NodeStatus\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NodeStatusUpdated\",\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIRiverRegistryBase.NodeStatus\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NodeUrlUpdated\",\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"url\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAdded\",\"inputs\":[{\"name\":\"operatorAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRemoved\",\"inputs\":[{\"name\":\"operatorAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StreamAllocated\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"nodes\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"},{\"name\":\"genesisMiniblockHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StreamLastMiniblockUpdated\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"lastMiniblockHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"lastMiniblockNum\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"isSealed\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StreamPlacementUpdated\",\"inputs\":[{\"name\":\"streamId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"nodeAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"isAdded\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"Initializable_InInitializingState\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"Initializable_NotInInitializingState\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"Introspection_AlreadySupported\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"Introspection_NotSupported\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"Ownable__NotOwner\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"Ownable__ZeroAddress\",\"inputs\":[]}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002b8d38038062002b8d8339810160408190526200003491620002c5565b6200003e6200005b565b620000498162000103565b620000543362000174565b50620003ad565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de8054640100000000900460ff1615620000a8576040516366008a2d60e01b815260040160405180910390fd5b805463ffffffff90811610156200010057805463ffffffff191663ffffffff90811782556040519081527fe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c9060200160405180910390a15b50565b7f1320bfade83d725f4918cce6752986eeef865fd566a9348c57c798b58dfc7ea660005b82518110156200016f57620001658382815181106200014a576200014a62000397565b6020026020010151836008016200022060201b90919060201c565b5060010162000127565b505050565b60006200019760008051602062002b6d833981519152546001600160a01b031690565b90506001600160a01b038216620001c157604051634e3ef82560e01b815260040160405180910390fd5b8160008051602062002b6d83398151915280546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600062000237836001600160a01b03841662000240565b90505b92915050565b600081815260018301602052604081205462000289575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200023a565b5060006200023a565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c057600080fd5b919050565b60006020808385031215620002d957600080fd5b82516001600160401b0380821115620002f157600080fd5b818501915085601f8301126200030657600080fd5b8151818111156200031b576200031b62000292565b8060051b604051601f19603f8301168101818110858211171562000343576200034362000292565b6040529182528482019250838101850191888311156200036257600080fd5b938501935b828510156200038b576200037b85620002a8565b8452938501939285019262000367565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6127b080620003bd6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806386789fc6116100ad578063bb9b342d11610071578063bb9b342d1461029b578063be6522d6146102ae578063c0f22084146102c1578063c8fe3a01146102c9578063ee885b12146102de57600080fd5b806386789fc61461022b5780639d209048146102405780639ee86d3814610260578063a1174e7d14610273578063ac8a584a1461028857600080fd5b80633c2544d1116100f45780633c2544d1146101ad578063681a8d67146101cf5780636b883c39146101e25780636d70f7ae146101f55780637691f5ed1461021857600080fd5b80631290abe814610131578063242cae9f1461015a578063286af2531461016f57806339bf397e146101825780633bd84c0c14610198575b600080fd5b61014461013f366004611ed5565b6102f1565b6040516101519190611f8b565b60405180910390f35b61016d610168366004611fba565b610418565b005b61016d61017d3660046120a1565b610547565b61018a61059d565b604051908152602001610151565b6101a06105b7565b60405161015191906120dd565b6101c06101bb366004611ed5565b610745565b60405161015193929190612199565b61016d6101dd3660046121ce565b610916565b61016d6101f0366004612280565b610b5c565b610208610203366004611fba565b610dd3565b6040519015158152602001610151565b61016d61022636600461230a565b610df0565b610233610ebd565b604051610151919061232b565b61025361024e366004611fba565b610eda565b60405161015191906123ea565b61016d61026e3660046123fd565b61103b565b61027b6111f0565b6040516101519190612429565b61016d610296366004611fba565b6113a7565b61016d6102a93660046124ad565b6114fa565b61016d6102bc3660046124fa565b6116a6565b61018a611751565b6102d1611763565b6040516101519190612573565b61016d6102ec3660046123fd565b61177d565b6102f9611d96565b60006103036119c8565b905061030f81846119ec565b6103535760408051808201825260098152681393d517d193d5539160ba1b6020820152905162461bcd60e51b815261034a9190600401612586565b60405180910390fd5b600083815260028083016020908152604092839020835160c0810185528154815260018201546001600160401b0380821683860152600160401b8204811683880152600160801b820481166060840152600160c01b90910416608082015292810180548551818502810185019096528086529394919360a086019383018282801561040757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103e9575b505050505081525050915050919050565b7fa7c3be20e3a76821507555109752fad8a6630ef0362a34dcfcdfef83c99a2537546001600160a01b03163314610464576040516365f4906560e01b815233600482015260240161034a565b6001600160a01b0381166104a75760408051808201825260078152664241445f41524760c81b6020820152905162461bcd60e51b815261034a9190600401612586565b60006104b16119c8565b90506104c06008820183611a07565b1561050157604080518082018252600e81526d414c52454144595f45584953545360901b6020820152905162461bcd60e51b815261034a9190600401612586565b61050e6008820183611a29565b506040516001600160a01b038316907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a25050565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de54640100000000900460ff1661059157604051630ef4733760e31b815260040160405180910390fd5b61059a81611a3e565b50565b60006105b26105aa6119c8565b600501611a57565b905090565b606060006105c36119c8565b905060006105d082611a57565b6001600160401b038111156105e7576105e7611fd5565b60405190808252806020026020018201604052801561062057816020015b61060d611dcd565b8152602001906001900390816106055790505b50905060005b61062f83611a57565b81101561073e5760006106428483611a61565b60408051808201825282815260008381526002808901602090815291849020845160c0810186528154815260018201546001600160401b0380821683870152600160401b8204811683890152600160801b820481166060840152600160c01b90910416608082015291810180548651818602810186019097528087529697509395838701959294919360a086019392919083018282801561070c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106ee575b50505050508152505081525083838151811061072a5761072a612599565b602090810291909101015250600101610626565b5092915050565b61074d611d96565b60006060600061075b6119c8565b905061076781866119ec565b6107a25760408051808201825260098152681393d517d193d5539160ba1b6020820152905162461bcd60e51b815261034a9190600401612586565b60008581526002808301602090815260408084206004860183528185205460038701845294829020825160c0810184528254815260018301546001600160401b0380821683880152600160401b8204811683870152600160801b820481166060840152600160c01b909104166080820152948201805484518187028101870190955280855292969591949193879360a086019391929183018282801561087157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610853575b5050505050815250509250808054610888906125af565b80601f01602080910402602001604051908101604052809291908181526020018280546108b4906125af565b80156109015780601f106108d657610100808354040283529160200191610901565b820191906000526020600020905b8154815290600101906020018083116108e457829003601f168201915b50505050509050935093509350509193909250565b61092b336109226119c8565b60050190611a07565b6109655760408051808201825260088152670848288be82aaa8960c31b6020820152905162461bcd60e51b815261034a9190600401612586565b600061096f6119c8565b905061097b81866119ec565b6109b65760408051808201825260098152681393d517d193d5539160ba1b6020820152905162461bcd60e51b815261034a9190600401612586565b60008581526002820160205260409020600180820154600160401b90041615610a1457604080518082018252600d81526c14d51491505357d4d150531151609a1b6020820152905162461bcd60e51b815261034a9190600401612586565b6001808201546001600160401b0380871692610a3392909116906125ff565b6001600160401b031614610a765760408051808201825260078152664241445f41524760c81b6020820152905162461bcd60e51b815261034a9190600401612586565b84815560018101805467ffffffffffffffff19166001600160401b0386161790558215610ad557600181810180546fffffffffffffffff0000000000000000198116600160401b918290046001600160401b0316909317029190911790555b836001600160401b0316600103610aff5760008681526003830160205260408120610aff91611dec565b60408051878152602081018790526001600160401b0386169181019190915283151560608201527fccc26bbb6dd655ea0bb8a40a3c30e35c6bdf42f8faf0d71bbea897af768cda8b906080015b60405180910390a1505050505050565b610b68336109226119c8565b610ba25760408051808201825260088152670848288be82aaa8960c31b6020820152905162461bcd60e51b815261034a9190600401612586565b6000610bac6119c8565b9050610bb881866119ec565b15610bf957604080518082018252600e81526d414c52454144595f45584953545360901b6020820152905162461bcd60e51b815261034a9190600401612586565b60005b8451811015610c7c57610c34858281518110610c1a57610c1a612599565b602002602001015183600501611a0790919063ffffffff16565b610c7457604080518082018252600e81526d1393d11157d393d517d193d5539160921b6020820152905162461bcd60e51b815261034a9190600401612586565b600101610bfc565b506040805160c08101825284815260006020820181905291810182905260608101829052608081019190915260a08101859052610cb98287611a6d565b50600086815260028084016020908152604092839020845181558185015160018201805495870151606088015160808901516001600160401b03908116600160c01b026001600160c01b03928216600160801b02929092166fffffffffffffffffffffffffffffffff938216600160401b026fffffffffffffffffffffffffffffffff19909a1691909516179790971716919091179490941790935560a08401518051859493610d6e93908501920190611e26565b50505060008681526003830160205260409020610d8b848261266f565b50600086815260048301602052604090819020859055517fd79158fa478ef0af48ae6b32b29d29b2a37ee7b0dfcce6005880fd071623b5fb90610b4c9088908890889061272e565b6000610dea82610de16119c8565b60080190611a07565b92915050565b610dfc336109226119c8565b610e365760408051808201825260088152670848288be82aaa8960c31b6020820152905162461bcd60e51b815261034a9190600401612586565b6000610e406119c8565b33600090815260078201602052604090206002018054919250839160ff19166001836004811115610e7357610e7361236f565b0217905550336001600160a01b03167f20891cc7622c7951cbd8c70c61a5201eb45625b8c00e8f6c986cfca78f3dbfa083604051610eb19190612757565b60405180910390a25050565b60606000610ec96119c8565b9050610ed481611a79565b91505090565b610ee2611e8b565b6000610eec6119c8565b9050610efb6005820184611a07565b610f3b57604080518082018252600e81526d1393d11157d393d517d193d5539160921b6020820152905162461bcd60e51b815261034a9190600401612586565b6001600160a01b0380841660009081526007830160209081526040918290208251606081019093528054909316825260018301805492939291840191610f80906125af565b80601f0160208091040260200160405190810160405280929190818152602001828054610fac906125af565b8015610ff95780601f10610fce57610100808354040283529160200191610ff9565b820191906000526020600020905b815481529060010190602001808311610fdc57829003601f168201915b5050509183525050600282015460209091019060ff1660048111156110205761102061236f565b60048111156110315761103161236f565b9052509392505050565b60006110456119c8565b905061105181846119ec565b61108c5760408051808201825260098152681393d517d193d5539160ba1b6020820152905162461bcd60e51b815261034a9190600401612586565b6110996005820183611a07565b6110d957604080518082018252600e81526d1393d11157d393d517d193d5539160921b6020820152905162461bcd60e51b815261034a9190600401612586565b60008381526002820160205260408120905b600282015481101561117457836001600160a01b031682600201828154811061111657611116612599565b6000918252602090912001546001600160a01b03160361116c57604080518082018252600e81526d414c52454144595f45584953545360901b6020820152905162461bcd60e51b815261034a9190600401612586565b6001016110eb565b5060028101805460018082018355600092835260209283902090910180546001600160a01b0319166001600160a01b03871690811790915560408051888152938401919091528201527faaa473c28a5fe04b6a7ecd795826e462f9d0c23f00ef9f51ec02fa6ea418806f9060600160405180910390a150505050565b606060006111fc6119c8565b9050600061120c82600501611a57565b6001600160401b0381111561122357611223611fd5565b60405190808252806020026020018201604052801561125c57816020015b611249611e8b565b8152602001906001900390816112415790505b50905060005b61126e83600501611a57565b81101561073e576007830160006112886005860184611a61565b6001600160a01b03908116825260208083019390935260409182016000208251606081019093528054909116825260018101805492939192918401916112cd906125af565b80601f01602080910402602001604051908101604052809291908181526020018280546112f9906125af565b80156113465780601f1061131b57610100808354040283529160200191611346565b820191906000526020600020905b81548152906001019060200180831161132957829003601f168201915b5050509183525050600282015460209091019060ff16600481111561136d5761136d61236f565b600481111561137e5761137e61236f565b8152505082828151811061139457611394612599565b6020908102919091010152600101611262565b7fa7c3be20e3a76821507555109752fad8a6630ef0362a34dcfcdfef83c99a2537546001600160a01b031633146113f3576040516365f4906560e01b815233600482015260240161034a565b60006113fd6119c8565b905061140c6008820183611a07565b61145057604080518082018252601281527113d41154905513d497d393d517d193d5539160721b6020820152905162461bcd60e51b815261034a9190600401612586565b6001600160a01b0382166000908152600a82016020526040812061147390611a57565b11156114b457604080518082018252600d81526c4f55545f4f465f424f554e445360981b6020820152905162461bcd60e51b815261034a9190600401612586565b6114c16008820183611a86565b506040516001600160a01b038316907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a25050565b61150633610de16119c8565b6115405760408051808201825260088152670848288be82aaa8960c31b6020820152905162461bcd60e51b815261034a9190600401612586565b600061154a6119c8565b90506115596005820184611a07565b1561159a57604080518082018252600e81526d414c52454144595f45584953545360901b6020820152905162461bcd60e51b815261034a9190600401612586565b604080516060810182526001600160a01b038516815260208082018590526000828401819052338152600a8501909152919091206115d89085611a29565b506115e66005830185611a29565b506001600160a01b0384811660009081526007840160209081526040909120835181546001600160a01b03191693169290921782558201518291906001820190611630908261266f565b50604082015160028201805460ff191660018360048111156116545761165461236f565b0217905550905050836001600160a01b03167fd6f3629b08191adb8308c3a65d5f8803b7f8f3e359c433fa7ae623276635e561846000604051611698929190612765565b60405180910390a250505050565b6116b2336109226119c8565b6116ec5760408051808201825260088152670848288be82aaa8960c31b6020820152905162461bcd60e51b815261034a9190600401612586565b60006116f66119c8565b3360009081526007820160205260409020909150600101611717838261266f565b50336001600160a01b03167f4505168a8705a16fd4d0575197fd0f510db69df93a065e158ad2c0957ba12bac83604051610eb19190612586565b60006105b261175e6119c8565b611a57565b6060600061176f6119c8565b9050610ed481600501611a79565b60006117876119c8565b905061179381846119ec565b6117ce5760408051808201825260098152681393d517d193d5539160ba1b6020820152905162461bcd60e51b815261034a9190600401612586565b6117db6005820183611a07565b61181b57604080518082018252600e81526d1393d11157d393d517d193d5539160921b6020820152905162461bcd60e51b815261034a9190600401612586565b6000838152600282016020526040812090805b600283015481101561193757846001600160a01b031683600201828154811061185957611859612599565b6000918252602090912001546001600160a01b03160361192f5760028301805461188590600190612787565b8154811061189557611895612599565b6000918252602090912001546002840180546001600160a01b0390921691839081106118c3576118c3612599565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826002018054806119045761190461279a565b600082815260209020810160001990810180546001600160a01b031916905501905560019150611937565b60010161182e565b508061197957604080518082018252600e81526d1393d11157d393d517d193d5539160921b6020820152905162461bcd60e51b815261034a9190600401612586565b604080518681526001600160a01b038616602082015260008183015290517faaa473c28a5fe04b6a7ecd795826e462f9d0c23f00ef9f51ec02fa6ea418806f9181900360600190a15050505050565b7f1320bfade83d725f4918cce6752986eeef865fd566a9348c57c798b58dfc7ea690565b600081815260018301602052604081205415155b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611a00565b6000611a00836001600160a01b038416611a9b565b611a4e63b32e731f60e01b611aea565b61059a81611bc8565b6000610dea825490565b6000611a008383611c1d565b6000611a008383611a9b565b60606000611a0083611c47565b6000611a00836001600160a01b038416611ca3565b6000818152600183016020526040812054611ae257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dea565b506000610dea565b6001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c4602052604090205460ff161515600114611b77576001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c460205260409020805460ff19166001179055611b90565b604051637967f77d60e11b815260040160405180910390fd5b6040516001600160e01b03198216907f78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f2290600090a250565b6000611bd26119c8565b905060005b8251811015611c1857611c0f838281518110611bf557611bf5612599565b602002602001015183600801611a2990919063ffffffff16565b50600101611bd7565b505050565b6000826000018281548110611c3457611c34612599565b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611c9757602002820191906000526020600020905b815481526020019060010190808311611c83575b50505050509050919050565b60008181526001830160205260408120548015611d8c576000611cc7600183612787565b8554909150600090611cdb90600190612787565b9050818114611d40576000866000018281548110611cfb57611cfb612599565b9060005260206000200154905080876000018481548110611d1e57611d1e612599565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d5157611d5161279a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610dea565b6000915050610dea565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915290565b604080518082019091526000815260208101611de7611d96565b905290565b508054611df8906125af565b6000825580601f10611e08575050565b601f01602090049060005260206000209081019061059a9190611ec0565b828054828255906000526020600020908101928215611e7b579160200282015b82811115611e7b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611e46565b50611e87929150611ec0565b5090565b604051806060016040528060006001600160a01b031681526020016060815260200160006004811115611de757611de761236f565b5b80821115611e875760008155600101611ec1565b600060208284031215611ee757600080fd5b5035919050565b600060c08301825184526020808401516001600160401b038082166020880152806040870151166040880152806060870151166060880152806080870151166080880152505060a084015160c060a087015282815180855260e088019150602083019450600092505b80831015611f805784516001600160a01b03168252938301936001929092019190830190611f57565b509695505050505050565b602081526000611a006020830184611eee565b80356001600160a01b0381168114611fb557600080fd5b919050565b600060208284031215611fcc57600080fd5b611a0082611f9e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561201357612013611fd5565b604052919050565b600082601f83011261202c57600080fd5b813560206001600160401b0382111561204757612047611fd5565b8160051b612056828201611feb565b928352848101820192828101908785111561207057600080fd5b83870192505b848310156120965761208783611f9e565b82529183019190830190612076565b979650505050505050565b6000602082840312156120b357600080fd5b81356001600160401b038111156120c957600080fd5b6120d58482850161201b565b949350505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561214557888303603f1901855281518051845287015187840187905261213287850182611eee565b9588019593505090860190600101612106565b509098975050505050505050565b6000815180845260005b818110156121795760208185018101518683018201520161215d565b506000602082860101526020601f19601f83011685010191505092915050565b6060815260006121ac6060830186611eee565b84602084015282810360408401526121c48185612153565b9695505050505050565b600080600080608085870312156121e457600080fd5b843593506020850135925060408501356001600160401b038116811461220957600080fd5b91506060850135801515811461221e57600080fd5b939692955090935050565b60006001600160401b0383111561224257612242611fd5565b612255601f8401601f1916602001611feb565b905082815283838301111561226957600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121561229657600080fd5b8435935060208501356001600160401b03808211156122b457600080fd5b6122c08883890161201b565b94506040870135935060608701359150808211156122dd57600080fd5b508501601f810187136122ef57600080fd5b6122fe87823560208401612229565b91505092959194509250565b60006020828403121561231c57600080fd5b813560058110611a0057600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561236357835183529284019291840191600101612347565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600581106123a357634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b03815116825260006020820151606060208501526123ce6060850182612153565b905060408301516123e26040860182612385565b509392505050565b602081526000611a0060208301846123a7565b6000806040838503121561241057600080fd5b8235915061242060208401611f9e565b90509250929050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561248057603f1988860301845261246e8583516123a7565b94509285019290850190600101612452565b5092979650505050505050565b600082601f83011261249e57600080fd5b611a0083833560208501612229565b600080604083850312156124c057600080fd5b6124c983611f9e565b915060208301356001600160401b038111156124e457600080fd5b6124f08582860161248d565b9150509250929050565b60006020828403121561250c57600080fd5b81356001600160401b0381111561252257600080fd5b6120d58482850161248d565b60008151808452602080850194506020840160005b838110156125685781516001600160a01b031687529582019590820190600101612543565b509495945050505050565b602081526000611a00602083018461252e565b602081526000611a006020830184612153565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806125c357607f821691505b6020821081036125e357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b0381811683821601908082111561073e5761073e6125e9565b601f821115611c18576000816000526020600020601f850160051c810160208610156126485750805b601f850160051c820191505b8181101561266757828155600101612654565b505050505050565b81516001600160401b0381111561268857612688611fd5565b61269c8161269684546125af565b8461261f565b602080601f8311600181146126d157600084156126b95750858301515b600019600386901b1c1916600185901b178555612667565b600085815260208120601f198616915b82811015612700578886015182559484019460019091019084016126e1565b508582101561271e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b838152606060208201526000612747606083018561252e565b9050826040830152949350505050565b60208101610dea8284612385565b6040815260006127786040830185612153565b9050611a006020830184612385565b81810381811115610dea57610dea6125e9565b634e487b7160e01b600052603160045260246000fda7c3be20e3a76821507555109752fad8a6630ef0362a34dcfcdfef83c99a2537",
}

// RiverRegistryDeployABI is the input ABI used to generate the binding from.
// Deprecated: Use RiverRegistryDeployMetaData.ABI instead.
var RiverRegistryDeployABI = RiverRegistryDeployMetaData.ABI

// RiverRegistryDeployBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RiverRegistryDeployMetaData.Bin instead.
var RiverRegistryDeployBin = RiverRegistryDeployMetaData.Bin

// DeployRiverRegistryDeploy deploys a new Ethereum contract, binding an instance of RiverRegistryDeploy to it.
func DeployRiverRegistryDeploy(auth *bind.TransactOpts, backend bind.ContractBackend, approvedOperators []common.Address) (common.Address, *types.Transaction, *RiverRegistryDeploy, error) {
	parsed, err := RiverRegistryDeployMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RiverRegistryDeployBin), backend, approvedOperators)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RiverRegistryDeploy{RiverRegistryDeployCaller: RiverRegistryDeployCaller{contract: contract}, RiverRegistryDeployTransactor: RiverRegistryDeployTransactor{contract: contract}, RiverRegistryDeployFilterer: RiverRegistryDeployFilterer{contract: contract}}, nil
}

// RiverRegistryDeploy is an auto generated Go binding around an Ethereum contract.
type RiverRegistryDeploy struct {
	RiverRegistryDeployCaller     // Read-only binding to the contract
	RiverRegistryDeployTransactor // Write-only binding to the contract
	RiverRegistryDeployFilterer   // Log filterer for contract events
}

// RiverRegistryDeployCaller is an auto generated read-only Go binding around an Ethereum contract.
type RiverRegistryDeployCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RiverRegistryDeployTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RiverRegistryDeployTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RiverRegistryDeployFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RiverRegistryDeployFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RiverRegistryDeploySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RiverRegistryDeploySession struct {
	Contract     *RiverRegistryDeploy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RiverRegistryDeployCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RiverRegistryDeployCallerSession struct {
	Contract *RiverRegistryDeployCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// RiverRegistryDeployTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RiverRegistryDeployTransactorSession struct {
	Contract     *RiverRegistryDeployTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// RiverRegistryDeployRaw is an auto generated low-level Go binding around an Ethereum contract.
type RiverRegistryDeployRaw struct {
	Contract *RiverRegistryDeploy // Generic contract binding to access the raw methods on
}

// RiverRegistryDeployCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RiverRegistryDeployCallerRaw struct {
	Contract *RiverRegistryDeployCaller // Generic read-only contract binding to access the raw methods on
}

// RiverRegistryDeployTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RiverRegistryDeployTransactorRaw struct {
	Contract *RiverRegistryDeployTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRiverRegistryDeploy creates a new instance of RiverRegistryDeploy, bound to a specific deployed contract.
func NewRiverRegistryDeploy(address common.Address, backend bind.ContractBackend) (*RiverRegistryDeploy, error) {
	contract, err := bindRiverRegistryDeploy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeploy{RiverRegistryDeployCaller: RiverRegistryDeployCaller{contract: contract}, RiverRegistryDeployTransactor: RiverRegistryDeployTransactor{contract: contract}, RiverRegistryDeployFilterer: RiverRegistryDeployFilterer{contract: contract}}, nil
}

// NewRiverRegistryDeployCaller creates a new read-only instance of RiverRegistryDeploy, bound to a specific deployed contract.
func NewRiverRegistryDeployCaller(address common.Address, caller bind.ContractCaller) (*RiverRegistryDeployCaller, error) {
	contract, err := bindRiverRegistryDeploy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployCaller{contract: contract}, nil
}

// NewRiverRegistryDeployTransactor creates a new write-only instance of RiverRegistryDeploy, bound to a specific deployed contract.
func NewRiverRegistryDeployTransactor(address common.Address, transactor bind.ContractTransactor) (*RiverRegistryDeployTransactor, error) {
	contract, err := bindRiverRegistryDeploy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployTransactor{contract: contract}, nil
}

// NewRiverRegistryDeployFilterer creates a new log filterer instance of RiverRegistryDeploy, bound to a specific deployed contract.
func NewRiverRegistryDeployFilterer(address common.Address, filterer bind.ContractFilterer) (*RiverRegistryDeployFilterer, error) {
	contract, err := bindRiverRegistryDeploy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployFilterer{contract: contract}, nil
}

// bindRiverRegistryDeploy binds a generic wrapper to an already deployed contract.
func bindRiverRegistryDeploy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RiverRegistryDeployMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RiverRegistryDeploy *RiverRegistryDeployRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RiverRegistryDeploy.Contract.RiverRegistryDeployCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RiverRegistryDeploy *RiverRegistryDeployRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RiverRegistryDeployTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RiverRegistryDeploy *RiverRegistryDeployRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RiverRegistryDeployTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RiverRegistryDeploy *RiverRegistryDeployCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RiverRegistryDeploy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.contract.Transact(opts, method, params...)
}

// GetAllNodeAddresses is a free data retrieval call binding the contract method 0xc8fe3a01.
//
// Solidity: function getAllNodeAddresses() view returns(address[])
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetAllNodeAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getAllNodeAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAllNodeAddresses is a free data retrieval call binding the contract method 0xc8fe3a01.
//
// Solidity: function getAllNodeAddresses() view returns(address[])
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetAllNodeAddresses() ([]common.Address, error) {
	return _RiverRegistryDeploy.Contract.GetAllNodeAddresses(&_RiverRegistryDeploy.CallOpts)
}

// GetAllNodeAddresses is a free data retrieval call binding the contract method 0xc8fe3a01.
//
// Solidity: function getAllNodeAddresses() view returns(address[])
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetAllNodeAddresses() ([]common.Address, error) {
	return _RiverRegistryDeploy.Contract.GetAllNodeAddresses(&_RiverRegistryDeploy.CallOpts)
}

// GetAllNodes is a free data retrieval call binding the contract method 0xa1174e7d.
//
// Solidity: function getAllNodes() view returns((address,string,uint8)[])
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetAllNodes(opts *bind.CallOpts) ([]IRiverRegistryBaseNode, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getAllNodes")

	if err != nil {
		return *new([]IRiverRegistryBaseNode), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRiverRegistryBaseNode)).(*[]IRiverRegistryBaseNode)

	return out0, err

}

// GetAllNodes is a free data retrieval call binding the contract method 0xa1174e7d.
//
// Solidity: function getAllNodes() view returns((address,string,uint8)[])
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetAllNodes() ([]IRiverRegistryBaseNode, error) {
	return _RiverRegistryDeploy.Contract.GetAllNodes(&_RiverRegistryDeploy.CallOpts)
}

// GetAllNodes is a free data retrieval call binding the contract method 0xa1174e7d.
//
// Solidity: function getAllNodes() view returns((address,string,uint8)[])
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetAllNodes() ([]IRiverRegistryBaseNode, error) {
	return _RiverRegistryDeploy.Contract.GetAllNodes(&_RiverRegistryDeploy.CallOpts)
}

// GetAllStreamIds is a free data retrieval call binding the contract method 0x86789fc6.
//
// Solidity: function getAllStreamIds() view returns(bytes32[])
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetAllStreamIds(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getAllStreamIds")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetAllStreamIds is a free data retrieval call binding the contract method 0x86789fc6.
//
// Solidity: function getAllStreamIds() view returns(bytes32[])
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetAllStreamIds() ([][32]byte, error) {
	return _RiverRegistryDeploy.Contract.GetAllStreamIds(&_RiverRegistryDeploy.CallOpts)
}

// GetAllStreamIds is a free data retrieval call binding the contract method 0x86789fc6.
//
// Solidity: function getAllStreamIds() view returns(bytes32[])
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetAllStreamIds() ([][32]byte, error) {
	return _RiverRegistryDeploy.Contract.GetAllStreamIds(&_RiverRegistryDeploy.CallOpts)
}

// GetAllStreams is a free data retrieval call binding the contract method 0x3bd84c0c.
//
// Solidity: function getAllStreams() view returns((bytes32,(bytes32,uint64,uint64,uint64,uint64,address[]))[])
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetAllStreams(opts *bind.CallOpts) ([]IRiverRegistryBaseStreamWithId, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getAllStreams")

	if err != nil {
		return *new([]IRiverRegistryBaseStreamWithId), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRiverRegistryBaseStreamWithId)).(*[]IRiverRegistryBaseStreamWithId)

	return out0, err

}

// GetAllStreams is a free data retrieval call binding the contract method 0x3bd84c0c.
//
// Solidity: function getAllStreams() view returns((bytes32,(bytes32,uint64,uint64,uint64,uint64,address[]))[])
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetAllStreams() ([]IRiverRegistryBaseStreamWithId, error) {
	return _RiverRegistryDeploy.Contract.GetAllStreams(&_RiverRegistryDeploy.CallOpts)
}

// GetAllStreams is a free data retrieval call binding the contract method 0x3bd84c0c.
//
// Solidity: function getAllStreams() view returns((bytes32,(bytes32,uint64,uint64,uint64,uint64,address[]))[])
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetAllStreams() ([]IRiverRegistryBaseStreamWithId, error) {
	return _RiverRegistryDeploy.Contract.GetAllStreams(&_RiverRegistryDeploy.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address nodeAddress) view returns((address,string,uint8))
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetNode(opts *bind.CallOpts, nodeAddress common.Address) (IRiverRegistryBaseNode, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getNode", nodeAddress)

	if err != nil {
		return *new(IRiverRegistryBaseNode), err
	}

	out0 := *abi.ConvertType(out[0], new(IRiverRegistryBaseNode)).(*IRiverRegistryBaseNode)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address nodeAddress) view returns((address,string,uint8))
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetNode(nodeAddress common.Address) (IRiverRegistryBaseNode, error) {
	return _RiverRegistryDeploy.Contract.GetNode(&_RiverRegistryDeploy.CallOpts, nodeAddress)
}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address nodeAddress) view returns((address,string,uint8))
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetNode(nodeAddress common.Address) (IRiverRegistryBaseNode, error) {
	return _RiverRegistryDeploy.Contract.GetNode(&_RiverRegistryDeploy.CallOpts, nodeAddress)
}

// GetNodeCount is a free data retrieval call binding the contract method 0x39bf397e.
//
// Solidity: function getNodeCount() view returns(uint256)
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetNodeCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getNodeCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCount is a free data retrieval call binding the contract method 0x39bf397e.
//
// Solidity: function getNodeCount() view returns(uint256)
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetNodeCount() (*big.Int, error) {
	return _RiverRegistryDeploy.Contract.GetNodeCount(&_RiverRegistryDeploy.CallOpts)
}

// GetNodeCount is a free data retrieval call binding the contract method 0x39bf397e.
//
// Solidity: function getNodeCount() view returns(uint256)
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetNodeCount() (*big.Int, error) {
	return _RiverRegistryDeploy.Contract.GetNodeCount(&_RiverRegistryDeploy.CallOpts)
}

// GetStream is a free data retrieval call binding the contract method 0x1290abe8.
//
// Solidity: function getStream(bytes32 streamId) view returns((bytes32,uint64,uint64,uint64,uint64,address[]))
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetStream(opts *bind.CallOpts, streamId [32]byte) (IRiverRegistryBaseStream, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getStream", streamId)

	if err != nil {
		return *new(IRiverRegistryBaseStream), err
	}

	out0 := *abi.ConvertType(out[0], new(IRiverRegistryBaseStream)).(*IRiverRegistryBaseStream)

	return out0, err

}

// GetStream is a free data retrieval call binding the contract method 0x1290abe8.
//
// Solidity: function getStream(bytes32 streamId) view returns((bytes32,uint64,uint64,uint64,uint64,address[]))
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetStream(streamId [32]byte) (IRiverRegistryBaseStream, error) {
	return _RiverRegistryDeploy.Contract.GetStream(&_RiverRegistryDeploy.CallOpts, streamId)
}

// GetStream is a free data retrieval call binding the contract method 0x1290abe8.
//
// Solidity: function getStream(bytes32 streamId) view returns((bytes32,uint64,uint64,uint64,uint64,address[]))
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetStream(streamId [32]byte) (IRiverRegistryBaseStream, error) {
	return _RiverRegistryDeploy.Contract.GetStream(&_RiverRegistryDeploy.CallOpts, streamId)
}

// GetStreamCount is a free data retrieval call binding the contract method 0xc0f22084.
//
// Solidity: function getStreamCount() view returns(uint256)
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetStreamCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getStreamCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStreamCount is a free data retrieval call binding the contract method 0xc0f22084.
//
// Solidity: function getStreamCount() view returns(uint256)
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetStreamCount() (*big.Int, error) {
	return _RiverRegistryDeploy.Contract.GetStreamCount(&_RiverRegistryDeploy.CallOpts)
}

// GetStreamCount is a free data retrieval call binding the contract method 0xc0f22084.
//
// Solidity: function getStreamCount() view returns(uint256)
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetStreamCount() (*big.Int, error) {
	return _RiverRegistryDeploy.Contract.GetStreamCount(&_RiverRegistryDeploy.CallOpts)
}

// GetStreamWithGenesis is a free data retrieval call binding the contract method 0x3c2544d1.
//
// Solidity: function getStreamWithGenesis(bytes32 streamId) view returns((bytes32,uint64,uint64,uint64,uint64,address[]), bytes32, bytes)
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) GetStreamWithGenesis(opts *bind.CallOpts, streamId [32]byte) (IRiverRegistryBaseStream, [32]byte, []byte, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "getStreamWithGenesis", streamId)

	if err != nil {
		return *new(IRiverRegistryBaseStream), *new([32]byte), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IRiverRegistryBaseStream)).(*IRiverRegistryBaseStream)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	out2 := *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return out0, out1, out2, err

}

// GetStreamWithGenesis is a free data retrieval call binding the contract method 0x3c2544d1.
//
// Solidity: function getStreamWithGenesis(bytes32 streamId) view returns((bytes32,uint64,uint64,uint64,uint64,address[]), bytes32, bytes)
func (_RiverRegistryDeploy *RiverRegistryDeploySession) GetStreamWithGenesis(streamId [32]byte) (IRiverRegistryBaseStream, [32]byte, []byte, error) {
	return _RiverRegistryDeploy.Contract.GetStreamWithGenesis(&_RiverRegistryDeploy.CallOpts, streamId)
}

// GetStreamWithGenesis is a free data retrieval call binding the contract method 0x3c2544d1.
//
// Solidity: function getStreamWithGenesis(bytes32 streamId) view returns((bytes32,uint64,uint64,uint64,uint64,address[]), bytes32, bytes)
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) GetStreamWithGenesis(streamId [32]byte) (IRiverRegistryBaseStream, [32]byte, []byte, error) {
	return _RiverRegistryDeploy.Contract.GetStreamWithGenesis(&_RiverRegistryDeploy.CallOpts, streamId)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address operator) view returns(bool)
func (_RiverRegistryDeploy *RiverRegistryDeployCaller) IsOperator(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _RiverRegistryDeploy.contract.Call(opts, &out, "isOperator", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address operator) view returns(bool)
func (_RiverRegistryDeploy *RiverRegistryDeploySession) IsOperator(operator common.Address) (bool, error) {
	return _RiverRegistryDeploy.Contract.IsOperator(&_RiverRegistryDeploy.CallOpts, operator)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address operator) view returns(bool)
func (_RiverRegistryDeploy *RiverRegistryDeployCallerSession) IsOperator(operator common.Address) (bool, error) {
	return _RiverRegistryDeploy.Contract.IsOperator(&_RiverRegistryDeploy.CallOpts, operator)
}

// RiverRegistryInit is a paid mutator transaction binding the contract method 0x286af253.
//
// Solidity: function __RiverRegistry_init(address[] approvedOperators) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) RiverRegistryInit(opts *bind.TransactOpts, approvedOperators []common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "__RiverRegistry_init", approvedOperators)
}

// RiverRegistryInit is a paid mutator transaction binding the contract method 0x286af253.
//
// Solidity: function __RiverRegistry_init(address[] approvedOperators) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) RiverRegistryInit(approvedOperators []common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RiverRegistryInit(&_RiverRegistryDeploy.TransactOpts, approvedOperators)
}

// RiverRegistryInit is a paid mutator transaction binding the contract method 0x286af253.
//
// Solidity: function __RiverRegistry_init(address[] approvedOperators) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) RiverRegistryInit(approvedOperators []common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RiverRegistryInit(&_RiverRegistryDeploy.TransactOpts, approvedOperators)
}

// AllocateStream is a paid mutator transaction binding the contract method 0x6b883c39.
//
// Solidity: function allocateStream(bytes32 streamId, address[] nodes, bytes32 genesisMiniblockHash, bytes genesisMiniblock) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) AllocateStream(opts *bind.TransactOpts, streamId [32]byte, nodes []common.Address, genesisMiniblockHash [32]byte, genesisMiniblock []byte) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "allocateStream", streamId, nodes, genesisMiniblockHash, genesisMiniblock)
}

// AllocateStream is a paid mutator transaction binding the contract method 0x6b883c39.
//
// Solidity: function allocateStream(bytes32 streamId, address[] nodes, bytes32 genesisMiniblockHash, bytes genesisMiniblock) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) AllocateStream(streamId [32]byte, nodes []common.Address, genesisMiniblockHash [32]byte, genesisMiniblock []byte) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.AllocateStream(&_RiverRegistryDeploy.TransactOpts, streamId, nodes, genesisMiniblockHash, genesisMiniblock)
}

// AllocateStream is a paid mutator transaction binding the contract method 0x6b883c39.
//
// Solidity: function allocateStream(bytes32 streamId, address[] nodes, bytes32 genesisMiniblockHash, bytes genesisMiniblock) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) AllocateStream(streamId [32]byte, nodes []common.Address, genesisMiniblockHash [32]byte, genesisMiniblock []byte) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.AllocateStream(&_RiverRegistryDeploy.TransactOpts, streamId, nodes, genesisMiniblockHash, genesisMiniblock)
}

// ApproveOperator is a paid mutator transaction binding the contract method 0x242cae9f.
//
// Solidity: function approveOperator(address operator) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) ApproveOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "approveOperator", operator)
}

// ApproveOperator is a paid mutator transaction binding the contract method 0x242cae9f.
//
// Solidity: function approveOperator(address operator) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) ApproveOperator(operator common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.ApproveOperator(&_RiverRegistryDeploy.TransactOpts, operator)
}

// ApproveOperator is a paid mutator transaction binding the contract method 0x242cae9f.
//
// Solidity: function approveOperator(address operator) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) ApproveOperator(operator common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.ApproveOperator(&_RiverRegistryDeploy.TransactOpts, operator)
}

// PlaceStreamOnNode is a paid mutator transaction binding the contract method 0x9ee86d38.
//
// Solidity: function placeStreamOnNode(bytes32 streamId, address nodeAddress) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) PlaceStreamOnNode(opts *bind.TransactOpts, streamId [32]byte, nodeAddress common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "placeStreamOnNode", streamId, nodeAddress)
}

// PlaceStreamOnNode is a paid mutator transaction binding the contract method 0x9ee86d38.
//
// Solidity: function placeStreamOnNode(bytes32 streamId, address nodeAddress) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) PlaceStreamOnNode(streamId [32]byte, nodeAddress common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.PlaceStreamOnNode(&_RiverRegistryDeploy.TransactOpts, streamId, nodeAddress)
}

// PlaceStreamOnNode is a paid mutator transaction binding the contract method 0x9ee86d38.
//
// Solidity: function placeStreamOnNode(bytes32 streamId, address nodeAddress) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) PlaceStreamOnNode(streamId [32]byte, nodeAddress common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.PlaceStreamOnNode(&_RiverRegistryDeploy.TransactOpts, streamId, nodeAddress)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xbb9b342d.
//
// Solidity: function registerNode(address nodeAddress, string url) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) RegisterNode(opts *bind.TransactOpts, nodeAddress common.Address, url string) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "registerNode", nodeAddress, url)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xbb9b342d.
//
// Solidity: function registerNode(address nodeAddress, string url) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) RegisterNode(nodeAddress common.Address, url string) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RegisterNode(&_RiverRegistryDeploy.TransactOpts, nodeAddress, url)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xbb9b342d.
//
// Solidity: function registerNode(address nodeAddress, string url) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) RegisterNode(nodeAddress common.Address, url string) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RegisterNode(&_RiverRegistryDeploy.TransactOpts, nodeAddress, url)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) RemoveOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "removeOperator", operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) RemoveOperator(operator common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RemoveOperator(&_RiverRegistryDeploy.TransactOpts, operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) RemoveOperator(operator common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RemoveOperator(&_RiverRegistryDeploy.TransactOpts, operator)
}

// RemoveStreamFromNode is a paid mutator transaction binding the contract method 0xee885b12.
//
// Solidity: function removeStreamFromNode(bytes32 streamId, address nodeAddress) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) RemoveStreamFromNode(opts *bind.TransactOpts, streamId [32]byte, nodeAddress common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "removeStreamFromNode", streamId, nodeAddress)
}

// RemoveStreamFromNode is a paid mutator transaction binding the contract method 0xee885b12.
//
// Solidity: function removeStreamFromNode(bytes32 streamId, address nodeAddress) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) RemoveStreamFromNode(streamId [32]byte, nodeAddress common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RemoveStreamFromNode(&_RiverRegistryDeploy.TransactOpts, streamId, nodeAddress)
}

// RemoveStreamFromNode is a paid mutator transaction binding the contract method 0xee885b12.
//
// Solidity: function removeStreamFromNode(bytes32 streamId, address nodeAddress) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) RemoveStreamFromNode(streamId [32]byte, nodeAddress common.Address) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.RemoveStreamFromNode(&_RiverRegistryDeploy.TransactOpts, streamId, nodeAddress)
}

// SetStreamLastMiniblock is a paid mutator transaction binding the contract method 0x681a8d67.
//
// Solidity: function setStreamLastMiniblock(bytes32 streamId, bytes32 lastMiniblockHash, uint64 lastMiniblockNum, bool isSealed) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) SetStreamLastMiniblock(opts *bind.TransactOpts, streamId [32]byte, lastMiniblockHash [32]byte, lastMiniblockNum uint64, isSealed bool) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "setStreamLastMiniblock", streamId, lastMiniblockHash, lastMiniblockNum, isSealed)
}

// SetStreamLastMiniblock is a paid mutator transaction binding the contract method 0x681a8d67.
//
// Solidity: function setStreamLastMiniblock(bytes32 streamId, bytes32 lastMiniblockHash, uint64 lastMiniblockNum, bool isSealed) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) SetStreamLastMiniblock(streamId [32]byte, lastMiniblockHash [32]byte, lastMiniblockNum uint64, isSealed bool) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.SetStreamLastMiniblock(&_RiverRegistryDeploy.TransactOpts, streamId, lastMiniblockHash, lastMiniblockNum, isSealed)
}

// SetStreamLastMiniblock is a paid mutator transaction binding the contract method 0x681a8d67.
//
// Solidity: function setStreamLastMiniblock(bytes32 streamId, bytes32 lastMiniblockHash, uint64 lastMiniblockNum, bool isSealed) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) SetStreamLastMiniblock(streamId [32]byte, lastMiniblockHash [32]byte, lastMiniblockNum uint64, isSealed bool) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.SetStreamLastMiniblock(&_RiverRegistryDeploy.TransactOpts, streamId, lastMiniblockHash, lastMiniblockNum, isSealed)
}

// UpdateNodeStatus is a paid mutator transaction binding the contract method 0x7691f5ed.
//
// Solidity: function updateNodeStatus(uint8 status) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) UpdateNodeStatus(opts *bind.TransactOpts, status uint8) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "updateNodeStatus", status)
}

// UpdateNodeStatus is a paid mutator transaction binding the contract method 0x7691f5ed.
//
// Solidity: function updateNodeStatus(uint8 status) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) UpdateNodeStatus(status uint8) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.UpdateNodeStatus(&_RiverRegistryDeploy.TransactOpts, status)
}

// UpdateNodeStatus is a paid mutator transaction binding the contract method 0x7691f5ed.
//
// Solidity: function updateNodeStatus(uint8 status) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) UpdateNodeStatus(status uint8) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.UpdateNodeStatus(&_RiverRegistryDeploy.TransactOpts, status)
}

// UpdateNodeUrl is a paid mutator transaction binding the contract method 0xbe6522d6.
//
// Solidity: function updateNodeUrl(string url) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactor) UpdateNodeUrl(opts *bind.TransactOpts, url string) (*types.Transaction, error) {
	return _RiverRegistryDeploy.contract.Transact(opts, "updateNodeUrl", url)
}

// UpdateNodeUrl is a paid mutator transaction binding the contract method 0xbe6522d6.
//
// Solidity: function updateNodeUrl(string url) returns()
func (_RiverRegistryDeploy *RiverRegistryDeploySession) UpdateNodeUrl(url string) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.UpdateNodeUrl(&_RiverRegistryDeploy.TransactOpts, url)
}

// UpdateNodeUrl is a paid mutator transaction binding the contract method 0xbe6522d6.
//
// Solidity: function updateNodeUrl(string url) returns()
func (_RiverRegistryDeploy *RiverRegistryDeployTransactorSession) UpdateNodeUrl(url string) (*types.Transaction, error) {
	return _RiverRegistryDeploy.Contract.UpdateNodeUrl(&_RiverRegistryDeploy.TransactOpts, url)
}

// RiverRegistryDeployInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployInitializedIterator struct {
	Event *RiverRegistryDeployInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployInitialized represents a Initialized event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployInitialized struct {
	Version uint32
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c.
//
// Solidity: event Initialized(uint32 version)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterInitialized(opts *bind.FilterOpts) (*RiverRegistryDeployInitializedIterator, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployInitializedIterator{contract: _RiverRegistryDeploy.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c.
//
// Solidity: event Initialized(uint32 version)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployInitialized) (event.Subscription, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployInitialized)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c.
//
// Solidity: event Initialized(uint32 version)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseInitialized(log types.Log) (*RiverRegistryDeployInitialized, error) {
	event := new(RiverRegistryDeployInitialized)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployInterfaceAddedIterator is returned from FilterInterfaceAdded and is used to iterate over the raw logs and unpacked data for InterfaceAdded events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployInterfaceAddedIterator struct {
	Event *RiverRegistryDeployInterfaceAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployInterfaceAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployInterfaceAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployInterfaceAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployInterfaceAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployInterfaceAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployInterfaceAdded represents a InterfaceAdded event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployInterfaceAdded struct {
	InterfaceId [4]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInterfaceAdded is a free log retrieval operation binding the contract event 0x78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f22.
//
// Solidity: event InterfaceAdded(bytes4 indexed interfaceId)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterInterfaceAdded(opts *bind.FilterOpts, interfaceId [][4]byte) (*RiverRegistryDeployInterfaceAddedIterator, error) {

	var interfaceIdRule []interface{}
	for _, interfaceIdItem := range interfaceId {
		interfaceIdRule = append(interfaceIdRule, interfaceIdItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "InterfaceAdded", interfaceIdRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployInterfaceAddedIterator{contract: _RiverRegistryDeploy.contract, event: "InterfaceAdded", logs: logs, sub: sub}, nil
}

// WatchInterfaceAdded is a free log subscription operation binding the contract event 0x78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f22.
//
// Solidity: event InterfaceAdded(bytes4 indexed interfaceId)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchInterfaceAdded(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployInterfaceAdded, interfaceId [][4]byte) (event.Subscription, error) {

	var interfaceIdRule []interface{}
	for _, interfaceIdItem := range interfaceId {
		interfaceIdRule = append(interfaceIdRule, interfaceIdItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "InterfaceAdded", interfaceIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployInterfaceAdded)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "InterfaceAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInterfaceAdded is a log parse operation binding the contract event 0x78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f22.
//
// Solidity: event InterfaceAdded(bytes4 indexed interfaceId)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseInterfaceAdded(log types.Log) (*RiverRegistryDeployInterfaceAdded, error) {
	event := new(RiverRegistryDeployInterfaceAdded)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "InterfaceAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployInterfaceRemovedIterator is returned from FilterInterfaceRemoved and is used to iterate over the raw logs and unpacked data for InterfaceRemoved events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployInterfaceRemovedIterator struct {
	Event *RiverRegistryDeployInterfaceRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployInterfaceRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployInterfaceRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployInterfaceRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployInterfaceRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployInterfaceRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployInterfaceRemoved represents a InterfaceRemoved event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployInterfaceRemoved struct {
	InterfaceId [4]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInterfaceRemoved is a free log retrieval operation binding the contract event 0x8bd383568d0bc57b64b8e424138fc19ae827e694e05757faa8fea8f63fb87315.
//
// Solidity: event InterfaceRemoved(bytes4 indexed interfaceId)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterInterfaceRemoved(opts *bind.FilterOpts, interfaceId [][4]byte) (*RiverRegistryDeployInterfaceRemovedIterator, error) {

	var interfaceIdRule []interface{}
	for _, interfaceIdItem := range interfaceId {
		interfaceIdRule = append(interfaceIdRule, interfaceIdItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "InterfaceRemoved", interfaceIdRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployInterfaceRemovedIterator{contract: _RiverRegistryDeploy.contract, event: "InterfaceRemoved", logs: logs, sub: sub}, nil
}

// WatchInterfaceRemoved is a free log subscription operation binding the contract event 0x8bd383568d0bc57b64b8e424138fc19ae827e694e05757faa8fea8f63fb87315.
//
// Solidity: event InterfaceRemoved(bytes4 indexed interfaceId)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchInterfaceRemoved(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployInterfaceRemoved, interfaceId [][4]byte) (event.Subscription, error) {

	var interfaceIdRule []interface{}
	for _, interfaceIdItem := range interfaceId {
		interfaceIdRule = append(interfaceIdRule, interfaceIdItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "InterfaceRemoved", interfaceIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployInterfaceRemoved)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "InterfaceRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInterfaceRemoved is a log parse operation binding the contract event 0x8bd383568d0bc57b64b8e424138fc19ae827e694e05757faa8fea8f63fb87315.
//
// Solidity: event InterfaceRemoved(bytes4 indexed interfaceId)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseInterfaceRemoved(log types.Log) (*RiverRegistryDeployInterfaceRemoved, error) {
	event := new(RiverRegistryDeployInterfaceRemoved)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "InterfaceRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployNodeAddedIterator is returned from FilterNodeAdded and is used to iterate over the raw logs and unpacked data for NodeAdded events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployNodeAddedIterator struct {
	Event *RiverRegistryDeployNodeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployNodeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployNodeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployNodeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployNodeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployNodeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployNodeAdded represents a NodeAdded event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployNodeAdded struct {
	NodeAddress common.Address
	Url         string
	Status      uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNodeAdded is a free log retrieval operation binding the contract event 0xd6f3629b08191adb8308c3a65d5f8803b7f8f3e359c433fa7ae623276635e561.
//
// Solidity: event NodeAdded(address indexed nodeAddress, string url, uint8 status)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterNodeAdded(opts *bind.FilterOpts, nodeAddress []common.Address) (*RiverRegistryDeployNodeAddedIterator, error) {

	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "NodeAdded", nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployNodeAddedIterator{contract: _RiverRegistryDeploy.contract, event: "NodeAdded", logs: logs, sub: sub}, nil
}

// WatchNodeAdded is a free log subscription operation binding the contract event 0xd6f3629b08191adb8308c3a65d5f8803b7f8f3e359c433fa7ae623276635e561.
//
// Solidity: event NodeAdded(address indexed nodeAddress, string url, uint8 status)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchNodeAdded(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployNodeAdded, nodeAddress []common.Address) (event.Subscription, error) {

	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "NodeAdded", nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployNodeAdded)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "NodeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeAdded is a log parse operation binding the contract event 0xd6f3629b08191adb8308c3a65d5f8803b7f8f3e359c433fa7ae623276635e561.
//
// Solidity: event NodeAdded(address indexed nodeAddress, string url, uint8 status)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseNodeAdded(log types.Log) (*RiverRegistryDeployNodeAdded, error) {
	event := new(RiverRegistryDeployNodeAdded)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "NodeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployNodeStatusUpdatedIterator is returned from FilterNodeStatusUpdated and is used to iterate over the raw logs and unpacked data for NodeStatusUpdated events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployNodeStatusUpdatedIterator struct {
	Event *RiverRegistryDeployNodeStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployNodeStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployNodeStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployNodeStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployNodeStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployNodeStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployNodeStatusUpdated represents a NodeStatusUpdated event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployNodeStatusUpdated struct {
	NodeAddress common.Address
	Status      uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNodeStatusUpdated is a free log retrieval operation binding the contract event 0x20891cc7622c7951cbd8c70c61a5201eb45625b8c00e8f6c986cfca78f3dbfa0.
//
// Solidity: event NodeStatusUpdated(address indexed nodeAddress, uint8 status)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterNodeStatusUpdated(opts *bind.FilterOpts, nodeAddress []common.Address) (*RiverRegistryDeployNodeStatusUpdatedIterator, error) {

	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "NodeStatusUpdated", nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployNodeStatusUpdatedIterator{contract: _RiverRegistryDeploy.contract, event: "NodeStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchNodeStatusUpdated is a free log subscription operation binding the contract event 0x20891cc7622c7951cbd8c70c61a5201eb45625b8c00e8f6c986cfca78f3dbfa0.
//
// Solidity: event NodeStatusUpdated(address indexed nodeAddress, uint8 status)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchNodeStatusUpdated(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployNodeStatusUpdated, nodeAddress []common.Address) (event.Subscription, error) {

	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "NodeStatusUpdated", nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployNodeStatusUpdated)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "NodeStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeStatusUpdated is a log parse operation binding the contract event 0x20891cc7622c7951cbd8c70c61a5201eb45625b8c00e8f6c986cfca78f3dbfa0.
//
// Solidity: event NodeStatusUpdated(address indexed nodeAddress, uint8 status)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseNodeStatusUpdated(log types.Log) (*RiverRegistryDeployNodeStatusUpdated, error) {
	event := new(RiverRegistryDeployNodeStatusUpdated)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "NodeStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployNodeUrlUpdatedIterator is returned from FilterNodeUrlUpdated and is used to iterate over the raw logs and unpacked data for NodeUrlUpdated events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployNodeUrlUpdatedIterator struct {
	Event *RiverRegistryDeployNodeUrlUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployNodeUrlUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployNodeUrlUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployNodeUrlUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployNodeUrlUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployNodeUrlUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployNodeUrlUpdated represents a NodeUrlUpdated event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployNodeUrlUpdated struct {
	NodeAddress common.Address
	Url         string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNodeUrlUpdated is a free log retrieval operation binding the contract event 0x4505168a8705a16fd4d0575197fd0f510db69df93a065e158ad2c0957ba12bac.
//
// Solidity: event NodeUrlUpdated(address indexed nodeAddress, string url)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterNodeUrlUpdated(opts *bind.FilterOpts, nodeAddress []common.Address) (*RiverRegistryDeployNodeUrlUpdatedIterator, error) {

	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "NodeUrlUpdated", nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployNodeUrlUpdatedIterator{contract: _RiverRegistryDeploy.contract, event: "NodeUrlUpdated", logs: logs, sub: sub}, nil
}

// WatchNodeUrlUpdated is a free log subscription operation binding the contract event 0x4505168a8705a16fd4d0575197fd0f510db69df93a065e158ad2c0957ba12bac.
//
// Solidity: event NodeUrlUpdated(address indexed nodeAddress, string url)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchNodeUrlUpdated(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployNodeUrlUpdated, nodeAddress []common.Address) (event.Subscription, error) {

	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "NodeUrlUpdated", nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployNodeUrlUpdated)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "NodeUrlUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeUrlUpdated is a log parse operation binding the contract event 0x4505168a8705a16fd4d0575197fd0f510db69df93a065e158ad2c0957ba12bac.
//
// Solidity: event NodeUrlUpdated(address indexed nodeAddress, string url)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseNodeUrlUpdated(log types.Log) (*RiverRegistryDeployNodeUrlUpdated, error) {
	event := new(RiverRegistryDeployNodeUrlUpdated)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "NodeUrlUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployOperatorAddedIterator struct {
	Event *RiverRegistryDeployOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployOperatorAdded represents a OperatorAdded event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployOperatorAdded struct {
	OperatorAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operatorAddress)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterOperatorAdded(opts *bind.FilterOpts, operatorAddress []common.Address) (*RiverRegistryDeployOperatorAddedIterator, error) {

	var operatorAddressRule []interface{}
	for _, operatorAddressItem := range operatorAddress {
		operatorAddressRule = append(operatorAddressRule, operatorAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "OperatorAdded", operatorAddressRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployOperatorAddedIterator{contract: _RiverRegistryDeploy.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operatorAddress)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployOperatorAdded, operatorAddress []common.Address) (event.Subscription, error) {

	var operatorAddressRule []interface{}
	for _, operatorAddressItem := range operatorAddress {
		operatorAddressRule = append(operatorAddressRule, operatorAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "OperatorAdded", operatorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployOperatorAdded)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operatorAddress)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseOperatorAdded(log types.Log) (*RiverRegistryDeployOperatorAdded, error) {
	event := new(RiverRegistryDeployOperatorAdded)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployOperatorRemovedIterator is returned from FilterOperatorRemoved and is used to iterate over the raw logs and unpacked data for OperatorRemoved events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployOperatorRemovedIterator struct {
	Event *RiverRegistryDeployOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployOperatorRemoved represents a OperatorRemoved event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployOperatorRemoved struct {
	OperatorAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOperatorRemoved is a free log retrieval operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operatorAddress)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterOperatorRemoved(opts *bind.FilterOpts, operatorAddress []common.Address) (*RiverRegistryDeployOperatorRemovedIterator, error) {

	var operatorAddressRule []interface{}
	for _, operatorAddressItem := range operatorAddress {
		operatorAddressRule = append(operatorAddressRule, operatorAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "OperatorRemoved", operatorAddressRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployOperatorRemovedIterator{contract: _RiverRegistryDeploy.contract, event: "OperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchOperatorRemoved is a free log subscription operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operatorAddress)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchOperatorRemoved(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployOperatorRemoved, operatorAddress []common.Address) (event.Subscription, error) {

	var operatorAddressRule []interface{}
	for _, operatorAddressItem := range operatorAddress {
		operatorAddressRule = append(operatorAddressRule, operatorAddressItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "OperatorRemoved", operatorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployOperatorRemoved)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRemoved is a log parse operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operatorAddress)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseOperatorRemoved(log types.Log) (*RiverRegistryDeployOperatorRemoved, error) {
	event := new(RiverRegistryDeployOperatorRemoved)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployOwnershipTransferredIterator struct {
	Event *RiverRegistryDeployOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployOwnershipTransferred represents a OwnershipTransferred event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RiverRegistryDeployOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployOwnershipTransferredIterator{contract: _RiverRegistryDeploy.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployOwnershipTransferred)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseOwnershipTransferred(log types.Log) (*RiverRegistryDeployOwnershipTransferred, error) {
	event := new(RiverRegistryDeployOwnershipTransferred)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployStreamAllocatedIterator is returned from FilterStreamAllocated and is used to iterate over the raw logs and unpacked data for StreamAllocated events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployStreamAllocatedIterator struct {
	Event *RiverRegistryDeployStreamAllocated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployStreamAllocatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployStreamAllocated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployStreamAllocated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployStreamAllocatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployStreamAllocatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployStreamAllocated represents a StreamAllocated event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployStreamAllocated struct {
	StreamId             [32]byte
	Nodes                []common.Address
	GenesisMiniblockHash [32]byte
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterStreamAllocated is a free log retrieval operation binding the contract event 0xd79158fa478ef0af48ae6b32b29d29b2a37ee7b0dfcce6005880fd071623b5fb.
//
// Solidity: event StreamAllocated(bytes32 streamId, address[] nodes, bytes32 genesisMiniblockHash)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterStreamAllocated(opts *bind.FilterOpts) (*RiverRegistryDeployStreamAllocatedIterator, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "StreamAllocated")
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployStreamAllocatedIterator{contract: _RiverRegistryDeploy.contract, event: "StreamAllocated", logs: logs, sub: sub}, nil
}

// WatchStreamAllocated is a free log subscription operation binding the contract event 0xd79158fa478ef0af48ae6b32b29d29b2a37ee7b0dfcce6005880fd071623b5fb.
//
// Solidity: event StreamAllocated(bytes32 streamId, address[] nodes, bytes32 genesisMiniblockHash)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchStreamAllocated(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployStreamAllocated) (event.Subscription, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "StreamAllocated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployStreamAllocated)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "StreamAllocated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamAllocated is a log parse operation binding the contract event 0xd79158fa478ef0af48ae6b32b29d29b2a37ee7b0dfcce6005880fd071623b5fb.
//
// Solidity: event StreamAllocated(bytes32 streamId, address[] nodes, bytes32 genesisMiniblockHash)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseStreamAllocated(log types.Log) (*RiverRegistryDeployStreamAllocated, error) {
	event := new(RiverRegistryDeployStreamAllocated)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "StreamAllocated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployStreamLastMiniblockUpdatedIterator is returned from FilterStreamLastMiniblockUpdated and is used to iterate over the raw logs and unpacked data for StreamLastMiniblockUpdated events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployStreamLastMiniblockUpdatedIterator struct {
	Event *RiverRegistryDeployStreamLastMiniblockUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployStreamLastMiniblockUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployStreamLastMiniblockUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployStreamLastMiniblockUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployStreamLastMiniblockUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployStreamLastMiniblockUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployStreamLastMiniblockUpdated represents a StreamLastMiniblockUpdated event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployStreamLastMiniblockUpdated struct {
	StreamId          [32]byte
	LastMiniblockHash [32]byte
	LastMiniblockNum  uint64
	IsSealed          bool
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterStreamLastMiniblockUpdated is a free log retrieval operation binding the contract event 0xccc26bbb6dd655ea0bb8a40a3c30e35c6bdf42f8faf0d71bbea897af768cda8b.
//
// Solidity: event StreamLastMiniblockUpdated(bytes32 streamId, bytes32 lastMiniblockHash, uint64 lastMiniblockNum, bool isSealed)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterStreamLastMiniblockUpdated(opts *bind.FilterOpts) (*RiverRegistryDeployStreamLastMiniblockUpdatedIterator, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "StreamLastMiniblockUpdated")
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployStreamLastMiniblockUpdatedIterator{contract: _RiverRegistryDeploy.contract, event: "StreamLastMiniblockUpdated", logs: logs, sub: sub}, nil
}

// WatchStreamLastMiniblockUpdated is a free log subscription operation binding the contract event 0xccc26bbb6dd655ea0bb8a40a3c30e35c6bdf42f8faf0d71bbea897af768cda8b.
//
// Solidity: event StreamLastMiniblockUpdated(bytes32 streamId, bytes32 lastMiniblockHash, uint64 lastMiniblockNum, bool isSealed)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchStreamLastMiniblockUpdated(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployStreamLastMiniblockUpdated) (event.Subscription, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "StreamLastMiniblockUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployStreamLastMiniblockUpdated)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "StreamLastMiniblockUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamLastMiniblockUpdated is a log parse operation binding the contract event 0xccc26bbb6dd655ea0bb8a40a3c30e35c6bdf42f8faf0d71bbea897af768cda8b.
//
// Solidity: event StreamLastMiniblockUpdated(bytes32 streamId, bytes32 lastMiniblockHash, uint64 lastMiniblockNum, bool isSealed)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseStreamLastMiniblockUpdated(log types.Log) (*RiverRegistryDeployStreamLastMiniblockUpdated, error) {
	event := new(RiverRegistryDeployStreamLastMiniblockUpdated)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "StreamLastMiniblockUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RiverRegistryDeployStreamPlacementUpdatedIterator is returned from FilterStreamPlacementUpdated and is used to iterate over the raw logs and unpacked data for StreamPlacementUpdated events raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployStreamPlacementUpdatedIterator struct {
	Event *RiverRegistryDeployStreamPlacementUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RiverRegistryDeployStreamPlacementUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RiverRegistryDeployStreamPlacementUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RiverRegistryDeployStreamPlacementUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RiverRegistryDeployStreamPlacementUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RiverRegistryDeployStreamPlacementUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RiverRegistryDeployStreamPlacementUpdated represents a StreamPlacementUpdated event raised by the RiverRegistryDeploy contract.
type RiverRegistryDeployStreamPlacementUpdated struct {
	StreamId    [32]byte
	NodeAddress common.Address
	IsAdded     bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStreamPlacementUpdated is a free log retrieval operation binding the contract event 0xaaa473c28a5fe04b6a7ecd795826e462f9d0c23f00ef9f51ec02fa6ea418806f.
//
// Solidity: event StreamPlacementUpdated(bytes32 streamId, address nodeAddress, bool isAdded)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) FilterStreamPlacementUpdated(opts *bind.FilterOpts) (*RiverRegistryDeployStreamPlacementUpdatedIterator, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.FilterLogs(opts, "StreamPlacementUpdated")
	if err != nil {
		return nil, err
	}
	return &RiverRegistryDeployStreamPlacementUpdatedIterator{contract: _RiverRegistryDeploy.contract, event: "StreamPlacementUpdated", logs: logs, sub: sub}, nil
}

// WatchStreamPlacementUpdated is a free log subscription operation binding the contract event 0xaaa473c28a5fe04b6a7ecd795826e462f9d0c23f00ef9f51ec02fa6ea418806f.
//
// Solidity: event StreamPlacementUpdated(bytes32 streamId, address nodeAddress, bool isAdded)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) WatchStreamPlacementUpdated(opts *bind.WatchOpts, sink chan<- *RiverRegistryDeployStreamPlacementUpdated) (event.Subscription, error) {

	logs, sub, err := _RiverRegistryDeploy.contract.WatchLogs(opts, "StreamPlacementUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RiverRegistryDeployStreamPlacementUpdated)
				if err := _RiverRegistryDeploy.contract.UnpackLog(event, "StreamPlacementUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamPlacementUpdated is a log parse operation binding the contract event 0xaaa473c28a5fe04b6a7ecd795826e462f9d0c23f00ef9f51ec02fa6ea418806f.
//
// Solidity: event StreamPlacementUpdated(bytes32 streamId, address nodeAddress, bool isAdded)
func (_RiverRegistryDeploy *RiverRegistryDeployFilterer) ParseStreamPlacementUpdated(log types.Log) (*RiverRegistryDeployStreamPlacementUpdated, error) {
	event := new(RiverRegistryDeployStreamPlacementUpdated)
	if err := _RiverRegistryDeploy.contract.UnpackLog(event, "StreamPlacementUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
