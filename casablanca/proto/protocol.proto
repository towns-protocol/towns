syntax = "proto3";
package casablanca;
option go_package = "casablanca/node/protocol";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

/**
 * Envelope contains serialized event, and its hash and signature.
 * hash is used as event id. Subsequent events reference this event by hash.
 */
message Envelope {
    /**
     * Hash of event.
     * While hash can be recalculated from the event, having it here explicitely
     * makes it easier to work with event.
     * For the event to be valid, must match hash of event field. 
     */
    bytes hash = 1;

    /**
     * Signature.
     * For the event to be valid, signature must match event.creator_address
     * or be signed by the address from evant.delegate_sig.
     */
    bytes signature = 2;

    bytes event = 3;
}

message StreamEvent {
    /**
     * Address of the creator of the event.
     * For user - address of the user's Towns wallet.
     * For server - address of the server's keypair in staking smart contract.
     *
     * For the event to be valid:
     * If delegate_sig is present, creator_address must match delegate_sig.
     * If delegate_sig is not present, creator_address must match event signature in the Envelope.
     */
    bytes creator_address = 1;

     /**
      * delegate_sig allows event to be signed by device keypair 
      * which is linked to the user's Towns wallet.
      *
      * delegate_sig constains signature of the public key of the device keypair.
      * User's Towns wallet is used to produce this signature.
      * 
      * If present, for the event to be valid:
      * 1. creator_address must match delegate_sig's signer public key
      * 2. delegate_sig should be the signature of Envelope.signature's public key.
      *
      * Server nodes sign node-produced events with their own keypair and do not
      * need to use delegate_sig.
      */
    bytes delegate_sig = 2;
 
    /** Salt ensures that similar messages are not hashed to the same value. genId() from id.ts may be used. */
    /** TODO: move salt to inception event */
    bytes salt = 3;
 
    /** Hashes of the preceding leaf events in the stream. Empty array for the inception event. */
    repeated bytes prev_events = 4;
 
    /** CreatedAt is the time when the event was created.
    NOTE: this value is set by clients and is not reliable for anything other than displaying
    the value to the user. Never use this value to sort events from different users.  */
    int64 created_at_epoc_ms = 5;
    
    /** Variable-type payload. 
      * Payloads should obey the following rules:
      * - payloads should have their own unique type
      * - each payload should have a oneof content field
      * - each payload should have an inception field inside the content oneof
      * - each payload should have a unique Inception type
      * - payloads can't violate previous type recursively to inception payload
    */
    oneof payload {
        MiniblockHeader miniblock_header = 100;
        SpacePayload space_payload = 101;
        ChannelPayload channel_payload = 102;
        UserPayload user_payload = 103;
        UserSettingsPayload user_settings_payload = 104;
        UserDeviceKeyPayload user_device_key_payload = 105;
        
    }
}


// Represents a miniblock header.
// MiniblockHeader is a special event that forms a block from set of the stream events.
// Hash of the serialized StreamEvent containing MiniblockHeader is used as a block hash.
message MiniblockHeader {
    // Miniblock number.
    // 0 for genesis block.
    // Must be 1 greater than the previous block number.
    int64 miniblock_num = 1;

    // Hash of the previous block.
    bytes prev_miniblock_hash = 2;

    // Timestamp of the block.
    // Must be greater than the previous block timestamp.
    google.protobuf.Timestamp timestamp = 3;

    // Hashes of the events included in the block.
    repeated bytes event_hashes = 4;

    // Snapshot of the state at the end of the block.
    optional Snapshot snapshot = 5;

    // stream payloads are required to have a content field
    oneof content {
        google.protobuf.Empty none = 100;
    }
}

// Contains all events in the miniblock, and the header event.
// Events must be in the same order as in the header.
message Miniblock {
    repeated Envelope events = 1;
    Envelope header = 2;
}

// Contains a snapshot of all state events up to the most recent miniblock
message Snapshot {

    // Snapshot data specific for each stream type.
    oneof content {
        SpacePayload.Snapshot space_content = 101;
        ChannelPayload.Snapshot channel_content = 102;
        UserPayload.Snapshot user_content = 103;
        UserSettingsPayload.Snapshot user_settings_content = 104;
        UserDeviceKeyPayload.Snapshot user_device_key_content = 105;
    }
}

/**
 * Derived event is produces by server when there should be additional event to compliment
 * received event. For example, when user joins a space through event in the space stream, server will produce a derived event
 * in a user stream to indicate that user joined a particual space.
 *
 * EventRef is used to reference the event that caused the derived event to be produced.
 */
message EventRef {
    string stream_id = 1;
    bytes hash = 2;
    bytes signature = 3;
}

/**
 * StreamSettings is a part of inception payload for each stream type.
 */
message StreamSettings {
    // This setting controls block production rate for a given stream.
    // It is used for testing and is used only by nodes running in test mode.
    uint64 miniblock_time_ms = 1;
    // Minimum number of events before we take a snapshot
    int32 min_events_per_snapshot = 2;
}


message Membership {
    MembershipOp op = 1;
    string user_id = 2;
}


message UserPayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // streamId: UserMembership
        map<string, UserMembership> memberships = 2;
    }

    message Inception {
        string stream_id = 1;
        StreamSettings settings = 2;
    }
    
    message UserMembership {
        string stream_id = 1;
        EventRef origin_event = 2;
        string inviter_id = 3;
        MembershipOp op = 4;
    }
    
    message ToDevice {
        ToDeviceOp op = 1;
        EncryptedDeviceData message = 2;
        string device_key = 3;
        string sender_key = 4;
    }
    
    oneof content {
        Inception inception = 1;
        UserMembership user_membership = 2;
        ToDevice to_device = 3;
    }
}


message SpacePayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // streamId: Channel
        map<string, Channel> channels = 2;
        // userId: Membership
        map<string, Membership> memberships = 3;
    }
    
    message Inception {
        string stream_id = 1;
        string name = 2; // todo encrypt "name" HNT-1802
        StreamSettings settings = 3;
    }

    message Channel {
        ChannelOp op = 1;
        string channel_id = 2;
        EventRef origin_event = 3;
        EncryptedData channel_properties = 4;
    }

    oneof content {
        Inception inception = 1;
        Channel channel = 2;
        Membership membership = 3;
    }
}

message EncryptedData {
    /**
    * Ciphertext of the encryption envelope.
    */
    string text = 1;
    /**
    * Encryption algorithm  used to encrypt this event.
    */
    optional string algorithm = 2;
    /**
    * Sender device public key identifying the sender's device.
    */
    optional string sender_key = 3;
    /**
    * Sender's device id.
    */
    optional string device_id = 4;
    /**
    * The ID of the session used to encrypt the message.
    */
    optional string session_id = 5;
}

message EncryptedDeviceData {
    /**
    * Mapping from device identifier to encryption envelope.
    */
    map<string, EncryptedMessageEnvelope> ciphertext = 1;
    /**
    * Encryption algorithm  used to encrypt this event.
    */
    optional string algorithm = 2;
}

message EncryptedMessageEnvelope {
    optional int32 type = 1;
    /**
    * Ciphertext of the encryption envelope.
    */
    string body = 2;
}


message ChannelPayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // userId: Membership
        map<string, Membership> memberships = 2;
    }
    
    message Inception {
        string stream_id = 1;
        string space_id = 3;
        /**
        * channel_name and channel_topic from this payload will be used to 
        * create associated with that channel space event for stream as we agreed
        * that channel names and topics will be delivered using space stream
        */
        EncryptedData channel_properties = 4;
        StreamSettings settings = 5;
    }

    /**
    * Receipt is used to acknowledge that the event depicted by origin_op and hash 
    * was responded to by a device. Used to prevent spurious processing of to-device events
    * by multiple requested users' devices.
    */
    message Receipt {
        ToDeviceOp origin_op = 1;
        bytes origin_hash = 2;
    }

    oneof content {
        Inception inception = 1;
        EncryptedData message = 2;
        Membership membership = 3;
        Receipt receipt = 4;
    }
}

message UserSettingsPayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // channelId: FullyReadMarker
        map<string, FullyReadMarkers> fully_read_markers = 2;
    }

    message Inception {
        string stream_id = 1;
        StreamSettings settings = 2;
    }

    message FullyReadMarkers {
        string channel_stream_id = 1;
        EncryptedData content = 2;
    }

    oneof content {
        Inception inception = 1;
        FullyReadMarkers fully_read_markers = 2;
    }
}

message UserDeviceKeyPayload {
    message Snapshot {
        // inception
        Inception inception = 1;
        // deviceId: UserDeviceKey
        map<string, UserDeviceKey> user_device_keys = 2;
    }

    message Inception {
        string stream_id = 1;
        string user_id = 2;
        StreamSettings settings = 3;
    }

    message UserDeviceKey {
        string user_id = 1;
        optional DeviceKeys device_keys = 2;
        optional FallbackKeys fallback_keys = 3;
        optional RiverKeyOp river_key_op = 4;
    }

    oneof content {
        Inception inception = 1;
        UserDeviceKey user_device_key = 2;
    }
}


enum MembershipOp {
    SO_UNSPECIFIED = 0;
    SO_INVITE = 1;
    SO_JOIN = 2;
    SO_LEAVE = 3;
}

enum ChannelOp {
    CO_UNSPECIFIED = 0;
    CO_CREATED = 1;
    CO_DELETED = 2;
    CO_UPDATED = 4;
}

enum ToDeviceOp {
    TDO_UNSPECIFIED = 0;
    TDO_KEY_REQUEST = 1;
    TDO_KEY_RESPONSE = 2;
}

enum RiverKeyOp {
    RDKO_KEY_REVOKE = 0;
}

/**
* DeviceKeys are used to store public identity keys and signatures for a particular
* user's device. 
* 
* device_id: unique identifier for the device - River hash over RDK public part.
* algorithms: encryption algorithms supported by the device.
* keys: public identity keys (signing keys) for the device with property in format <algorithm>:<device_id>.
*       Keys should be encoded as specified by key algorithm. 
* signatures: map from <algorithm>:<device_id> to signature. 
*/
message DeviceKeys {
    string device_id = 1;
    repeated string algorithms = 2;
    map<string, string> keys = 3;
    map<string, string> signatures = 4;
}

/**
* FallbackKeys are used to store "pre-key" messages for a particular user's device.
*
* algo_key_id: map from <algorithm>:<key_id> to Key.
*/
message FallbackKeys {
    map<string, Key> algo_key_id = 1;
}

/**
* Key is used to store fallback keys and depending on the algorithm signatures
* that are formatted as <algorithm>:<device_id> mapped to <signature>
*
* key: key value
* signatures: map from <algorithm>:<device_id> to signature for given key.
*/
message Key {
    string key = 1;
    map<string, string> signatures = 2;
}

message SyncCookie  {
    string stream_id = 1;
    int64 miniblock_num = 2;
    // TODO: change to prev_miniblock_hash
    bytes miniblock_hash = 3;

    // minipool_instance is a unique identifier of a cookie generator. 
    // minipool_slots are not necessary consistent across instances or even restarts.
    // If minipool_instance is mismatching, then minipool_slot is ignored and stream is synced from the end of the referenced miniblock_num.
    // This is responsibility of the client to ignore duplicate events.
    string minipool_instance = 4;
    int64 minipool_slot = 5;
}

message StreamAndCookie {
    // events in the current minipool
    repeated Envelope events = 1;
    SyncCookie next_sync_cookie = 2;
    SyncCookie original_sync_cookie = 3;  // TODO: rename to start_sync_cookie
    string stream_id = 4;
}

message CreateStreamRequest {
    repeated Envelope events = 1;
}

message CreateStreamResponse {
    // all events in current minipool and cookie allowing to sync from the end of the stream
    StreamAndCookie stream = 1;
    // all blocks since the latest snapshot, miniblocks[0].header is the latest snapshot
    repeated Miniblock miniblocks = 2;
}

message GetStreamRequest {
    string stream_id = 1;
}

message GetStreamResponse {
    // all events in current minipool and cookie allowing to sync from the end of the stream
    StreamAndCookie stream = 1;
    // all blocks since the latest snapshot, miniblocks[0].header is the latest snapshot
    repeated Miniblock miniblocks = 2;
}

message GetMiniblocksRequest {
    string stream_id = 1;
    int64 fromInclusive = 2;
    int64 toExclusive = 3;
}

message GetMiniblocksResponse {
    repeated Miniblock miniblocks = 1;
    // terminus: true if there are no more blocks to fetch because they've been garbage collected, or you've reached block 0
    bool terminus = 2;
}

message AddEventRequest {
    string stream_id = 1;
    Envelope event = 2;
}

message AddEventResponse {}

message SyncStreamsRequest {
    repeated SyncCookie sync_pos = 1;
}

message SyncStreamsResponse {
    repeated StreamAndCookie streams = 1;
}

message InfoRequest {
    string debug = 1;
}

message InfoResponse {
    string graffiti = 1;
}

message LinkWalletRequest {
    string root_key_id = 1;
    string wallet_address = 2;
    string root_key_signature = 3;
    string wallet_signature = 4;
}

message LinkWalletResponse {}

message GetLinkedWalletsRequest {
    string root_key_id = 1;
}

message GetLinkedWalletsResponse {
    repeated string wallet_addresses = 1;
}

service StreamService {
    rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse);
    rpc GetStream(GetStreamRequest) returns (GetStreamResponse);
    rpc GetMiniblocks(GetMiniblocksRequest) returns (GetMiniblocksResponse);
    rpc AddEvent(AddEventRequest) returns (AddEventResponse);
    rpc SyncStreams(SyncStreamsRequest) returns (stream SyncStreamsResponse);
    rpc LinkWallet(LinkWalletRequest) returns (LinkWalletResponse);
    rpc GetLinkedWallets(GetLinkedWalletsRequest) returns (GetLinkedWalletsResponse);
    rpc Info(InfoRequest) returns (InfoResponse);
}

enum Err {
    ERR_UNSPECIFIED = 0;
    DEBUG_ERROR = 1;
    BAD_STREAM_ID = 2;
    BAD_STREAM_CREATION_PARAMS = 3;
    STREAM_ALREADY_EXISTS = 4;
    INTERNAL_ERROR_SWITCH = 5;
    BAD_EVENT_ID = 6;
    BAD_EVENT_SIGNATURE = 7;
    BAD_HASH_FORMAT = 8;
    BAD_PREV_EVENTS = 9;
    NO_EVENT_SPECIFIED = 10;
    BAD_EVENT = 11;
    USER_CANT_POST = 12;
    STREAM_NOT_FOUND = 13;
    STREAM_BAD_HASHES = 14;
    STREAM_EMPTY = 15;
    STREAM_BAD_EVENT = 16;
    BAD_DELEGATE_SIG = 17;
    BAD_PUBLIC_KEY = 18;
    BAD_PAYLOAD = 19;
    BAD_HEX_STRING = 20;
    BAD_EVENT_HASH = 21;
    BAD_ARGS = 22;
    BAD_SYNC_COOKIE = 23;
    INTERNAL_ERROR = 24;
    DUPLICATE_EVENT = 25;
    BAD_BLOCK = 26;
    STREAM_NO_INCEPTION_EVENT = 27;
    BAD_BLOCK_NUMBER = 28;
    BAD_MINIPOOL_SLOT = 29;
    BAD_CREATOR_ADDRESS = 30;
    STALE_DELEGATE = 31;
    BAD_LINK_WALLET_BAD_SIGNATURE = 32;
    BAD_ROOT_KEY_ID = 33;
}
