syntax = "proto3";
package casablanca;
option go_package = "casablanca/node/protocol";

// TODO: fix comments

/**
 * Envelope contains serialized event, and its hash and signature.
 * hash is used as event id. Subsequent events reference this event by hash.
 */
message Envelope {
    /**
     * Hash of event.
     * While hash can be recalculated from the event, having it here explicitely
     * makes it easier to work with event.
     * For the event to be valid, must match hash of event field. 
     */
    bytes hash = 1;

    /**
     * Signature.
     * For the event to be valid, signature must match event.creator_address
     * or be signed by the address from evant.delegate_sig.
     */
    bytes signature = 2;

    bytes event = 3;
}

message StreamEvent {
    /**
     * Address of the creator of the event.
     * For user - address of the user's Towns wallet.
     * For server - address of the server's keypair in staking smart contract.
     *
     * For the event to be valid:
     * If delegate_sig is present, creator_address must match delegate_sig.
     * If delegate_sig is not present, creator_address must match event signature in the Envelope.
     */
    bytes creator_address = 1;

     /**
      * delegate_sig allows event to be signed by device keypair 
      * which is linked to the user's Towns wallet.
      *
      * delegate_sig constains signature of the public key of the device keypair.
      * User's Towns wallet is used to produce this signature.
      * 
      * If present, for the event to be valid:
      * 1. creator_address must match delegate_sig's signer public key
      * 2. delegate_sig should be the signature of Envelope.signature's public key.
      *
      * Server nodes sign node-produced events with their own keypair and do not
      * need to use delegate_sig.
      */
    bytes delegate_sig = 2;
 
    /** Salt ensures that similar messages are not hashed to the same value. genId() from id.ts may be used. */
    /** TODO: move salt to inception event */
    bytes salt = 3;
 
    /** Hashes of the preceding leaf events in the stream. Empty array for the inception event. */
    repeated bytes prev_events = 4;
 
    /** Variable-type payload. */
    Payload payload = 5; 
}

/**
 * Derived event is produces by server when there should be additional event to compliment
 * received event. For example, when user joins a space through event in the space stream, server will produce a derived event
 * in a user stream to indicate that user joined a particual space.
 *
 * EventRef is used to reference the event that caused the derived event to be produced.
 */
message EventRef {
    string stream_id = 1;
    bytes hash = 2;
    bytes signature = 3;
}

message Payload {
    message Inception {
        string stream_id = 1;
        StreamKind stream_kind = 2;
        string space_id = 3;
    }
    
    message UserMembershipOp {
        MembershipOp op = 1;
        string stream_id = 2;
        string inviter_id = 3;
        EventRef origin_event = 4;
    }
    
    message JoinableStream {
        MembershipOp op = 1;
        string user_id = 2;
    }
    
    message Channel {
        ChannelOp op = 1;
        string channel_id = 2;
        EventRef origin_event = 3;
    }

    message UserSetting {
        UserSettingOp op = 1;
        bytes value = 2;
        optional string channel_id = 3;
        optional EventRef origin_event = 4;
    }
    
    message Message {
        string text = 1;
    }
    
    oneof payload {
        Inception inception = 1;
        UserMembershipOp user_membership_op = 2;
        JoinableStream joinable_stream = 3;
        Channel channel = 4;
        Message message = 5;
        UserSetting user_setting = 6;
    }
}

enum StreamKind {
    SK_UNSPECIFIED = 0;
    SK_USER = 1;
    SK_SPACE = 2;
    SK_CHANNEL = 3;
    SK_USER_SETTING = 4;
}


enum MembershipOp {
    SO_UNSPECIFIED = 0;
    SO_INVITE = 1;
    SO_JOIN = 2;
    SO_LEAVE = 3;
}


enum ChannelOp {
    CO_UNSPECIFIED = 0;
    CO_CREATED = 1;
    CO_DELETED = 2;
}

enum UserSettingOp {
    USO_UNSPECIFIED = 0;
    USO_FULLY_READ = 1;
}

message StreamAndCookie {
    repeated Envelope events = 1;
    bytes next_sync_cookie = 2;
    bytes original_sync_cookie = 3;
    string stream_id = 4;
}

message CreateStreamRequest {
    repeated Envelope events = 1;
}

message CreateStreamResponse {
    bytes sync_cookie = 1;
}

message GetStreamRequest {
    string stream_id = 1;
}

message GetStreamResponse {
    StreamAndCookie stream = 1;
}

message AddEventRequest {
    string stream_id = 1;
    Envelope event = 2;
}

message AddEventResponse {}

message SyncPos {
    string stream_id = 1;
    bytes sync_cookie = 2;
}

message SyncStreamsRequest {
    repeated SyncPos sync_pos = 1;
    uint32 timeout_ms = 2;
}

message SyncStreamsResponse {
    repeated StreamAndCookie streams = 1;
}

message InfoRequest {
    string debug = 1;
}

message InfoResponse {
    string graffiti = 1;
}

service StreamService {
    rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse);
    rpc GetStream(GetStreamRequest) returns (GetStreamResponse);
    rpc AddEvent(AddEventRequest) returns (AddEventResponse);
    rpc SyncStreams(SyncStreamsRequest) returns (stream SyncStreamsResponse);
    rpc Info(InfoRequest) returns (InfoResponse);
}

enum Err {
    ERR_UNSPECIFIED = 0;
    DEBUG_ERROR = 1;
    BAD_STREAM_ID = 2;
    BAD_STREAM_CREATION_PARAMS = 3;
    STREAM_ALREADY_EXISTS = 4;
    INTERNAL_ERROR_SWITCH = 5;
    BAD_EVENT_ID = 6;
    BAD_EVENT_SIGNATURE = 7;
    BAD_HASH_FORMAT = 8;
    BAD_PREV_EVENTS = 9;
    NO_EVENT_SPECIFIED = 10;
    BAD_EVENT = 11;
    USER_CANT_POST = 12;
    STREAM_NOT_FOUND = 13;
    STREAM_BAD_HASHES = 14;
    STREAM_EMPTY = 15;
    STREAM_BAD_EVENT = 16;
    BAD_DELEGATE_SIG = 17;
    BAD_PUBLIC_KEY = 18;
    BAD_PAYLOAD = 19;
    BAD_HEX_STRING = 20;
    BAD_EVENT_HASH = 21;
}
