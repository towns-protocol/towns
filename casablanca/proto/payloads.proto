syntax = "proto3";
package casablancapayloads;
option go_package = "casablanca/payloads";


message ChannelMessage {
    message Reaction {
        string ref_event_id = 1;
        string reaction = 2;
    }

    message Edit {
        string ref_event_id = 1;
        Post post = 2;
    }

    message Redaction {
        string ref_event_id = 1;
        optional string reason = 2;
    }

    message Post {
        message Mention {
            string user_id = 1;
            string display_name = 2;
        }
        
        message Content {
            message Text {
                string body = 1;
                repeated Mention mentions = 2;
            }

            message Image {
                message Info {
                    string url = 1;
                    string mimetype = 2;
                    optional int32 size = 3;
                    optional int32 width = 4;
                    optional int32 height = 5;
                }
                string title = 1;
                Info info = 2;
                optional Info thumbnail = 3;
            }

            message GM {
                string type_url = 1;
                optional bytes value = 2;
            }
            
            message BlockTxn {
                string hash = 1;
                string type = 2;
            }
        }
        
        optional string thread_id = 1;
        optional string thread_preview = 2;
        
        oneof content {
            Content.Text text = 101;
            Content.Image image = 102;
            Content.BlockTxn block_txn = 103;
            Content.GM gm = 104;
        }  
    }
    
    oneof payload {
        Post post = 1;
        Reaction reaction = 2;
        Edit edit = 3;
        Redaction redaction = 4;
    }
}

message ChannelProperties {
    string name = 1;
    string topic = 2;
}

// value field of a ToDeviceMessage, which is either
// a) ciphertext encrypted for a specific device (identified by curve25519 key)
// b) a key request
// c) a key response
message ToDeviceMessage {
    message KeyRequest {
        string space_id = 1;
        string channel_id = 2;
        string algorithm = 3;
        string sender_key = 4;
        string session_id = 5;
    }

    message KeyResponse {
        string space_id = 1;
        optional string channel_id = 2;
        repeated MegolmSession sessions = 3;
        KeyResponseKind kind = 4;
    }

    oneof payload {
        KeyRequest request = 1;
        KeyResponse response = 2;
    }

}

/** Exported Megolm session data.
*/
message MegolmSession {
    /** Sender's Curve25519 device key. */
    string sender_key = 1;
    /** Devices which forwarded this session to us (usually empty) */
    repeated string forwarding_curve25519_key_chain = 2;
    /** Space this session is used for */
    string space_id = 4;
    /** Channel this session is used for */
    optional string channel_id = 5;
    /** Unique id for this session */
    string session_id = 6;
    /** Base64-encoded megolm session key data */
    string session_key = 7;
    optional string algorithm = 8;
    optional string untrusted = 9;
}

enum KeyResponseKind {
    KRK_UNDEFINED = 0;
    KRK_KEYS_FOUND = 1;
    KRK_KEYS_NOT_FOUND = 2;
    KRK_CHANNEL_NOT_FOUND = 3;
}