#!/bin/bash
set -euo pipefail
cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")"
cd ..

# Default values
FORK_URL="${FORK_URL:-https://sepolia.base.org}"
FORK_BLOCK_NUMBER="${FORK_BLOCK_NUMBER:-}"
CHAIN_ID="${CHAIN_ID:-84532}"  # Default to Base Sepolia testnet
PORT="${PORT:-8545}"
PONDER_ENV_FILE="packages/subgraph/.env.local"
ENVIRONMENT="${ENVIRONMENT:-gamma}"  # Default environment

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --fork-url)
      FORK_URL="$2"
      shift 2
      ;;
    --fork-block-number)
      FORK_BLOCK_NUMBER="$2"
      shift 2
      ;;
    --chain-id)
      CHAIN_ID="$2"
      shift 2
      ;;
    --port)
      PORT="$2"
      shift 2
      ;;
    --environment)
      ENVIRONMENT="$2"
      shift 2
      ;;
    --help)
      echo "Usage: $0 [options]"
      echo "Options:"
      echo "  --fork-url URL             RPC URL to fork from (default: $FORK_URL)"
      echo "  --fork-block-number NUM    Block number to fork from (default: latest)"
      echo "  --chain-id ID              Chain ID for the forked network (default: $CHAIN_ID)"
      echo "  --port PORT                Port to run Anvil on (default: $PORT)"
      echo "  --environment ENV          Environment to use (default: $ENVIRONMENT)"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Get the block number to use for forking
if [ -z "$FORK_BLOCK_NUMBER" ]; then
  echo "Getting block number from Anvil fork script..."
  # Capture only the block number output
  FORK_BLOCK_NUMBER=$(./scripts/anvil-fork.sh --fork-url "$FORK_URL" --output-block-number | tr -d '\n')

  # Verify we got a valid number
  if ! [[ "$FORK_BLOCK_NUMBER" =~ ^[0-9]+$ ]]; then
    echo "Error: Failed to get a valid block number. Got: '$FORK_BLOCK_NUMBER'"
    exit 1
  fi

  if [ -z "$FORK_BLOCK_NUMBER" ]; then
    echo "Failed to get block number. Exiting."
    exit 1
  fi
fi

echo "Using block number: $FORK_BLOCK_NUMBER"
echo "Using environment: $ENVIRONMENT"

# Create or update the Ponder environment file
mkdir -p "$(dirname "$PONDER_ENV_FILE")"
cat > "$PONDER_ENV_FILE" << EOF
# Generated by setup-subgraph.sh
PONDER_RPC_URL_1=http://localhost:$PORT
PONDER_START_BLOCK=$FORK_BLOCK_NUMBER
PONDER_ENVIRONMENT=$ENVIRONMENT
EOF

echo "Created Ponder environment file at $PONDER_ENV_FILE with:"
cat "$PONDER_ENV_FILE"

# Kill any existing Anvil processes
echo "Killing any existing Anvil processes..."
pkill -f anvil || true

# Start Anvil in the background
echo "Starting Anvil fork in the background..."
./scripts/anvil-fork.sh --fork-url "$FORK_URL" --fork-block-number "$FORK_BLOCK_NUMBER" --chain-id "$CHAIN_ID" --port "$PORT" --silent &
ANVIL_PID=$!

# Function to kill Anvil on script exit
cleanup() {
  echo "Stopping Anvil fork (PID: $ANVIL_PID)..."
  kill $ANVIL_PID 2>/dev/null || true
}

# Register the cleanup function to be called on exit
trap cleanup EXIT

# Wait for Anvil to start
echo "Waiting for Anvil to start..."
for i in {1..30}; do
  if cast block-number --rpc-url "http://localhost:$PORT" &>/dev/null; then
    echo "Anvil is running!"
    break
  fi

  if [ $i -eq 30 ]; then
    echo "Timed out waiting for Anvil to start. Exiting."
    exit 1
  fi

  echo "Waiting for Anvil to start... ($i/30)"
  sleep 1
done

# Generating typings if not exists
if [ ! -f "contracts/typings/index.ts" ]; then
  echo "Generating contract typings..."
  yarn workspace @towns-protocol/contracts typings
fi

# Now update the ponder.config.ts file to use the environment variables
echo "Updating Ponder configuration..."

# Navigate to the subgraph directory and start Ponder
echo "Starting Ponder development server..."
cd packages/subgraph
yarn ponder dev

# Note: The cleanup function will be called when this script exits
# to ensure that the Anvil process is properly terminated
