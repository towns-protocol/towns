{
  "version": "2.0.0",
  "presentation": {
    "echo": false,
    "reveal": "always",
    "focus": false,
    "panel": "dedicated",
    "showReuseMessage": true
  },
  "tasks": [
    {
      "label": "Dependencies",
      "dependsOn": [
        "CheckVersions",
        "FoundryUp",
        "YarnInstall",
        "BuildProtobufs",
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "dependsOrder": "sequence"
    },
    {
      // start local dev:
      //
      // 1. yarn install
      // 2. start blockchains (Docker by default)
      // 3. configure nodes
      // 4. starts all servers and clients
      //
      // it's important to do in this order since the servers
      // and use the artifacts of the contracts in their builds
      "label": "~Start Local Dev~",
      "dependsOn": [
        "Dependencies",
        "Start Anvil Chains",
        "Configure Nodes",
        "Start Services"
      ],
      // Mark as the default build task so cmd/ctrl+shift+b will create them
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "dependsOrder": "sequence",
      "options": {
        "env": {
          "USE_DOCKER_CHAINS": "1"
        }
      }
    },
    {
      // Native Anvil fallback - same as above but without Docker
      "label": "~Start Local Dev (Native Anvil)~",
      "dependsOn": [
        "Dependencies",
        "Start Anvil Chains (Native)",
        "Configure Nodes (Native)",
        "Start Services"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "dependsOrder": "sequence"
    },
    {
      "label": "Start Services",
      "dependsOn": [
        "Start Watches",
        "Run Nodes and Services",
        "Playground",
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Start Watches",
      "dependsOn": [
        "WatchUtils",
        "WatchEncryption",
        "WatchProto",
        "WatchWeb3",
        "WatchSdk",
        "WatchReactSdk",
        "WatchBot",
        "WatchStress",
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Restart Watches",
      "dependsOn": [
        "Kill Watches",
        "DummyTask",
        "Start Watches",
      ],
      "dependsOrder": "sequence",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "FoundryUp",
      "type": "shell",
      "command": "./scripts/foundry-up.sh",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "CheckVersions",
      "type": "shell",
      "command": "./scripts/check-node-version.sh && ./scripts/check-go-version.sh && ./scripts/install-protobuf-deps.sh",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "DummyTask",
      "type": "shell",
      "command": "sleep 1 && echo 'Dummy task... sometimes this is just needed.'",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "YarnInstall",
      "type": "shell",
      "command": "yarn",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "YarnClean & Cleanup",
      "type": "shell",
      "command": "./scripts/yarn-clean.sh",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Start Stress Testing Redis",
      "type": "shell",
      "command": "./packages/stress/scripts/start_redis.sh",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-servers"
      }
    },
    {
      "label": "Run Nodes",
      "type": "shell",
      "command": "sleep 1 && cd ./core && just run-and-tail",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-servers"
      }
    },
    {
      "label": "AppRegistry",
      "type": "shell",
      "command": "sleep 1 && cd ./core && just run-app-registry-and-tail",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-servers"
      }
    },
    {
      "label": "Build Nodes",
      "type": "shell",
      "command": "just build",
      "isBackground": true,
      "problemMatcher": [],
      "options": {
        "cwd": "./core"
      },
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Stop Nodes and Services",
      "type": "shell",
      "command": "echo 'killing local_dev' && kill $(ps -ax | grep 'run_files/local_dev' | awk '{print $1}') && cd ./core && just stop && just stop-app-registry",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Run Nodes and Services",
      "dependsOn": [
        "Run Nodes",
        "AppRegistry",
      ],
      "group": {
        "kind": "build",
      },
      "problemMatcher": [],
    },
    {
      "label": "Restart Nodes and Services",
      "dependsOn": [
        "Stop Nodes and Services",
        "Build Nodes",
        "Run Nodes and Services"
      ],
      "group": {
        "kind": "build",
      },
      "dependsOrder": "sequence",
      "problemMatcher": [],
    },
    {
      "label": "Configure Nodes",
      "type": "shell",
      "command": "just config build",
      "isBackground": true,
      "problemMatcher": [],
      "options": {
        "cwd": "./core",
        "env": {
          "USE_DOCKER_CHAINS": "1"
        }
      },
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Configure Nodes (Native)",
      "type": "shell",
      "command": "just config build",
      "isBackground": true,
      "problemMatcher": [],
      "options": {
        "cwd": "./core"
      },
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Start Anvil Chains",
      "type": "shell",
      "command": "just anvils",
      "isBackground": true,
      "problemMatcher": [],
      "options": {
        "cwd": "./core",
        "env": {
          "USE_DOCKER_CHAINS": "1"
        }
      },
      "presentation": {
        "group": "local-blockchains"
      }
    },
    {
      "label": "Start Anvil Chains (Native)",
      "type": "shell",
      "command": "just anvils",
      "isBackground": true,
      "problemMatcher": [],
      "options": {
        "cwd": "./core"
      },
      "presentation": {
        "group": "local-blockchains"
      }
    },
    {
      "label": "Build Contracts",
      "type": "shell",
      "command": "yarn workspace @towns-protocol/contracts compile",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "BuildContractTypes",
      "type": "shell",
      "command": "yarn workspace @towns-protocol/generated build-types",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "BuildProtobufs",
      "type": "shell",
      "command": "./scripts/build-protobufs.sh",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Playground",
      "type": "shell",
      "command": "cd packages/playground && yarn dev:local",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "apps"
      }
    },
    {
      "label": "WatchSdk",
      "type": "shell",
      "command": "cd packages/sdk && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch"
      }
    },
    {
      "label": "WatchReactSdk",
      "type": "shell",
      "command": "cd packages/react-sdk && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch"
      }
    },
    {
      "label": "WatchBot",
      "type": "shell",
      "command": "cd packages/bot && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch"
      }
    },
    {
      "label": "WatchEncryption",
      "type": "shell",
      "command": "cd packages/encryption && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch"
      }
    },
    {
      "label": "WatchUtils",
      "type": "shell",
      "command": "cd packages/utils && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch"
      }
    },
    {
      "label": "WatchProto",
      "type": "shell",
      "command": "cd packages/proto && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch-proto"
      }
    },
    {
      "label": "WatchStress",
      "type": "shell",
      "command": "cd packages/stress && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch-proto"
      }
    },
    {
      "label": "WatchWeb3",
      "type": "shell",
      "command": "cd packages/web3 && yarn watch",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch-proto"
      }
    },
    {
      "label": "WatchProto_Go",
      "type": "shell",
      "command": "cd packages/proto && yarn watch:go",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-watch-proto"
      }
    },
    {
      "label": "MITM - Nodes",
      "type": "shell",
      "command": "mitmweb -p 7105 --mode reverse:http://localhost:7104/",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "local-mitm"
      }
    },
    {
      "label": "KillAllLocalDev",
      "type": "shell",
      "command": "./scripts/kill-all-local-dev.sh -y",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Kill Watches",
      "type": "shell",
      "command": "./scripts/kill-watches.sh",
      "isBackground": false,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Start Local Blockscout",
      "type": "shell",
      "command": "./scripts/start-local-blockscout.sh",
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared",
      }
    },
    {
      "label": "Restart Local Dev",
      "dependsOn": [
        "KillAllLocalDev",
        "~Start Local Dev~",
      ],
      // Mark as the default build task so cmd/ctrl+shift+b will create them
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "dependsOrder": "sequence"
    },

    {
      "label": "Restart Local Dev (Native Anvil)",
      "dependsOn": [
        "KillAllLocalDev",
        "~Start Local Dev (Native Anvil)~",
      ],
      // Mark as the default build task so cmd/ctrl+shift+b will create them
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "dependsOrder": "sequence"
    },
    {
      "label": "Kill All, Clean and Start Local Dev",
      "dependsOn": [
        "KillAllLocalDev",
        "YarnClean & Cleanup",
        "~Start Local Dev~",
      ],
      // Mark as the default build task so cmd/ctrl+shift+b will create them
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "dependsOrder": "sequence"
    },
    {
      "label": "Test CI Locally",
      "type": "shell",
      "command": "./scripts/run-local-ci.sh",
      "args": ["-j", "Common_CI"],
      "isBackground": false,
      "problemMatcher": [],
      "presentation": {
        "group": "ephemeral",
        "focus": true,
        "panel": "shared"
      }
    }
  ]
}
