// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: apps.proto

package protocolconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protocol "github.com/towns-protocol/towns/core/node/protocol"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AppRegistryServiceName is the fully-qualified name of the AppRegistryService service.
	AppRegistryServiceName = "river.AppRegistryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppRegistryServiceRegisterProcedure is the fully-qualified name of the AppRegistryService's
	// Register RPC.
	AppRegistryServiceRegisterProcedure = "/river.AppRegistryService/Register"
	// AppRegistryServiceRegisterWebhookProcedure is the fully-qualified name of the
	// AppRegistryService's RegisterWebhook RPC.
	AppRegistryServiceRegisterWebhookProcedure = "/river.AppRegistryService/RegisterWebhook"
	// AppRegistryServiceGetStatusProcedure is the fully-qualified name of the AppRegistryService's
	// GetStatus RPC.
	AppRegistryServiceGetStatusProcedure = "/river.AppRegistryService/GetStatus"
	// AppRegistryServiceSetAppSettingsProcedure is the fully-qualified name of the AppRegistryService's
	// SetAppSettings RPC.
	AppRegistryServiceSetAppSettingsProcedure = "/river.AppRegistryService/SetAppSettings"
	// AppRegistryServiceGetAppSettingsProcedure is the fully-qualified name of the AppRegistryService's
	// GetAppSettings RPC.
	AppRegistryServiceGetAppSettingsProcedure = "/river.AppRegistryService/GetAppSettings"
	// AppRegistryServiceSetAppMetadataProcedure is the fully-qualified name of the AppRegistryService's
	// SetAppMetadata RPC.
	AppRegistryServiceSetAppMetadataProcedure = "/river.AppRegistryService/SetAppMetadata"
	// AppRegistryServiceGetAppMetadataProcedure is the fully-qualified name of the AppRegistryService's
	// GetAppMetadata RPC.
	AppRegistryServiceGetAppMetadataProcedure = "/river.AppRegistryService/GetAppMetadata"
	// AppRegistryServiceRotateSecretProcedure is the fully-qualified name of the AppRegistryService's
	// RotateSecret RPC.
	AppRegistryServiceRotateSecretProcedure = "/river.AppRegistryService/RotateSecret"
	// AppRegistryServiceGetSessionProcedure is the fully-qualified name of the AppRegistryService's
	// GetSession RPC.
	AppRegistryServiceGetSessionProcedure = "/river.AppRegistryService/GetSession"
	// AppRegistryServiceValidateBotNameProcedure is the fully-qualified name of the
	// AppRegistryService's ValidateBotName RPC.
	AppRegistryServiceValidateBotNameProcedure = "/river.AppRegistryService/ValidateBotName"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	appRegistryServiceServiceDescriptor               = protocol.File_apps_proto.Services().ByName("AppRegistryService")
	appRegistryServiceRegisterMethodDescriptor        = appRegistryServiceServiceDescriptor.Methods().ByName("Register")
	appRegistryServiceRegisterWebhookMethodDescriptor = appRegistryServiceServiceDescriptor.Methods().ByName("RegisterWebhook")
	appRegistryServiceGetStatusMethodDescriptor       = appRegistryServiceServiceDescriptor.Methods().ByName("GetStatus")
	appRegistryServiceSetAppSettingsMethodDescriptor  = appRegistryServiceServiceDescriptor.Methods().ByName("SetAppSettings")
	appRegistryServiceGetAppSettingsMethodDescriptor  = appRegistryServiceServiceDescriptor.Methods().ByName("GetAppSettings")
	appRegistryServiceSetAppMetadataMethodDescriptor  = appRegistryServiceServiceDescriptor.Methods().ByName("SetAppMetadata")
	appRegistryServiceGetAppMetadataMethodDescriptor  = appRegistryServiceServiceDescriptor.Methods().ByName("GetAppMetadata")
	appRegistryServiceRotateSecretMethodDescriptor    = appRegistryServiceServiceDescriptor.Methods().ByName("RotateSecret")
	appRegistryServiceGetSessionMethodDescriptor      = appRegistryServiceServiceDescriptor.Methods().ByName("GetSession")
	appRegistryServiceValidateBotNameMethodDescriptor = appRegistryServiceServiceDescriptor.Methods().ByName("ValidateBotName")
)

// AppRegistryServiceClient is a client for the river.AppRegistryService service.
type AppRegistryServiceClient interface {
	Register(context.Context, *connect.Request[protocol.RegisterRequest]) (*connect.Response[protocol.RegisterResponse], error)
	// Webhook status / registration.
	RegisterWebhook(context.Context, *connect.Request[protocol.RegisterWebhookRequest]) (*connect.Response[protocol.RegisterWebhookResponse], error)
	GetStatus(context.Context, *connect.Request[protocol.GetStatusRequest]) (*connect.Response[protocol.GetStatusResponse], error)
	// App settings management.
	SetAppSettings(context.Context, *connect.Request[protocol.SetAppSettingsRequest]) (*connect.Response[protocol.SetAppSettingsResponse], error)
	GetAppSettings(context.Context, *connect.Request[protocol.GetAppSettingsRequest]) (*connect.Response[protocol.GetAppSettingsResponse], error)
	// App metadata management.
	SetAppMetadata(context.Context, *connect.Request[protocol.SetAppMetadataRequest]) (*connect.Response[protocol.SetAppMetadataResponse], error)
	GetAppMetadata(context.Context, *connect.Request[protocol.GetAppMetadataRequest]) (*connect.Response[protocol.GetAppMetadataResponse], error)
	// RotateSecret allows the bot owner to rotate the shared secret the app registry
	// service uses to authorize itself to the bot when making webhook calls.
	RotateSecret(context.Context, *connect.Request[protocol.RotateSecretRequest]) (*connect.Response[protocol.RotateSecretResponse], error)
	// GetSession allows the bot owner to query for specific session keys.
	GetSession(context.Context, *connect.Request[protocol.GetSessionRequest]) (*connect.Response[protocol.GetSessionResponse], error)
	// ValidateBotName checks if a bot name is available for use.
	ValidateBotName(context.Context, *connect.Request[protocol.ValidateBotNameRequest]) (*connect.Response[protocol.ValidateBotNameResponse], error)
}

// NewAppRegistryServiceClient constructs a client for the river.AppRegistryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppRegistryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppRegistryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appRegistryServiceClient{
		register: connect.NewClient[protocol.RegisterRequest, protocol.RegisterResponse](
			httpClient,
			baseURL+AppRegistryServiceRegisterProcedure,
			connect.WithSchema(appRegistryServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerWebhook: connect.NewClient[protocol.RegisterWebhookRequest, protocol.RegisterWebhookResponse](
			httpClient,
			baseURL+AppRegistryServiceRegisterWebhookProcedure,
			connect.WithSchema(appRegistryServiceRegisterWebhookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[protocol.GetStatusRequest, protocol.GetStatusResponse](
			httpClient,
			baseURL+AppRegistryServiceGetStatusProcedure,
			connect.WithSchema(appRegistryServiceGetStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setAppSettings: connect.NewClient[protocol.SetAppSettingsRequest, protocol.SetAppSettingsResponse](
			httpClient,
			baseURL+AppRegistryServiceSetAppSettingsProcedure,
			connect.WithSchema(appRegistryServiceSetAppSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAppSettings: connect.NewClient[protocol.GetAppSettingsRequest, protocol.GetAppSettingsResponse](
			httpClient,
			baseURL+AppRegistryServiceGetAppSettingsProcedure,
			connect.WithSchema(appRegistryServiceGetAppSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setAppMetadata: connect.NewClient[protocol.SetAppMetadataRequest, protocol.SetAppMetadataResponse](
			httpClient,
			baseURL+AppRegistryServiceSetAppMetadataProcedure,
			connect.WithSchema(appRegistryServiceSetAppMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAppMetadata: connect.NewClient[protocol.GetAppMetadataRequest, protocol.GetAppMetadataResponse](
			httpClient,
			baseURL+AppRegistryServiceGetAppMetadataProcedure,
			connect.WithSchema(appRegistryServiceGetAppMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rotateSecret: connect.NewClient[protocol.RotateSecretRequest, protocol.RotateSecretResponse](
			httpClient,
			baseURL+AppRegistryServiceRotateSecretProcedure,
			connect.WithSchema(appRegistryServiceRotateSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSession: connect.NewClient[protocol.GetSessionRequest, protocol.GetSessionResponse](
			httpClient,
			baseURL+AppRegistryServiceGetSessionProcedure,
			connect.WithSchema(appRegistryServiceGetSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		validateBotName: connect.NewClient[protocol.ValidateBotNameRequest, protocol.ValidateBotNameResponse](
			httpClient,
			baseURL+AppRegistryServiceValidateBotNameProcedure,
			connect.WithSchema(appRegistryServiceValidateBotNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// appRegistryServiceClient implements AppRegistryServiceClient.
type appRegistryServiceClient struct {
	register        *connect.Client[protocol.RegisterRequest, protocol.RegisterResponse]
	registerWebhook *connect.Client[protocol.RegisterWebhookRequest, protocol.RegisterWebhookResponse]
	getStatus       *connect.Client[protocol.GetStatusRequest, protocol.GetStatusResponse]
	setAppSettings  *connect.Client[protocol.SetAppSettingsRequest, protocol.SetAppSettingsResponse]
	getAppSettings  *connect.Client[protocol.GetAppSettingsRequest, protocol.GetAppSettingsResponse]
	setAppMetadata  *connect.Client[protocol.SetAppMetadataRequest, protocol.SetAppMetadataResponse]
	getAppMetadata  *connect.Client[protocol.GetAppMetadataRequest, protocol.GetAppMetadataResponse]
	rotateSecret    *connect.Client[protocol.RotateSecretRequest, protocol.RotateSecretResponse]
	getSession      *connect.Client[protocol.GetSessionRequest, protocol.GetSessionResponse]
	validateBotName *connect.Client[protocol.ValidateBotNameRequest, protocol.ValidateBotNameResponse]
}

// Register calls river.AppRegistryService.Register.
func (c *appRegistryServiceClient) Register(ctx context.Context, req *connect.Request[protocol.RegisterRequest]) (*connect.Response[protocol.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// RegisterWebhook calls river.AppRegistryService.RegisterWebhook.
func (c *appRegistryServiceClient) RegisterWebhook(ctx context.Context, req *connect.Request[protocol.RegisterWebhookRequest]) (*connect.Response[protocol.RegisterWebhookResponse], error) {
	return c.registerWebhook.CallUnary(ctx, req)
}

// GetStatus calls river.AppRegistryService.GetStatus.
func (c *appRegistryServiceClient) GetStatus(ctx context.Context, req *connect.Request[protocol.GetStatusRequest]) (*connect.Response[protocol.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// SetAppSettings calls river.AppRegistryService.SetAppSettings.
func (c *appRegistryServiceClient) SetAppSettings(ctx context.Context, req *connect.Request[protocol.SetAppSettingsRequest]) (*connect.Response[protocol.SetAppSettingsResponse], error) {
	return c.setAppSettings.CallUnary(ctx, req)
}

// GetAppSettings calls river.AppRegistryService.GetAppSettings.
func (c *appRegistryServiceClient) GetAppSettings(ctx context.Context, req *connect.Request[protocol.GetAppSettingsRequest]) (*connect.Response[protocol.GetAppSettingsResponse], error) {
	return c.getAppSettings.CallUnary(ctx, req)
}

// SetAppMetadata calls river.AppRegistryService.SetAppMetadata.
func (c *appRegistryServiceClient) SetAppMetadata(ctx context.Context, req *connect.Request[protocol.SetAppMetadataRequest]) (*connect.Response[protocol.SetAppMetadataResponse], error) {
	return c.setAppMetadata.CallUnary(ctx, req)
}

// GetAppMetadata calls river.AppRegistryService.GetAppMetadata.
func (c *appRegistryServiceClient) GetAppMetadata(ctx context.Context, req *connect.Request[protocol.GetAppMetadataRequest]) (*connect.Response[protocol.GetAppMetadataResponse], error) {
	return c.getAppMetadata.CallUnary(ctx, req)
}

// RotateSecret calls river.AppRegistryService.RotateSecret.
func (c *appRegistryServiceClient) RotateSecret(ctx context.Context, req *connect.Request[protocol.RotateSecretRequest]) (*connect.Response[protocol.RotateSecretResponse], error) {
	return c.rotateSecret.CallUnary(ctx, req)
}

// GetSession calls river.AppRegistryService.GetSession.
func (c *appRegistryServiceClient) GetSession(ctx context.Context, req *connect.Request[protocol.GetSessionRequest]) (*connect.Response[protocol.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// ValidateBotName calls river.AppRegistryService.ValidateBotName.
func (c *appRegistryServiceClient) ValidateBotName(ctx context.Context, req *connect.Request[protocol.ValidateBotNameRequest]) (*connect.Response[protocol.ValidateBotNameResponse], error) {
	return c.validateBotName.CallUnary(ctx, req)
}

// AppRegistryServiceHandler is an implementation of the river.AppRegistryService service.
type AppRegistryServiceHandler interface {
	Register(context.Context, *connect.Request[protocol.RegisterRequest]) (*connect.Response[protocol.RegisterResponse], error)
	// Webhook status / registration.
	RegisterWebhook(context.Context, *connect.Request[protocol.RegisterWebhookRequest]) (*connect.Response[protocol.RegisterWebhookResponse], error)
	GetStatus(context.Context, *connect.Request[protocol.GetStatusRequest]) (*connect.Response[protocol.GetStatusResponse], error)
	// App settings management.
	SetAppSettings(context.Context, *connect.Request[protocol.SetAppSettingsRequest]) (*connect.Response[protocol.SetAppSettingsResponse], error)
	GetAppSettings(context.Context, *connect.Request[protocol.GetAppSettingsRequest]) (*connect.Response[protocol.GetAppSettingsResponse], error)
	// App metadata management.
	SetAppMetadata(context.Context, *connect.Request[protocol.SetAppMetadataRequest]) (*connect.Response[protocol.SetAppMetadataResponse], error)
	GetAppMetadata(context.Context, *connect.Request[protocol.GetAppMetadataRequest]) (*connect.Response[protocol.GetAppMetadataResponse], error)
	// RotateSecret allows the bot owner to rotate the shared secret the app registry
	// service uses to authorize itself to the bot when making webhook calls.
	RotateSecret(context.Context, *connect.Request[protocol.RotateSecretRequest]) (*connect.Response[protocol.RotateSecretResponse], error)
	// GetSession allows the bot owner to query for specific session keys.
	GetSession(context.Context, *connect.Request[protocol.GetSessionRequest]) (*connect.Response[protocol.GetSessionResponse], error)
	// ValidateBotName checks if a bot name is available for use.
	ValidateBotName(context.Context, *connect.Request[protocol.ValidateBotNameRequest]) (*connect.Response[protocol.ValidateBotNameResponse], error)
}

// NewAppRegistryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppRegistryServiceHandler(svc AppRegistryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appRegistryServiceRegisterHandler := connect.NewUnaryHandler(
		AppRegistryServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(appRegistryServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceRegisterWebhookHandler := connect.NewUnaryHandler(
		AppRegistryServiceRegisterWebhookProcedure,
		svc.RegisterWebhook,
		connect.WithSchema(appRegistryServiceRegisterWebhookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceGetStatusHandler := connect.NewUnaryHandler(
		AppRegistryServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(appRegistryServiceGetStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceSetAppSettingsHandler := connect.NewUnaryHandler(
		AppRegistryServiceSetAppSettingsProcedure,
		svc.SetAppSettings,
		connect.WithSchema(appRegistryServiceSetAppSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceGetAppSettingsHandler := connect.NewUnaryHandler(
		AppRegistryServiceGetAppSettingsProcedure,
		svc.GetAppSettings,
		connect.WithSchema(appRegistryServiceGetAppSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceSetAppMetadataHandler := connect.NewUnaryHandler(
		AppRegistryServiceSetAppMetadataProcedure,
		svc.SetAppMetadata,
		connect.WithSchema(appRegistryServiceSetAppMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceGetAppMetadataHandler := connect.NewUnaryHandler(
		AppRegistryServiceGetAppMetadataProcedure,
		svc.GetAppMetadata,
		connect.WithSchema(appRegistryServiceGetAppMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceRotateSecretHandler := connect.NewUnaryHandler(
		AppRegistryServiceRotateSecretProcedure,
		svc.RotateSecret,
		connect.WithSchema(appRegistryServiceRotateSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceGetSessionHandler := connect.NewUnaryHandler(
		AppRegistryServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(appRegistryServiceGetSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appRegistryServiceValidateBotNameHandler := connect.NewUnaryHandler(
		AppRegistryServiceValidateBotNameProcedure,
		svc.ValidateBotName,
		connect.WithSchema(appRegistryServiceValidateBotNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/river.AppRegistryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppRegistryServiceRegisterProcedure:
			appRegistryServiceRegisterHandler.ServeHTTP(w, r)
		case AppRegistryServiceRegisterWebhookProcedure:
			appRegistryServiceRegisterWebhookHandler.ServeHTTP(w, r)
		case AppRegistryServiceGetStatusProcedure:
			appRegistryServiceGetStatusHandler.ServeHTTP(w, r)
		case AppRegistryServiceSetAppSettingsProcedure:
			appRegistryServiceSetAppSettingsHandler.ServeHTTP(w, r)
		case AppRegistryServiceGetAppSettingsProcedure:
			appRegistryServiceGetAppSettingsHandler.ServeHTTP(w, r)
		case AppRegistryServiceSetAppMetadataProcedure:
			appRegistryServiceSetAppMetadataHandler.ServeHTTP(w, r)
		case AppRegistryServiceGetAppMetadataProcedure:
			appRegistryServiceGetAppMetadataHandler.ServeHTTP(w, r)
		case AppRegistryServiceRotateSecretProcedure:
			appRegistryServiceRotateSecretHandler.ServeHTTP(w, r)
		case AppRegistryServiceGetSessionProcedure:
			appRegistryServiceGetSessionHandler.ServeHTTP(w, r)
		case AppRegistryServiceValidateBotNameProcedure:
			appRegistryServiceValidateBotNameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppRegistryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppRegistryServiceHandler struct{}

func (UnimplementedAppRegistryServiceHandler) Register(context.Context, *connect.Request[protocol.RegisterRequest]) (*connect.Response[protocol.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.Register is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) RegisterWebhook(context.Context, *connect.Request[protocol.RegisterWebhookRequest]) (*connect.Response[protocol.RegisterWebhookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.RegisterWebhook is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) GetStatus(context.Context, *connect.Request[protocol.GetStatusRequest]) (*connect.Response[protocol.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.GetStatus is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) SetAppSettings(context.Context, *connect.Request[protocol.SetAppSettingsRequest]) (*connect.Response[protocol.SetAppSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.SetAppSettings is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) GetAppSettings(context.Context, *connect.Request[protocol.GetAppSettingsRequest]) (*connect.Response[protocol.GetAppSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.GetAppSettings is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) SetAppMetadata(context.Context, *connect.Request[protocol.SetAppMetadataRequest]) (*connect.Response[protocol.SetAppMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.SetAppMetadata is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) GetAppMetadata(context.Context, *connect.Request[protocol.GetAppMetadataRequest]) (*connect.Response[protocol.GetAppMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.GetAppMetadata is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) RotateSecret(context.Context, *connect.Request[protocol.RotateSecretRequest]) (*connect.Response[protocol.RotateSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.RotateSecret is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) GetSession(context.Context, *connect.Request[protocol.GetSessionRequest]) (*connect.Response[protocol.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.GetSession is not implemented"))
}

func (UnimplementedAppRegistryServiceHandler) ValidateBotName(context.Context, *connect.Request[protocol.ValidateBotNameRequest]) (*connect.Response[protocol.ValidateBotNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("river.AppRegistryService.ValidateBotName is not implemented"))
}
