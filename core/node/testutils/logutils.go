package testutils

import (
	"bytes"
	"regexp"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	"github.com/towns-protocol/towns/core/node/logging"
)

// RemoveJsonTimestamp removes the "time" field from a JSON log line generated by zap.
func RemoveJsonTimestamp(logOutput string) string {
	// Remove "time" field from output
	re := regexp.MustCompile(`\"timestamp\":\"[^\"]*\",`)
	return string(re.ReplaceAllString(logOutput, `"timestamp":"[TIMESTAMP]",`))
}

func ZapJsonLogger() (*logging.Log, *bytes.Buffer) {
	buffer := &bytes.Buffer{}

	l := zap.New(
		zapcore.NewCore(
			logging.NewJSONEncoder(logging.DefaultZapEncoderConfig()),
			zapcore.AddSync(buffer),
			zapcore.DebugLevel,
		),
	).Sugar()

	return &logging.Log{
		Default:   l.Named("default"),
		Miniblock: l.Named("miniblock"),
		Rpc:       l.Named("rpc"),
	}, buffer
}

// DiscardLogger creates a logger that discards all output, safe for concurrent use
func DiscardLogger() *logging.Log {
	l := zap.NewNop().Sugar()
	return &logging.Log{
		Default:   l.Named("default"),
		Miniblock: l.Named("miniblock"),
		Rpc:       l.Named("rpc"),
	}
}
