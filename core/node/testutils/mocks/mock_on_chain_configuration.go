// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	crypto "github.com/towns-protocol/towns/core/node/crypto"

	river "github.com/towns-protocol/towns/core/contracts/river"
)

// MockOnChainConfiguration is an autogenerated mock type for the OnChainConfiguration type
type MockOnChainConfiguration struct {
	mock.Mock
}

// ActiveBlock provides a mock function with no fields
func (_m *MockOnChainConfiguration) ActiveBlock() crypto.BlockNumber {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ActiveBlock")
	}

	var r0 crypto.BlockNumber
	if rf, ok := ret.Get(0).(func() crypto.BlockNumber); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(crypto.BlockNumber)
	}

	return r0
}

// All provides a mock function with no fields
func (_m *MockOnChainConfiguration) All() []*crypto.OnChainSettings {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*crypto.OnChainSettings
	if rf, ok := ret.Get(0).(func() []*crypto.OnChainSettings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crypto.OnChainSettings)
		}
	}

	return r0
}

// Get provides a mock function with no fields
func (_m *MockOnChainConfiguration) Get() *crypto.OnChainSettings {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *crypto.OnChainSettings
	if rf, ok := ret.Get(0).(func() *crypto.OnChainSettings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.OnChainSettings)
		}
	}

	return r0
}

// GetOnBlock provides a mock function with given fields: block
func (_m *MockOnChainConfiguration) GetOnBlock(block crypto.BlockNumber) *crypto.OnChainSettings {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for GetOnBlock")
	}

	var r0 *crypto.OnChainSettings
	if rf, ok := ret.Get(0).(func(crypto.BlockNumber) *crypto.OnChainSettings); ok {
		r0 = rf(block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.OnChainSettings)
		}
	}

	return r0
}

// LastAppliedEvent provides a mock function with no fields
func (_m *MockOnChainConfiguration) LastAppliedEvent() *river.RiverConfigV1ConfigurationChanged {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastAppliedEvent")
	}

	var r0 *river.RiverConfigV1ConfigurationChanged
	if rf, ok := ret.Get(0).(func() *river.RiverConfigV1ConfigurationChanged); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*river.RiverConfigV1ConfigurationChanged)
		}
	}

	return r0
}

// NewMockOnChainConfiguration creates a new instance of MockOnChainConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnChainConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnChainConfiguration {
	mock := &MockOnChainConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
