/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "CreateChannel(string,string,address)": EventFragment;
    "CreateRole(string,uint256,string,address)": EventFragment;
    "CreateRoleWithEntitlementData(string,uint256,string,address)": EventFragment;
    "CreateSpace(string,address)": EventFragment;
    "DefaultEntitlementSet(address)": EventFragment;
    "EntitlementModuleAdded(string,address)": EventFragment;
    "EntitlementModuleRemoved(string,address)": EventFragment;
    "ModifyRoleWithEntitlementData(string,uint256,address)": EventFragment;
    "RemoveRole(string,uint256,address)": EventFragment;
    "SetChannelAccess(string,string,address,bool)": EventFragment;
    "SetSpaceAccess(string,address,bool)": EventFragment;
    "SpaceNFTAddressSet(address)": EventFragment;
    "UpdateRole(string,uint256,address)": EventFragment;
    "WhitelistEntitlementModule(string,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateChannel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateRole"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreateRoleWithEntitlementData"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSpace"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultEntitlementSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntitlementModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntitlementModuleRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ModifyRoleWithEntitlementData"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChannelAccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSpaceAccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceNFTAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistEntitlementModule"): EventFragment;
}

export interface CreateChannelEventObject {
  spaceNetworkId: string;
  channelNetworkId: string;
  owner: string;
}
export type CreateChannelEvent = TypedEvent<
  [string, string, string],
  CreateChannelEventObject
>;

export type CreateChannelEventFilter = TypedEventFilter<CreateChannelEvent>;

export interface CreateRoleEventObject {
  spaceId: string;
  roleId: BigNumber;
  roleName: string;
  creator: string;
}
export type CreateRoleEvent = TypedEvent<
  [string, BigNumber, string, string],
  CreateRoleEventObject
>;

export type CreateRoleEventFilter = TypedEventFilter<CreateRoleEvent>;

export interface CreateRoleWithEntitlementDataEventObject {
  spaceId: string;
  roleId: BigNumber;
  roleName: string;
  creator: string;
}
export type CreateRoleWithEntitlementDataEvent = TypedEvent<
  [string, BigNumber, string, string],
  CreateRoleWithEntitlementDataEventObject
>;

export type CreateRoleWithEntitlementDataEventFilter =
  TypedEventFilter<CreateRoleWithEntitlementDataEvent>;

export interface CreateSpaceEventObject {
  spaceNetworkId: string;
  owner: string;
}
export type CreateSpaceEvent = TypedEvent<
  [string, string],
  CreateSpaceEventObject
>;

export type CreateSpaceEventFilter = TypedEventFilter<CreateSpaceEvent>;

export interface DefaultEntitlementSetEventObject {
  entitlementAddress: string;
}
export type DefaultEntitlementSetEvent = TypedEvent<
  [string],
  DefaultEntitlementSetEventObject
>;

export type DefaultEntitlementSetEventFilter =
  TypedEventFilter<DefaultEntitlementSetEvent>;

export interface EntitlementModuleAddedEventObject {
  spaceId: string;
  entitlementAddress: string;
}
export type EntitlementModuleAddedEvent = TypedEvent<
  [string, string],
  EntitlementModuleAddedEventObject
>;

export type EntitlementModuleAddedEventFilter =
  TypedEventFilter<EntitlementModuleAddedEvent>;

export interface EntitlementModuleRemovedEventObject {
  spaceId: string;
  entitlementAddress: string;
}
export type EntitlementModuleRemovedEvent = TypedEvent<
  [string, string],
  EntitlementModuleRemovedEventObject
>;

export type EntitlementModuleRemovedEventFilter =
  TypedEventFilter<EntitlementModuleRemovedEvent>;

export interface ModifyRoleWithEntitlementDataEventObject {
  spaceId: string;
  roleId: BigNumber;
  updater: string;
}
export type ModifyRoleWithEntitlementDataEvent = TypedEvent<
  [string, BigNumber, string],
  ModifyRoleWithEntitlementDataEventObject
>;

export type ModifyRoleWithEntitlementDataEventFilter =
  TypedEventFilter<ModifyRoleWithEntitlementDataEvent>;

export interface RemoveRoleEventObject {
  spaceId: string;
  roleId: BigNumber;
  updater: string;
}
export type RemoveRoleEvent = TypedEvent<
  [string, BigNumber, string],
  RemoveRoleEventObject
>;

export type RemoveRoleEventFilter = TypedEventFilter<RemoveRoleEvent>;

export interface SetChannelAccessEventObject {
  spaceNetworkId: string;
  channelNetworkId: string;
  user: string;
  disabled: boolean;
}
export type SetChannelAccessEvent = TypedEvent<
  [string, string, string, boolean],
  SetChannelAccessEventObject
>;

export type SetChannelAccessEventFilter =
  TypedEventFilter<SetChannelAccessEvent>;

export interface SetSpaceAccessEventObject {
  spaceNetworkId: string;
  user: string;
  disabled: boolean;
}
export type SetSpaceAccessEvent = TypedEvent<
  [string, string, boolean],
  SetSpaceAccessEventObject
>;

export type SetSpaceAccessEventFilter = TypedEventFilter<SetSpaceAccessEvent>;

export interface SpaceNFTAddressSetEventObject {
  spaceNFTAddress: string;
}
export type SpaceNFTAddressSetEvent = TypedEvent<
  [string],
  SpaceNFTAddressSetEventObject
>;

export type SpaceNFTAddressSetEventFilter =
  TypedEventFilter<SpaceNFTAddressSetEvent>;

export interface UpdateRoleEventObject {
  spaceId: string;
  roleId: BigNumber;
  updater: string;
}
export type UpdateRoleEvent = TypedEvent<
  [string, BigNumber, string],
  UpdateRoleEventObject
>;

export type UpdateRoleEventFilter = TypedEventFilter<UpdateRoleEvent>;

export interface WhitelistEntitlementModuleEventObject {
  spaceNetworkId: string;
  entitlementAddress: string;
  whitelist: boolean;
}
export type WhitelistEntitlementModuleEvent = TypedEvent<
  [string, string, boolean],
  WhitelistEntitlementModuleEventObject
>;

export type WhitelistEntitlementModuleEventFilter =
  TypedEventFilter<WhitelistEntitlementModuleEvent>;

export interface Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "CreateChannel(string,string,address)"(
      spaceNetworkId?: PromiseOrValue<string> | null,
      channelNetworkId?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): CreateChannelEventFilter;
    CreateChannel(
      spaceNetworkId?: PromiseOrValue<string> | null,
      channelNetworkId?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): CreateChannelEventFilter;

    "CreateRole(string,uint256,string,address)"(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      roleName?: PromiseOrValue<string> | null,
      creator?: null
    ): CreateRoleEventFilter;
    CreateRole(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      roleName?: PromiseOrValue<string> | null,
      creator?: null
    ): CreateRoleEventFilter;

    "CreateRoleWithEntitlementData(string,uint256,string,address)"(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      roleName?: PromiseOrValue<string> | null,
      creator?: null
    ): CreateRoleWithEntitlementDataEventFilter;
    CreateRoleWithEntitlementData(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      roleName?: PromiseOrValue<string> | null,
      creator?: null
    ): CreateRoleWithEntitlementDataEventFilter;

    "CreateSpace(string,address)"(
      spaceNetworkId?: null,
      owner?: PromiseOrValue<string> | null
    ): CreateSpaceEventFilter;
    CreateSpace(
      spaceNetworkId?: null,
      owner?: PromiseOrValue<string> | null
    ): CreateSpaceEventFilter;

    "DefaultEntitlementSet(address)"(
      entitlementAddress?: PromiseOrValue<string> | null
    ): DefaultEntitlementSetEventFilter;
    DefaultEntitlementSet(
      entitlementAddress?: PromiseOrValue<string> | null
    ): DefaultEntitlementSetEventFilter;

    "EntitlementModuleAdded(string,address)"(
      spaceId?: PromiseOrValue<string> | null,
      entitlementAddress?: PromiseOrValue<string> | null
    ): EntitlementModuleAddedEventFilter;
    EntitlementModuleAdded(
      spaceId?: PromiseOrValue<string> | null,
      entitlementAddress?: PromiseOrValue<string> | null
    ): EntitlementModuleAddedEventFilter;

    "EntitlementModuleRemoved(string,address)"(
      spaceId?: PromiseOrValue<string> | null,
      entitlementAddress?: PromiseOrValue<string> | null
    ): EntitlementModuleRemovedEventFilter;
    EntitlementModuleRemoved(
      spaceId?: PromiseOrValue<string> | null,
      entitlementAddress?: PromiseOrValue<string> | null
    ): EntitlementModuleRemovedEventFilter;

    "ModifyRoleWithEntitlementData(string,uint256,address)"(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      updater?: null
    ): ModifyRoleWithEntitlementDataEventFilter;
    ModifyRoleWithEntitlementData(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      updater?: null
    ): ModifyRoleWithEntitlementDataEventFilter;

    "RemoveRole(string,uint256,address)"(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      updater?: null
    ): RemoveRoleEventFilter;
    RemoveRole(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      updater?: null
    ): RemoveRoleEventFilter;

    "SetChannelAccess(string,string,address,bool)"(
      spaceNetworkId?: PromiseOrValue<string> | null,
      channelNetworkId?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      disabled?: null
    ): SetChannelAccessEventFilter;
    SetChannelAccess(
      spaceNetworkId?: PromiseOrValue<string> | null,
      channelNetworkId?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      disabled?: null
    ): SetChannelAccessEventFilter;

    "SetSpaceAccess(string,address,bool)"(
      spaceNetworkId?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      disabled?: null
    ): SetSpaceAccessEventFilter;
    SetSpaceAccess(
      spaceNetworkId?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      disabled?: null
    ): SetSpaceAccessEventFilter;

    "SpaceNFTAddressSet(address)"(
      spaceNFTAddress?: PromiseOrValue<string> | null
    ): SpaceNFTAddressSetEventFilter;
    SpaceNFTAddressSet(
      spaceNFTAddress?: PromiseOrValue<string> | null
    ): SpaceNFTAddressSetEventFilter;

    "UpdateRole(string,uint256,address)"(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      updater?: null
    ): UpdateRoleEventFilter;
    UpdateRole(
      spaceId?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BigNumberish> | null,
      updater?: null
    ): UpdateRoleEventFilter;

    "WhitelistEntitlementModule(string,address,bool)"(
      spaceNetworkId?: PromiseOrValue<string> | null,
      entitlementAddress?: PromiseOrValue<string> | null,
      whitelist?: null
    ): WhitelistEntitlementModuleEventFilter;
    WhitelistEntitlementModule(
      spaceNetworkId?: PromiseOrValue<string> | null,
      entitlementAddress?: PromiseOrValue<string> | null,
      whitelist?: null
    ): WhitelistEntitlementModuleEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
