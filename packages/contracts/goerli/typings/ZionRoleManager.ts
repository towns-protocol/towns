/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type PermissionStruct = { name: PromiseOrValue<string> };

  export type PermissionStructOutput = [string] & { name: string };

  export type RoleStruct = {
    roleId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type RoleStructOutput = [BigNumber, string] & {
    roleId: BigNumber;
    name: string;
  };
}

export interface ZionRoleManagerInterface extends utils.Interface {
  functions: {
    "addPermissionToRole(uint256,uint256,(string))": FunctionFragment;
    "createOwnerRole(uint256)": FunctionFragment;
    "createRole(uint256,string)": FunctionFragment;
    "getPermissionsBySpaceIdByRoleId(uint256,uint256)": FunctionFragment;
    "getRoleBySpaceIdByRoleId(uint256,uint256)": FunctionFragment;
    "getRolesBySpaceId(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removePermissionFromRole(uint256,uint256,(string))": FunctionFragment;
    "removeRole(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSpaceManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPermissionToRole"
      | "createOwnerRole"
      | "createRole"
      | "getPermissionsBySpaceIdByRoleId"
      | "getRoleBySpaceIdByRoleId"
      | "getRolesBySpaceId"
      | "owner"
      | "removePermissionFromRole"
      | "removeRole"
      | "renounceOwnership"
      | "setSpaceManager"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPermissionToRole",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      DataTypes.PermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOwnerRole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionsBySpaceIdByRoleId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleBySpaceIdByRoleId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesBySpaceId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePermissionFromRole",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      DataTypes.PermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSpaceManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPermissionToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOwnerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionsBySpaceIdByRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleBySpaceIdByRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesBySpaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpaceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZionRoleManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZionRoleManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPermissionToRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOwnerRole(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRole(
      spaceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPermissionsBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.PermissionStructOutput[]]>;

    getRoleBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RoleStructOutput]>;

    getRolesBySpaceId(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RoleStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removePermissionFromRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpaceManager(
      spaceManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPermissionToRole(
    spaceId: PromiseOrValue<BigNumberish>,
    roleId: PromiseOrValue<BigNumberish>,
    permission: DataTypes.PermissionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOwnerRole(
    spaceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRole(
    spaceId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPermissionsBySpaceIdByRoleId(
    spaceId: PromiseOrValue<BigNumberish>,
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.PermissionStructOutput[]>;

  getRoleBySpaceIdByRoleId(
    spaceId: PromiseOrValue<BigNumberish>,
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RoleStructOutput>;

  getRolesBySpaceId(
    spaceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RoleStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  removePermissionFromRole(
    spaceId: PromiseOrValue<BigNumberish>,
    roleId: PromiseOrValue<BigNumberish>,
    permission: DataTypes.PermissionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRole(
    spaceId: PromiseOrValue<BigNumberish>,
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpaceManager(
    spaceManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPermissionToRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createOwnerRole(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRole(
      spaceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionsBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.PermissionStructOutput[]>;

    getRoleBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RoleStructOutput>;

    getRolesBySpaceId(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RoleStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    removePermissionFromRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSpaceManager(
      spaceManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addPermissionToRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOwnerRole(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRole(
      spaceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPermissionsBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesBySpaceId(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removePermissionFromRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpaceManager(
      spaceManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPermissionToRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOwnerRole(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRole(
      spaceId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPermissionsBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleBySpaceIdByRoleId(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolesBySpaceId(
      spaceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePermissionFromRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRole(
      spaceId: PromiseOrValue<BigNumberish>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpaceManager(
      spaceManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
