/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type PermissionStruct = { name: PromiseOrValue<string> };

  export type PermissionStructOutput = [string] & { name: string };

  export type CreateChannelDataStruct = {
    spaceNetworkId: PromiseOrValue<string>;
    channelName: PromiseOrValue<string>;
    channelNetworkId: PromiseOrValue<string>;
    roleIds: PromiseOrValue<BigNumberish>[];
  };

  export type CreateChannelDataStructOutput = [
    string,
    string,
    string,
    BigNumber[]
  ] & {
    spaceNetworkId: string;
    channelName: string;
    channelNetworkId: string;
    roleIds: BigNumber[];
  };

  export type CreateSpaceDataStruct = {
    spaceName: PromiseOrValue<string>;
    spaceNetworkId: PromiseOrValue<string>;
  };

  export type CreateSpaceDataStructOutput = [string, string] & {
    spaceName: string;
    spaceNetworkId: string;
  };

  export type ExternalTokenStruct = {
    contractAddress: PromiseOrValue<string>;
    quantity: PromiseOrValue<BigNumberish>;
    isSingleToken: PromiseOrValue<boolean>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type ExternalTokenStructOutput = [
    string,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    contractAddress: string;
    quantity: BigNumber;
    isSingleToken: boolean;
    tokenId: BigNumber;
  };

  export type ExternalTokenEntitlementStruct = {
    tokens: DataTypes.ExternalTokenStruct[];
  };

  export type ExternalTokenEntitlementStructOutput = [
    DataTypes.ExternalTokenStructOutput[]
  ] & { tokens: DataTypes.ExternalTokenStructOutput[] };

  export type CreateSpaceEntitlementDataStruct = {
    roleName: PromiseOrValue<string>;
    permissions: DataTypes.PermissionStruct[];
    externalTokenEntitlements: DataTypes.ExternalTokenEntitlementStruct[];
    users: PromiseOrValue<string>[];
  };

  export type CreateSpaceEntitlementDataStructOutput = [
    string,
    DataTypes.PermissionStructOutput[],
    DataTypes.ExternalTokenEntitlementStructOutput[],
    string[]
  ] & {
    roleName: string;
    permissions: DataTypes.PermissionStructOutput[];
    externalTokenEntitlements: DataTypes.ExternalTokenEntitlementStructOutput[];
    users: string[];
  };

  export type ChannelInfoStruct = {
    channelId: PromiseOrValue<BigNumberish>;
    networkId: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type ChannelInfoStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    boolean
  ] & {
    channelId: BigNumber;
    networkId: string;
    createdAt: BigNumber;
    name: string;
    creator: string;
    disabled: boolean;
  };

  export type ChannelStruct = {
    channelId: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    networkId: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type ChannelStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean
  ] & {
    channelId: BigNumber;
    createdAt: BigNumber;
    networkId: string;
    name: string;
    creator: string;
    disabled: boolean;
  };

  export type ChannelsStruct = {
    idCounter: PromiseOrValue<BigNumberish>;
    channels: DataTypes.ChannelStruct[];
  };

  export type ChannelsStructOutput = [
    BigNumber,
    DataTypes.ChannelStructOutput[]
  ] & { idCounter: BigNumber; channels: DataTypes.ChannelStructOutput[] };

  export type EntitlementModuleInfoStruct = {
    addr: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    moduleType: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
  };

  export type EntitlementModuleInfoStructOutput = [
    string,
    string,
    string,
    string
  ] & { addr: string; name: string; moduleType: string; description: string };

  export type SpaceInfoStruct = {
    spaceId: PromiseOrValue<BigNumberish>;
    networkId: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type SpaceInfoStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    boolean
  ] & {
    spaceId: BigNumber;
    networkId: string;
    createdAt: BigNumber;
    name: string;
    creator: string;
    owner: string;
    disabled: boolean;
  };
}

export interface ZionSpaceManagerInterface extends utils.Interface {
  functions: {
    "addPermissionToRole(string,uint256,(string))": FunctionFragment;
    "addRoleIdsToChannel(string,string,uint256[])": FunctionFragment;
    "addRoleToEntitlementModule(string,address,uint256,bytes)": FunctionFragment;
    "createChannel((string,string,string,uint256[]))": FunctionFragment;
    "createRole(string,string)": FunctionFragment;
    "createSpace((string,string),(string,(string)[],((address,uint256,bool,uint256)[])[],address[]),(string)[])": FunctionFragment;
    "getChannelIdByNetworkId(string,string)": FunctionFragment;
    "getChannelInfoByChannelId(string,string)": FunctionFragment;
    "getChannelsBySpaceId(string)": FunctionFragment;
    "getEntitlementModulesBySpaceId(string)": FunctionFragment;
    "getEntitlementsInfoBySpaceId(string)": FunctionFragment;
    "getSpaceIdByNetworkId(string)": FunctionFragment;
    "getSpaceInfoBySpaceId(string)": FunctionFragment;
    "getSpaceOwnerBySpaceId(string)": FunctionFragment;
    "getSpaces()": FunctionFragment;
    "isEntitled(string,string,address,(string))": FunctionFragment;
    "isEntitlementModuleWhitelisted(string,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeEntitlement(string,address,uint256,bytes)": FunctionFragment;
    "removePermissionFromRole(string,uint256,(string))": FunctionFragment;
    "removeRole(string,uint256)": FunctionFragment;
    "removeRoleIdsFromChannel(string,string,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setChannelAccess(string,string,bool)": FunctionFragment;
    "setDefaultTokenEntitlementModule(address)": FunctionFragment;
    "setDefaultUserEntitlementModule(address)": FunctionFragment;
    "setSpaceAccess(string,bool)": FunctionFragment;
    "setSpaceNFT(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistEntitlementModule(string,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPermissionToRole"
      | "addRoleIdsToChannel"
      | "addRoleToEntitlementModule"
      | "createChannel"
      | "createRole"
      | "createSpace"
      | "getChannelIdByNetworkId"
      | "getChannelInfoByChannelId"
      | "getChannelsBySpaceId"
      | "getEntitlementModulesBySpaceId"
      | "getEntitlementsInfoBySpaceId"
      | "getSpaceIdByNetworkId"
      | "getSpaceInfoBySpaceId"
      | "getSpaceOwnerBySpaceId"
      | "getSpaces"
      | "isEntitled"
      | "isEntitlementModuleWhitelisted"
      | "owner"
      | "removeEntitlement"
      | "removePermissionFromRole"
      | "removeRole"
      | "removeRoleIdsFromChannel"
      | "renounceOwnership"
      | "setChannelAccess"
      | "setDefaultTokenEntitlementModule"
      | "setDefaultUserEntitlementModule"
      | "setSpaceAccess"
      | "setSpaceNFT"
      | "transferOwnership"
      | "whitelistEntitlementModule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPermissionToRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      DataTypes.PermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleIdsToChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleToEntitlementModule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createChannel",
    values: [DataTypes.CreateChannelDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSpace",
    values: [
      DataTypes.CreateSpaceDataStruct,
      DataTypes.CreateSpaceEntitlementDataStruct,
      DataTypes.PermissionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelIdByNetworkId",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelInfoByChannelId",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelsBySpaceId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlementModulesBySpaceId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlementsInfoBySpaceId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceIdByNetworkId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceInfoBySpaceId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpaceOwnerBySpaceId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getSpaces", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEntitled",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      DataTypes.PermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntitlementModuleWhitelisted",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEntitlement",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionFromRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      DataTypes.PermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoleIdsFromChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelAccess",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultTokenEntitlementModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultUserEntitlementModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpaceAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpaceNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEntitlementModule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPermissionToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleIdsToChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleToEntitlementModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelIdByNetworkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelInfoByChannelId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelsBySpaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlementModulesBySpaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlementsInfoBySpaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceIdByNetworkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceInfoBySpaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceOwnerBySpaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpaces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEntitled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEntitlementModuleWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRoleIdsFromChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChannelAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultTokenEntitlementModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultUserEntitlementModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpaceAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpaceNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEntitlementModule",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZionSpaceManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZionSpaceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPermissionToRole(
      spaceId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoleIdsToChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoleToEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createChannel(
      data: DataTypes.CreateChannelDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRole(
      spaceNetworkId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSpace(
      info: DataTypes.CreateSpaceDataStruct,
      entitlementData: DataTypes.CreateSpaceEntitlementDataStruct,
      everyonePermissions: DataTypes.PermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChannelIdByNetworkId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChannelInfoByChannelId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ChannelInfoStructOutput]>;

    getChannelsBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ChannelsStructOutput]>;

    getEntitlementModulesBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getEntitlementsInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.EntitlementModuleInfoStructOutput[]]>;

    getSpaceIdByNetworkId(
      networkId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSpaceInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.SpaceInfoStructOutput]>;

    getSpaceOwnerBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSpaces(
      overrides?: CallOverrides
    ): Promise<[DataTypes.SpaceInfoStructOutput[]]>;

    isEntitled(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEntitlementModuleWhitelisted(
      spaceId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeEntitlement(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePermissionFromRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRoleIdsFromChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChannelAccess(
      spaceNetworkId: PromiseOrValue<string>,
      channelNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultTokenEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultUserEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpaceAccess(
      spaceNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpaceNFT(
      spaceNFTAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPermissionToRole(
    spaceId: PromiseOrValue<string>,
    roleId: PromiseOrValue<BigNumberish>,
    permission: DataTypes.PermissionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoleIdsToChannel(
    spaceId: PromiseOrValue<string>,
    channelId: PromiseOrValue<string>,
    roleId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoleToEntitlementModule(
    spaceNetworkId: PromiseOrValue<string>,
    entitlementModuleAddress: PromiseOrValue<string>,
    roleId: PromiseOrValue<BigNumberish>,
    entitlementData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createChannel(
    data: DataTypes.CreateChannelDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRole(
    spaceNetworkId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSpace(
    info: DataTypes.CreateSpaceDataStruct,
    entitlementData: DataTypes.CreateSpaceEntitlementDataStruct,
    everyonePermissions: DataTypes.PermissionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChannelIdByNetworkId(
    spaceId: PromiseOrValue<string>,
    channelId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChannelInfoByChannelId(
    spaceId: PromiseOrValue<string>,
    channelId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ChannelInfoStructOutput>;

  getChannelsBySpaceId(
    spaceId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ChannelsStructOutput>;

  getEntitlementModulesBySpaceId(
    spaceId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEntitlementsInfoBySpaceId(
    spaceId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.EntitlementModuleInfoStructOutput[]>;

  getSpaceIdByNetworkId(
    networkId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpaceInfoBySpaceId(
    spaceId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.SpaceInfoStructOutput>;

  getSpaceOwnerBySpaceId(
    spaceId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSpaces(
    overrides?: CallOverrides
  ): Promise<DataTypes.SpaceInfoStructOutput[]>;

  isEntitled(
    spaceId: PromiseOrValue<string>,
    channelId: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    permission: DataTypes.PermissionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEntitlementModuleWhitelisted(
    spaceId: PromiseOrValue<string>,
    entitlementModuleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeEntitlement(
    spaceNetworkId: PromiseOrValue<string>,
    entitlementModuleAddress: PromiseOrValue<string>,
    roleId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePermissionFromRole(
    spaceNetworkId: PromiseOrValue<string>,
    roleId: PromiseOrValue<BigNumberish>,
    permission: DataTypes.PermissionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRole(
    spaceNetworkId: PromiseOrValue<string>,
    roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRoleIdsFromChannel(
    spaceId: PromiseOrValue<string>,
    channelId: PromiseOrValue<string>,
    roleId: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChannelAccess(
    spaceNetworkId: PromiseOrValue<string>,
    channelNetworkId: PromiseOrValue<string>,
    disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultTokenEntitlementModule(
    entitlementModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultUserEntitlementModule(
    entitlementModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpaceAccess(
    spaceNetworkId: PromiseOrValue<string>,
    disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpaceNFT(
    spaceNFTAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistEntitlementModule(
    spaceNetworkId: PromiseOrValue<string>,
    entitlementAddress: PromiseOrValue<string>,
    whitelist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPermissionToRole(
      spaceId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addRoleIdsToChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRoleToEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      entitlementData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createChannel(
      data: DataTypes.CreateChannelDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRole(
      spaceNetworkId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSpace(
      info: DataTypes.CreateSpaceDataStruct,
      entitlementData: DataTypes.CreateSpaceEntitlementDataStruct,
      everyonePermissions: DataTypes.PermissionStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelIdByNetworkId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelInfoByChannelId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ChannelInfoStructOutput>;

    getChannelsBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ChannelsStructOutput>;

    getEntitlementModulesBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEntitlementsInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.EntitlementModuleInfoStructOutput[]>;

    getSpaceIdByNetworkId(
      networkId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.SpaceInfoStructOutput>;

    getSpaceOwnerBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSpaces(
      overrides?: CallOverrides
    ): Promise<DataTypes.SpaceInfoStructOutput[]>;

    isEntitled(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEntitlementModuleWhitelisted(
      spaceId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeEntitlement(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePermissionFromRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRoleIdsFromChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setChannelAccess(
      spaceNetworkId: PromiseOrValue<string>,
      channelNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultTokenEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultUserEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpaceAccess(
      spaceNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpaceNFT(
      spaceNFTAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addPermissionToRole(
      spaceId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoleIdsToChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoleToEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createChannel(
      data: DataTypes.CreateChannelDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRole(
      spaceNetworkId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSpace(
      info: DataTypes.CreateSpaceDataStruct,
      entitlementData: DataTypes.CreateSpaceEntitlementDataStruct,
      everyonePermissions: DataTypes.PermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChannelIdByNetworkId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelInfoByChannelId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelsBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntitlementModulesBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntitlementsInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceIdByNetworkId(
      networkId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaceOwnerBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpaces(overrides?: CallOverrides): Promise<BigNumber>;

    isEntitled(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEntitlementModuleWhitelisted(
      spaceId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeEntitlement(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePermissionFromRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRoleIdsFromChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChannelAccess(
      spaceNetworkId: PromiseOrValue<string>,
      channelNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultTokenEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultUserEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpaceAccess(
      spaceNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpaceNFT(
      spaceNFTAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPermissionToRole(
      spaceId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoleIdsToChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoleToEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createChannel(
      data: DataTypes.CreateChannelDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRole(
      spaceNetworkId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSpace(
      info: DataTypes.CreateSpaceDataStruct,
      entitlementData: DataTypes.CreateSpaceEntitlementDataStruct,
      everyonePermissions: DataTypes.PermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChannelIdByNetworkId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannelInfoByChannelId(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannelsBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntitlementModulesBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntitlementsInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaceIdByNetworkId(
      networkId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaceInfoBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaceOwnerBySpaceId(
      spaceId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEntitled(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      permission: DataTypes.PermissionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEntitlementModuleWhitelisted(
      spaceId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeEntitlement(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementModuleAddress: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePermissionFromRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      permission: DataTypes.PermissionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRole(
      spaceNetworkId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRoleIdsFromChannel(
      spaceId: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleId: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChannelAccess(
      spaceNetworkId: PromiseOrValue<string>,
      channelNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultTokenEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultUserEntitlementModule(
      entitlementModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpaceAccess(
      spaceNetworkId: PromiseOrValue<string>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpaceNFT(
      spaceNFTAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistEntitlementModule(
      spaceNetworkId: PromiseOrValue<string>,
      entitlementAddress: PromiseOrValue<string>,
      whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
