{
  "compiler": {
    "version": "0.8.17+commit.8df45f5f"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "addRoleIdToChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "description",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getEntitlementDataByRoleId",
        "outputs": [
          {
            "internalType": "bytes[]",
            "name": "",
            "type": "bytes[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getRoleIdsByChannelId",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          }
        ],
        "name": "getUserRoles",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Role[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_tokenAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "permission",
            "type": "bytes32"
          }
        ],
        "name": "isEntitled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "moduleType",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "entitlementData",
            "type": "bytes"
          }
        ],
        "name": "removeEntitlement",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRoleIdFromChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "entitlementData",
            "type": "bytes"
          }
        ],
        "name": "setEntitlement",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_space",
            "type": "address"
          }
        ],
        "name": "setSpace",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addRoleIdToChannel(string,uint256)": {
          "params": {
            "channelId": "id of the channel to add the role to",
            "roleId": "id of the role to add"
          }
        },
        "getEntitlementDataByRoleId(uint256)": {
          "params": {
            "roleId": "the roleId to fetch the entitlement data for"
          },
          "returns": {
            "_0": "entitlementData array for the role"
          }
        },
        "getRoleIdsByChannelId(string)": {
          "params": {
            "channelId": "the channel to fetch the roleIds for"
          },
          "returns": {
            "_0": "roleIds array of all the roleIds for the channel"
          }
        },
        "getUserRoles(address)": {
          "params": {
            "user": "the user to fetch the roles for"
          },
          "returns": {
            "_0": "roles array of all the roles for the user"
          }
        },
        "isEntitled(string,address,bytes32)": {
          "params": {
            "channelId": "id of the channel to check, if empty string, checks space",
            "permission": "the permission to check",
            "user": "address of the user to check"
          },
          "returns": {
            "_0": "whether the user is entitled to the permission"
          }
        },
        "removeEntitlement(uint256,bytes)": {
          "params": {
            "entitlementData": "abi encoded array of the data associated with that entitlement",
            "roleId": "id of the role to remove"
          },
          "returns": {
            "_0": "entitlementId the id that was removed"
          }
        },
        "removeRoleIdFromChannel(string,uint256)": {
          "params": {
            "channelId": "id of the channel to remove the role from",
            "roleId": "id of the role to remove"
          }
        },
        "setEntitlement(uint256,bytes)": {
          "params": {
            "entitlementData": "abi encoded array of data necessary to set the entitlement",
            "roleId": "id of the role to gate"
          },
          "returns": {
            "_0": "entitlementId the id that was set"
          }
        },
        "setSpace(address)": {
          "params": {
            "_space": "address of the space"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addRoleIdToChannel(string,uint256)": {
          "notice": "adds a role to a channel"
        },
        "description()": {
          "notice": "The description of the entitlement module"
        },
        "getEntitlementDataByRoleId(uint256)": {
          "notice": "fetches the entitlement data for a roleId"
        },
        "getRoleIdsByChannelId(string)": {
          "notice": "fetches the roleIds for a given channel"
        },
        "getUserRoles(address)": {
          "notice": "fetches the roles for a given user in the space"
        },
        "isEntitled(string,address,bytes32)": {
          "notice": "checks whether a user is has a given permission for a channel or a space"
        },
        "moduleType()": {
          "notice": "The type of the entitlement module"
        },
        "name()": {
          "notice": "The name of the entitlement module"
        },
        "removeEntitlement(uint256,bytes)": {
          "notice": "removes an entitlement"
        },
        "removeRoleIdFromChannel(string,uint256)": {
          "notice": "removes a role from a channel"
        },
        "setEntitlement(uint256,bytes)": {
          "notice": "sets a new entitlement"
        },
        "setSpace(address)": {
          "notice": "sets the address for the space that controls this entitlement"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/interfaces/IEntitlement.sol": "IEntitlement"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@opengsn/=node_modules/@opengsn/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":contracts/=contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":solmate/=lib/solmate/src/"
    ]
  },
  "sources": {
    "contracts/src/interfaces/IEntitlement.sol": {
      "keccak256": "0xfcbba0cf78c5cefba11d2582ff19d83bbc47ebb6d6798f0be8631b2366040d95",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://168de1370319df9b5f98683793a5fb13f7cf1690a190771cd3e46e3e6b2164c4",
        "dweb:/ipfs/QmUotoQLNjPJCLxiLFpGRt1bppaNMPQg3rF6QuJhFdhaDe"
      ]
    },
    "contracts/src/libraries/DataTypes.sol": {
      "keccak256": "0x104f117867fff56e6dbb76bfb32a256d440ce9ed7cb471c14d128168aef3077c",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://0066af83357bf22785d319c2c5a3b800230a3802eebf6b0046238da41a9b8977",
        "dweb:/ipfs/QmZLF5ojD13isvBueA2B7c4yik92Ygce5EBG6jPmHQVCXA"
      ]
    }
  },
  "version": 1
}