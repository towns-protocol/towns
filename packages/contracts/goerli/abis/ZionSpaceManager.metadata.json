{
  "compiler": {
    "version": "0.8.16+commit.07a7930e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_permissionRegistry",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_roleManager",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "ChannelDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DefaultEntitlementModuleNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DefaultPermissionsManagerNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementModuleNotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementNotWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidParameters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceNFTNotSet",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "addPermissionToRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelNetworkId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "entitlementData",
            "type": "bytes"
          }
        ],
        "name": "addRoleToEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceNetworkId",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelNetworkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateChannelData",
            "name": "data",
            "type": "tuple"
          }
        ],
        "name": "createChannel",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "channelId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "name": "createRole",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceNetworkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "roleName",
                "type": "string"
              },
              {
                "components": [
                  {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                  }
                ],
                "internalType": "struct DataTypes.Permission[]",
                "name": "permissions",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "string",
                    "name": "tag",
                    "type": "string"
                  },
                  {
                    "components": [
                      {
                        "internalType": "address",
                        "name": "contractAddress",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "quantity",
                        "type": "uint256"
                      },
                      {
                        "internalType": "bool",
                        "name": "isSingleToken",
                        "type": "bool"
                      },
                      {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                      }
                    ],
                    "internalType": "struct DataTypes.ExternalToken[]",
                    "name": "tokens",
                    "type": "tuple[]"
                  }
                ],
                "internalType": "struct DataTypes.ExternalTokenEntitlement[]",
                "name": "externalTokenEntitlements",
                "type": "tuple[]"
              },
              {
                "internalType": "address[]",
                "name": "users",
                "type": "address[]"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceEntitlementData",
            "name": "entitlementData",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission[]",
            "name": "everyonePermissions",
            "type": "tuple[]"
          }
        ],
        "name": "createSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getChannelIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getChannelInfoByChannelId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "channelId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.ChannelInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getChannelsBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "idCounter",
                "type": "uint256"
              },
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "channelId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "createdAt",
                    "type": "uint256"
                  },
                  {
                    "internalType": "string",
                    "name": "networkId",
                    "type": "string"
                  },
                  {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "internalType": "address",
                    "name": "creator",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "disabled",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataTypes.Channel[]",
                "name": "channels",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct DataTypes.Channels",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementModulesBySpaceId",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementsInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "description",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.EntitlementModuleInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "permissionType",
            "type": "bytes32"
          }
        ],
        "name": "getPermissionFromMap",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "networkId",
            "type": "string"
          }
        ],
        "name": "getSpaceIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceOwnerBySpaceId",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSpaces",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "isEntitled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          }
        ],
        "name": "isEntitlementModuleWhitelisted",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelNetworkId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "roleIds",
            "type": "uint256[]"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "removeEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "removePermissionFromRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelNetworkId",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "disabled",
            "type": "bool"
          }
        ],
        "name": "setChannelAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlementModule",
            "type": "address"
          }
        ],
        "name": "setDefaultTokenEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlementModule",
            "type": "address"
          }
        ],
        "name": "setDefaultUserEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "disabled",
            "type": "bool"
          }
        ],
        "name": "setSpaceAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spaceNFTAddress",
            "type": "address"
          }
        ],
        "name": "setSpaceNFT",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementAddress",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "whitelist",
            "type": "bool"
          }
        ],
        "name": "whitelistEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "HNT Labs",
      "kind": "dev",
      "methods": {
        "createSpace((string,string),(string,(string)[],(string,(address,uint256,bool,uint256)[])[],address[]),(string)[])": {
          "params": {
            "entitlementData": "Data to create additional role gated by tokens or specific users",
            "everyonePermissions": "The permissions to grant to the Everyone role",
            "info": "The metadata for the space, name etc"
          }
        },
        "getEntitlementModulesBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "_0": "an array of entitlements"
          }
        },
        "getSpaceInfoBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "_0": "SpaceInfo a struct representing the space info"
          }
        },
        "getSpaceOwnerBySpaceId(string)": {
          "params": {
            "spaceId": "The space id"
          },
          "returns": {
            "_0": "The address of the owner of the space"
          }
        },
        "getSpaces()": {
          "returns": {
            "_0": "SpaceInfo[] an array containing the space info"
          }
        },
        "isEntitled(string,string,address,(string))": {
          "params": {
            "channelId": "The id of the channel",
            "permission": "The type of permission to check",
            "spaceId": "The id of the space",
            "user": "The address of the user"
          },
          "returns": {
            "_0": "bool representing if the user has access or not"
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "setDefaultTokenEntitlementModule(address)": {
          "params": {
            "entitlementModuleAddress": "The address of the entitlement module"
          }
        },
        "setDefaultUserEntitlementModule(address)": {
          "params": {
            "entitlementModuleAddress": "The address of the entitlement module"
          }
        },
        "setSpaceNFT(address)": {
          "params": {
            "spaceNFTAddress": "The address of the zion space nft"
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "ZionSpaceManager",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addPermissionToRole(string,uint256,(string))": {
          "notice": "Adds a permission to a role"
        },
        "addRoleToEntitlementModule(string,string,address,uint256,bytes)": {
          "notice": "add an entitlement to an entitlement module"
        },
        "createChannel((string,string,string))": {
          "notice": "Create a channel within a space"
        },
        "createRole(string,string)": {
          "notice": "Create a role on a new space Id"
        },
        "createSpace((string,string),(string,(string)[],(string,(address,uint256,bool,uint256)[])[],address[]),(string)[])": {
          "notice": "Create a new space"
        },
        "getChannelIdByNetworkId(string,string)": {
          "notice": "Returns the channel id by network id"
        },
        "getChannelInfoByChannelId(string,string)": {
          "notice": "Get the channel info by channel id"
        },
        "getChannelsBySpaceId(string)": {
          "notice": "Returns an array of channels by space id"
        },
        "getEntitlementModulesBySpaceId(string)": {
          "notice": "Returns entitlements for a space"
        },
        "getEntitlementsInfoBySpaceId(string)": {
          "notice": "Returns the entitlement info for a space"
        },
        "getPermissionFromMap(bytes32)": {
          "notice": "Returns the permission from the registry"
        },
        "getSpaceIdByNetworkId(string)": {
          "notice": "Returns the space id by network id"
        },
        "getSpaceInfoBySpaceId(string)": {
          "notice": "Get the space information by id."
        },
        "getSpaceOwnerBySpaceId(string)": {
          "notice": "Returns the owner of the space by space id"
        },
        "getSpaces()": {
          "notice": "Returns an array of multiple space information objects"
        },
        "isEntitled(string,string,address,(string))": {
          "notice": "Checks if a user has access to space or channel based on the entitlements it holds"
        },
        "isEntitlementModuleWhitelisted(string,address)": {
          "notice": "Returns if an entitlement module is whitelisted for a space"
        },
        "removeEntitlement(string,string,address,uint256[],bytes)": {
          "notice": "Removes an entitlement from an entitlement module"
        },
        "removePermissionFromRole(string,uint256,(string))": {
          "notice": "Removes a permission from a role"
        },
        "removeRole(string,uint256)": {
          "notice": "Removes a role from a space, along with the permissions"
        },
        "setDefaultTokenEntitlementModule(address)": {
          "notice": "Sets the default token entitlement for a newly created space"
        },
        "setDefaultUserEntitlementModule(address)": {
          "notice": "Sets the default entitlement for a newly created space"
        },
        "setSpaceAccess(string,bool)": {
          "notice": "********************************* *****EXTERNAL FUNCTIONS********** *********************************"
        },
        "setSpaceNFT(address)": {
          "notice": "Sets the address for the space nft"
        }
      },
      "notice": "This contract manages the spaces and entitlements in the Zion ecosystem.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/zion-governance/src/spaces/ZionSpaceManager.sol": "ZionSpaceManager"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "remappings": [
      ":@harmony/=node_modules/@harmony/",
      ":@opengsn/=node_modules/@opengsn/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":ds-test/=lib/solmate/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":solidity-json-writer/=node_modules/solidity-json-writer/",
      ":solmate/=lib/solmate/src/"
    ]
  },
  "sources": {
    "contracts/zion-governance/src/spaces/ZionSpaceManager.sol": {
      "keccak256": "0xf6abb7805b4fae06e5cbcc56618cf415ea86ca5b5cdf5a2c6f96a8a0b3b79319",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://44862815de861c02a4d53a5a017f81c21e3217ec69e5a8fb584ad72b2b872473",
        "dweb:/ipfs/QmY6kRDxuF8QKCERBj7qQPapqdHYSLzu9x5euVKxPvqTGz"
      ]
    },
    "contracts/zion-governance/src/spaces/interfaces/IEntitlementModule.sol": {
      "keccak256": "0x8d10e6a7de93d6417ceed10f772d8b8f18c3fa565561573e5bacece6d32d138a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9c38797d7875e2a2201501f51d6a0976225d1004b043a34af1e21af50d9fd8f0",
        "dweb:/ipfs/QmbMhZ9ASvJoZezwt2ykGdmcNX54VspbJDusmSNGgDTkop"
      ]
    },
    "contracts/zion-governance/src/spaces/interfaces/IPermissionRegistry.sol": {
      "keccak256": "0x45b83cec5d9b71bc5055c3958fc9cdaf622aca4f0bba6e66ab590603da933a17",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b0d3bd9dca5d087fd01bcb3ae62d4b77d29fe6288a6e9b7a2e36e010b19445ac",
        "dweb:/ipfs/QmSQAcizX6ETKjsDje7vf1AaVoVN1K5WKnVN7DVzfY5jf1"
      ]
    },
    "contracts/zion-governance/src/spaces/interfaces/IRoleManager.sol": {
      "keccak256": "0x3e2100c84c2c6e974945d25ea72403676740440ab8b062a64dde2cdaba5ef174",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f01d5a80b43ca6efe29a4ce5b376de4c0ee62549909763381c5254a12d22bd44",
        "dweb:/ipfs/QmT5CMu1eGtnoBapH7uLHXe9CUWrXZUMrYhjKFfQ95VfGa"
      ]
    },
    "contracts/zion-governance/src/spaces/interfaces/ISpace.sol": {
      "keccak256": "0xab4d7dbd54d76f47d47081bbae155e541dbcc37b84a138bb107b75a22216e802",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1963ae4b50e8fae99bbac7af0ba8a4fabeb8bd03308584aa13abcb0ef182ffe5",
        "dweb:/ipfs/QmadohGm8bMK3AmUarR3x1jPnBTUJ6ym9CnDdd9ojF9p7F"
      ]
    },
    "contracts/zion-governance/src/spaces/interfaces/ISpaceManager.sol": {
      "keccak256": "0xeaa3ffc87a0975e293fecd4076d80da3cc8ad4fc9868a915d58dbe49b953ca0f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ba757d07a168ef689cb8e6f5ff5fab32c87627f2789debb2d2756363a7ca9bd3",
        "dweb:/ipfs/QmZphRoii778dNwJLrXzJHAgh6HvchsoQddN4sfZA8c6E2"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/Constants.sol": {
      "keccak256": "0xd4f2b16156d8d9f9e0cdcd4ad0835b94a67b49beabe22967eda7c069a7268407",
      "license": "MIT",
      "urls": [
        "bzz-raw://077701214ca4757cac2887f47c347ec75a9f3b4026785df11b95a0bc8b1e2ecc",
        "dweb:/ipfs/Qmd8uKoJU8EAhUhYc1MpDHBUaHHtxGGBr9V9ahVp4cUxPv"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/CreationLogic.sol": {
      "keccak256": "0xfd2b80110ac82271ac1e935a8724a25b05fee57aa9447d1d49aed7d1ede0ef38",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://3373eb6a1518eab7e6776dfe0aa1429e9809acf0e8519bc448c23995c9ce1aea",
        "dweb:/ipfs/QmZEC9k5vsS1NDQqzJQ9uRumsz1Ns8jgwUKSwR2hQGRh4m"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/DataTypes.sol": {
      "keccak256": "0xd2c71f100774d938958bec0b455760cdee20cce252997c706d04baa2ef9ddfdb",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://0eb7b6af0bd25a29ed994c6796b068070781121da6a628cf40cff2fdad3c56b2",
        "dweb:/ipfs/Qmbxcyenu7BTuycpt8uTDHY8Abv67g96jWDFYnbxk5UGwQ"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/Errors.sol": {
      "keccak256": "0xc226f9ada2cce56506bccb3c9d8a77e7412b4af1fac6d34c01ae0b1cf2b621cd",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8e701cabfe53909d58cedc3639cd1fd9848519975ab7c325f8b89eaaa7edb4d0",
        "dweb:/ipfs/Qme6MRCnnE2qFDySU7GekEJP3jFoXg2cRy5YMvy4xQK7kX"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/Events.sol": {
      "keccak256": "0xf2672cea93eae66554e9ee207271c27205099d4b2f98d7485693780ec4f628e3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c066b1040ad26e2ff5e5d66e5e7953f706104d449038a79548ec80bfb4d5571e",
        "dweb:/ipfs/QmTiFb674cbZboVEVMUaPStDmuVyEHGFp8wLR9VvmztqrG"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/PermissionTypes.sol": {
      "keccak256": "0xf2b4fa33252ee1f20f93ef3a36c76256c5194e46a217b7630160ca95ca6d569c",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://781f4af73155e4642927a0077660ae6e7334b801321d276d681fb671ec7a8d86",
        "dweb:/ipfs/QmR2Jsvy7KFGqttabBMAiS9SBQN52zh9CiQVTX2XxsJU6A"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/Utils.sol": {
      "keccak256": "0x4b9a6788c9dd8c2a367b6922d931825180e937f1ce8f9762dc47e4d82df620d0",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4d4f486b4983f479f41949b84d4448adcfbb22ca173657ae4bdf61bdf634821e",
        "dweb:/ipfs/QmSUuYCBNQHwQSPGWncZvUdAvvvApdEVQPG3YTD6NcDetc"
      ]
    },
    "contracts/zion-governance/src/spaces/storage/ZionSpaceManagerStorage.sol": {
      "keccak256": "0xd776a38811d83201224b71844fdde810519c2ae85d03e86d703b6074ce78e622",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://51a9210bff60d223544ec266273490bb329a3db16a8c22e60b6ff6cb11858d6b",
        "dweb:/ipfs/QmbinA6B9vWszjdECwyY7pT8owJ4h3GSgnhZeJG1vj8Gnn"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
      "keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
      "license": "MIT",
      "urls": [
        "bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
        "dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}