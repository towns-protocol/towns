{
  "compiler": {
    "version": "0.8.16+commit.07a7930e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "defaultPermissionsManagerAddress_",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "DefaultEntitlementModuleNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DefaultPermissionsManagerNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementModuleNotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementNotWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotSpaceOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceAlreadyRegistered",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "addPermissionToRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "entitlementData",
            "type": "bytes"
          }
        ],
        "name": "addRoleToEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "channelName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceId",
                "type": "string"
              },
              {
                "components": [
                  {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "internalType": "string",
                    "name": "metadata",
                    "type": "string"
                  },
                  {
                    "components": [
                      {
                        "internalType": "string",
                        "name": "name",
                        "type": "string"
                      }
                    ],
                    "internalType": "struct DataTypes.Permission[]",
                    "name": "permissions",
                    "type": "tuple[]"
                  }
                ],
                "internalType": "struct DataTypes.CreateRoleData[]",
                "name": "roles",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct DataTypes.CreateChannelData",
            "name": "data",
            "type": "tuple"
          }
        ],
        "name": "createChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "name": "createRole",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          }
        ],
        "name": "createSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "entitlementModuleAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "tokenAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "quantity",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "description",
                "type": "string"
              },
              {
                "internalType": "string[]",
                "name": "permissions",
                "type": "string[]"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceTokenEntitlementData",
            "name": "entitlement",
            "type": "tuple"
          }
        ],
        "name": "createSpaceWithTokenEntitlement",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getChannelIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementModulesBySpaceId",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "entitlementModules",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementsInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "entitlementAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "entitlementName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "entitlementDescription",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.EntitlementModuleInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "permissionType",
            "type": "bytes32"
          }
        ],
        "name": "getPermissionFromMap",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getPermissionsBySpaceIdByRoleId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getRoleBySpaceIdByRoleId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "isTransitive",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.Role",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getRolesBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "isTransitive",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.Role[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "networkId",
            "type": "string"
          }
        ],
        "name": "getSpaceIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceOwnerBySpaceId",
        "outputs": [
          {
            "internalType": "address",
            "name": "ownerAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSpaces",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "isEntitled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          }
        ],
        "name": "isEntitlementModuleWhitelisted",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "roleIds",
            "type": "uint256[]"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "removeEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlementModule",
            "type": "address"
          }
        ],
        "name": "setDefaultEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "permissionsManager",
            "type": "address"
          }
        ],
        "name": "setDefaultPermissionsManager",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementAddress",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "whitelist",
            "type": "bool"
          }
        ],
        "name": "whitelistEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "HNT Labs",
      "kind": "dev",
      "methods": {
        "createSpace((string,string))": {
          "params": {
            "info": "The data to create the space."
          }
        },
        "getEntitlementModulesBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "entitlementModules": "an array of entitlements"
          }
        },
        "getSpaceInfoBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "_0": "SpaceInfo a struct representing the space info"
          }
        },
        "getSpaceOwnerBySpaceId(string)": {
          "params": {
            "spaceId": "The space id"
          },
          "returns": {
            "ownerAddress": "The address of the owner of the space"
          }
        },
        "getSpaces()": {
          "returns": {
            "_0": "SpaceInfo[] an array containing the space info"
          }
        },
        "isEntitled(string,string,address,(string))": {
          "params": {
            "channelId": "The id of the channel",
            "permission": "The type of permission to check",
            "spaceId": "The id of the space",
            "user": "The address of the user"
          },
          "returns": {
            "_0": "bool representing if the user has access or not"
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "setDefaultEntitlementModule(address)": {
          "params": {
            "entitlementModuleAddress": "The address of the entitlement module"
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "ZionSpaceManager",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addRoleToEntitlementModule(string,string,address,uint256,bytes)": {
          "notice": "add an entitlement to an entitlement module"
        },
        "createSpace((string,string))": {
          "notice": "Create a new space."
        },
        "createSpaceWithTokenEntitlement((string,string),(address,address,uint256,string,string[]))": {
          "notice": "Create a new space with a token entitlement."
        },
        "getEntitlementModulesBySpaceId(string)": {
          "notice": "Returns entitlements for a space"
        },
        "getEntitlementsInfoBySpaceId(string)": {
          "notice": "Returns the entitlement info for a space"
        },
        "getSpaceInfoBySpaceId(string)": {
          "notice": "Get the space information by id."
        },
        "getSpaceOwnerBySpaceId(string)": {
          "notice": "Returns the owner of the space by space id"
        },
        "getSpaces()": {
          "notice": "Returns an array of multiple space information objects"
        },
        "isEntitled(string,string,address,(string))": {
          "notice": "Checks if a user has access to space or channel based on the entitlements it holds"
        },
        "isEntitlementModuleWhitelisted(string,address)": {
          "notice": "returns if an entitlement module is whitelisted for a space"
        },
        "removeEntitlement(string,string,address,uint256[],bytes)": {
          "notice": "Removes an entitlement from an entitlement module"
        },
        "setDefaultEntitlementModule(address)": {
          "notice": "Sets the default entitlement for a newly created space"
        }
      },
      "notice": "This contract manages the spaces and entitlements in the Zion ecosystem.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/zion-governance/contracts/spaces/ZionSpaceManager.sol": "ZionSpaceManager"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@harmony/=node_modules/@harmony/",
      ":@opengsn/=node_modules/@opengsn/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":ds-test/=lib/solmate/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":solidity-json-writer/=node_modules/solidity-json-writer/",
      ":solmate/=lib/solmate/src/"
    ]
  },
  "sources": {
    "contracts/zion-governance/contracts/spaces/ZionPermissionsRegistry.sol": {
      "keccak256": "0x9a561b7c586b260a518681a8635b6946983fd036db88bc51ee27c16a93b1b2a7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://971735d8e5f08e5d082acd63a70c225c0c5c3c0e302ab15e037ea74436f1a61d",
        "dweb:/ipfs/QmZoEeoabYgRvvedosXt5uwRFweKeKJka7dDqt3apyh2eM"
      ]
    },
    "contracts/zion-governance/contracts/spaces/ZionSpaceManager.sol": {
      "keccak256": "0xa88d7f2dd8e9dff94aa47e5024e259185cab2b26606a0f8a07c07ae08e4870b1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://523d38d0f9ba0a36ce4fe010016da38c45f546f9a20e56591514cd5cb6638a20",
        "dweb:/ipfs/QmYGBv5CrngidKsZo5Mj7Juo6FMkdkepQdLzUmmyWjVbFv"
      ]
    },
    "contracts/zion-governance/contracts/spaces/interfaces/IEntitlementModule.sol": {
      "keccak256": "0x8d10e6a7de93d6417ceed10f772d8b8f18c3fa565561573e5bacece6d32d138a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9c38797d7875e2a2201501f51d6a0976225d1004b043a34af1e21af50d9fd8f0",
        "dweb:/ipfs/QmbMhZ9ASvJoZezwt2ykGdmcNX54VspbJDusmSNGgDTkop"
      ]
    },
    "contracts/zion-governance/contracts/spaces/interfaces/ISpaceManager.sol": {
      "keccak256": "0xa99025d9248522b151f5f0b103134de920b011cbb887e08d7f3327cd8f21f283",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f8c4c79f0a5643bbd85fd6231e6b0090acc870a9d1992ceddc3e6c2f8575ae7e",
        "dweb:/ipfs/QmY7KpWRhuNEAhjZf4vuPDGXg7rcCc8G7xciZQHYbj6fJy"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/Constants.sol": {
      "keccak256": "0x2a6f27ec9f3de51ff89ed016f22ad2734bbf223bee397df2964058fd5403b5c7",
      "license": "MIT",
      "urls": [
        "bzz-raw://2d0674f182413ea6c9bc20715b97ef99a9c1686f4e544a1f9e712a91e2e11227",
        "dweb:/ipfs/QmWPuWgKWR2X1SRg1WouwwDncc2UWMhCijqHEX53xdm2mK"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/DataTypes.sol": {
      "keccak256": "0xd56ec8c765075be0e1087a4e1c4488abf62ef1a93d4530f65d9135ab0fcafe3d",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://04eb9bbbcf28ab325f2677ca5f74107a84534f2ca73634784e7c70ca82c62ea1",
        "dweb:/ipfs/QmQbEWjQxxsU681GvnZibRrmzYCdCF8jo3xeEkiCikrEkY"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/Errors.sol": {
      "keccak256": "0x86c85fe1e17be730bcabb475782708e27c6eda9ac89bb438b512cdbb14a3043c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3f020901b45fdb8cd801a6a424f559b1ff07b33ba67202333472a11927716136",
        "dweb:/ipfs/QmQEcL6oD2xyf11uua2PkQ6oFe1pnQQPva4Bc6QxuJxtEr"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/Events.sol": {
      "keccak256": "0xd2d77d00f023b5f85407ab78a226bc32ae8a6b60527eb0557ec0cbf872e00cd4",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://455f5ae07c21b2f47b912016fa58a379ec1a183a8f481b650db28ed4bbbe3d07",
        "dweb:/ipfs/Qmaj39i9JbJToGU8ZVFrPn1Uxdk9k8DMRezMW5VxvrLdj4"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/PermissionTypes.sol": {
      "keccak256": "0x9ce9134e4321598e521d7370f9aa86563da37927560a0452addaa17a8c9d7c4a",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://f15bf4d8084b899f819eb4df682f0e8020004f723a1f4c512c9817472c3e9f18",
        "dweb:/ipfs/QmP1Wja6AFBFSFKzi7Aa9ERRXomkgRFGVsdC7q3udavnMb"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/ZionSpaceController.sol": {
      "keccak256": "0xf2b0e156bfa8a3231971bbf8f8350bf23b8625572e6a6c4b7a3ccfb89aa17e90",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://15d4cc08f4e806eafbb9c29dba12e57c7d32485745c6a4e40984ec7b44ad2b5d",
        "dweb:/ipfs/QmZJMFK8EXQLhe2k2afa7KPb2ndVnK3HKeztQLJFiL9voE"
      ]
    },
    "contracts/zion-governance/contracts/spaces/modules/EntitlementModuleBase.sol": {
      "keccak256": "0xcb4eb841cc096b20ed32f1a683c9e06dd804c208534d1979b8b8230725a3e1bb",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://41993445129f294a5ef67fc042f73af4a87382268776106822bd3fe8fc435750",
        "dweb:/ipfs/QmcEijXXiBjEYPvpNtnBk8ZtW8L8EWCTQzJbsCXijvof6c"
      ]
    },
    "contracts/zion-governance/contracts/spaces/modules/entitlements/UserGrantedEntitlementModule.sol": {
      "keccak256": "0x75f8f999aea31d278eaf402787e27d558c9d8e708152e02a13f645dcc069f508",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3898d653a04e102656145afef8261b6bcdd0b24267abddeeb066803f188f93b6",
        "dweb:/ipfs/QmXh6v6kPsGzznZzNt2PMQRPgqaCrkEGAz7KVYernbcc5H"
      ]
    },
    "contracts/zion-governance/contracts/spaces/storage/ZionSpaceManagerStorage.sol": {
      "keccak256": "0xd6f53e420cf6ee697e549ef7ffa54af6ce8ee01e5a6b6800d5d848a05dc0dc63",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://817f72d2781bb70aa62f798a9141cbd63f9c735cb5a63b998cf7c595482e505d",
        "dweb:/ipfs/QmVGBDESh1HrWXBezxBoFNztQ7RgcsviKpUwji9CwJJYHo"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
      "keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
      "license": "MIT",
      "urls": [
        "bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
        "dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}