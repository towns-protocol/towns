{
  "compiler": {
    "version": "0.8.17+commit.8df45f5f"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_permissionRegistry",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_roleManager",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "AddRoleFailed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ChannelDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DefaultEntitlementModuleNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DefaultPermissionsManagerNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementModuleNotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementNotWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidParameters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NameContainsInvalidCharacters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NameLengthInvalid",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceNFTNotSet",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "addPermissionToRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "uint256[]",
            "name": "roleId",
            "type": "uint256[]"
          }
        ],
        "name": "addRoleIdsToChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "entitlementData",
            "type": "bytes"
          }
        ],
        "name": "addRoleToEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceNetworkId",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelNetworkId",
                "type": "string"
              },
              {
                "internalType": "uint256[]",
                "name": "roleIds",
                "type": "uint256[]"
              }
            ],
            "internalType": "struct DataTypes.CreateChannelData",
            "name": "data",
            "type": "tuple"
          }
        ],
        "name": "createChannel",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "channelId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "name": "createRole",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceNetworkId",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceMetadata",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "roleName",
                "type": "string"
              },
              {
                "components": [
                  {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                  }
                ],
                "internalType": "struct DataTypes.Permission[]",
                "name": "permissions",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "components": [
                      {
                        "internalType": "address",
                        "name": "contractAddress",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "quantity",
                        "type": "uint256"
                      },
                      {
                        "internalType": "bool",
                        "name": "isSingleToken",
                        "type": "bool"
                      },
                      {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                      }
                    ],
                    "internalType": "struct DataTypes.ExternalToken[]",
                    "name": "tokens",
                    "type": "tuple[]"
                  }
                ],
                "internalType": "struct DataTypes.ExternalTokenEntitlement[]",
                "name": "externalTokenEntitlements",
                "type": "tuple[]"
              },
              {
                "internalType": "address[]",
                "name": "users",
                "type": "address[]"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceEntitlementData",
            "name": "entitlementData",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission[]",
            "name": "everyonePermissions",
            "type": "tuple[]"
          }
        ],
        "name": "createSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getChannelIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getChannelInfoByChannelId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "channelId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.ChannelInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getChannelsBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "idCounter",
                "type": "uint256"
              },
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "channelId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "createdAt",
                    "type": "uint256"
                  },
                  {
                    "internalType": "string",
                    "name": "networkId",
                    "type": "string"
                  },
                  {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "internalType": "address",
                    "name": "creator",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "disabled",
                    "type": "bool"
                  }
                ],
                "internalType": "struct DataTypes.Channel[]",
                "name": "channels",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct DataTypes.Channels",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementModulesBySpaceId",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementsInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "moduleType",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "description",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.EntitlementModuleInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "networkId",
            "type": "string"
          }
        ],
        "name": "getSpaceIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceOwnerBySpaceId",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSpaces",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "isEntitled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          }
        ],
        "name": "isEntitlementModuleWhitelisted",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "removeEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "removePermissionFromRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "uint256[]",
            "name": "roleId",
            "type": "uint256[]"
          }
        ],
        "name": "removeRoleIdsFromChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelNetworkId",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "disabled",
            "type": "bool"
          }
        ],
        "name": "setChannelAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlementModule",
            "type": "address"
          }
        ],
        "name": "setDefaultTokenEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlementModule",
            "type": "address"
          }
        ],
        "name": "setDefaultUserEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "disabled",
            "type": "bool"
          }
        ],
        "name": "setSpaceAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spaceNFTAddress",
            "type": "address"
          }
        ],
        "name": "setSpaceNFT",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceNetworkId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementAddress",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "whitelist",
            "type": "bool"
          }
        ],
        "name": "whitelistEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "HNT Labs",
      "kind": "dev",
      "methods": {
        "createSpace((string,string,string),(string,(string)[],((address,uint256,bool,uint256)[])[],address[]),(string)[])": {
          "params": {
            "entitlementData": "Data to create additional role gated by tokens or specific users",
            "everyonePermissions": "The permissions to grant to the Everyone role",
            "info": "The metadata for the space, name etc"
          }
        },
        "getEntitlementModulesBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "_0": "an array of entitlements"
          }
        },
        "getSpaceInfoBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "_0": "SpaceInfo a struct representing the space info"
          }
        },
        "getSpaceOwnerBySpaceId(string)": {
          "params": {
            "spaceId": "The space id"
          },
          "returns": {
            "_0": "The address of the owner of the space"
          }
        },
        "getSpaces()": {
          "returns": {
            "_0": "SpaceInfo[] an array containing the space info"
          }
        },
        "isEntitled(string,string,address,(string))": {
          "params": {
            "channelId": "The id of the channel",
            "permission": "The type of permission to check",
            "spaceId": "The id of the space",
            "user": "The address of the user"
          },
          "returns": {
            "_0": "bool representing if the user has access or not"
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "setDefaultTokenEntitlementModule(address)": {
          "params": {
            "entitlementModuleAddress": "The address of the entitlement module"
          }
        },
        "setDefaultUserEntitlementModule(address)": {
          "params": {
            "entitlementModuleAddress": "The address of the entitlement module"
          }
        },
        "setSpaceNFT(address)": {
          "params": {
            "spaceNFTAddress": "The address of the zion space nft"
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "ZionSpaceManager",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addPermissionToRole(string,uint256,(string))": {
          "notice": "Adds a permission to a role"
        },
        "addRoleIdsToChannel(string,string,uint256[])": {
          "notice": "adds an array of roleIds to a channel for a space"
        },
        "addRoleToEntitlementModule(string,address,uint256,bytes)": {
          "notice": "add an entitlement to an entitlement module"
        },
        "createChannel((string,string,string,uint256[]))": {
          "notice": "Create a channel within a space"
        },
        "createRole(string,string)": {
          "notice": "Create a new role on a space Id"
        },
        "createSpace((string,string,string),(string,(string)[],((address,uint256,bool,uint256)[])[],address[]),(string)[])": {
          "notice": "Create a new space"
        },
        "getChannelIdByNetworkId(string,string)": {
          "notice": "Returns the channel id by network id"
        },
        "getChannelInfoByChannelId(string,string)": {
          "notice": "Get the channel info by channel id"
        },
        "getChannelsBySpaceId(string)": {
          "notice": "Returns an array of channels by space id"
        },
        "getEntitlementModulesBySpaceId(string)": {
          "notice": "Returns entitlements for a space"
        },
        "getEntitlementsInfoBySpaceId(string)": {
          "notice": "Returns the entitlement info for a space"
        },
        "getSpaceIdByNetworkId(string)": {
          "notice": "Returns the space id by network id"
        },
        "getSpaceInfoBySpaceId(string)": {
          "notice": "Get the space information by id."
        },
        "getSpaceOwnerBySpaceId(string)": {
          "notice": "Returns the owner of the space by space id"
        },
        "getSpaces()": {
          "notice": "Returns an array of multiple space information objects"
        },
        "isEntitled(string,string,address,(string))": {
          "notice": "Checks if a user has access to space or channel based on the entitlements it holds"
        },
        "isEntitlementModuleWhitelisted(string,address)": {
          "notice": "Returns if an entitlement module is whitelisted for a space"
        },
        "removeEntitlement(string,address,uint256,bytes)": {
          "notice": "Removes an entitlement from an entitlement module"
        },
        "removePermissionFromRole(string,uint256,(string))": {
          "notice": "Removes a permission from a role"
        },
        "removeRole(string,uint256)": {
          "notice": "Removes a role from a space, along with the permissions"
        },
        "setDefaultTokenEntitlementModule(address)": {
          "notice": "Sets the default token entitlement for a newly created space"
        },
        "setDefaultUserEntitlementModule(address)": {
          "notice": "Sets the default entitlement for a newly created space"
        },
        "setSpaceAccess(string,bool)": {
          "notice": "********************************* *****EXTERNAL FUNCTIONS********** *********************************"
        },
        "setSpaceNFT(address)": {
          "notice": "Sets the address for the space nft"
        }
      },
      "notice": "This contract manages the spaces and entitlements in the Zion ecosystem.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/spaces/ZionSpaceManager.sol": "ZionSpaceManager"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@opengsn/=node_modules/@opengsn/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":solidity-json-writer/=lib/solidity-json-writer/contracts/",
      ":solmate/=lib/solmate/src/"
    ]
  },
  "sources": {
    "contracts/src/spaces/ZionSpaceManager.sol": {
      "keccak256": "0x5597e2c6ffe1f2d2864836328e856402eba73f6199e6c992c1b5db6dda8d7f0f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f89c63db79a0b30827bea0a68db446793de82a4776e756b89fe669928230c45f",
        "dweb:/ipfs/QmWx75XHNXAk44yLZ6j9oAhVqsxBtBChv3WgUdJX6KCh5j"
      ]
    },
    "contracts/src/spaces/interfaces/IEntitlementModule.sol": {
      "keccak256": "0xc8c0b671f6633e6d9ae003aff0578d5559d48a36b6e145530abd9ff935c4e813",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d820c00db59d269de20538100dbebddf093ec4de39a39651b8e3ddc0396c38a2",
        "dweb:/ipfs/QmTZ8RR2rvvuRMA8XBSyt5vNmgCkpYkZkvmSkyrJjgF8ng"
      ]
    },
    "contracts/src/spaces/interfaces/IPermissionRegistry.sol": {
      "keccak256": "0x07c47eb0d09cc6ee4264b66aa5befe5f474eb5c740a1d1c6f51cb52896fdaa32",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1575f729a68ec7dea6e5bcb605fc1befb602e42460b604a36334dfa108341b7d",
        "dweb:/ipfs/QmQKAqrockkjFx46CAwuDz2WchjmCVBoi7xu4WfKSXk4SF"
      ]
    },
    "contracts/src/spaces/interfaces/IRoleManager.sol": {
      "keccak256": "0x4ebccb9b92180a6d56d9a372897ad05f5417dafb12f40cf51512a2267f8ef3ad",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ea4c3db495f1127438f8c45c46a22891224088e75982d529608cad7b55c27083",
        "dweb:/ipfs/QmamV3fg9HaBhVDbjjNmqAQquCLHxS5ieAvPSkULQGazth"
      ]
    },
    "contracts/src/spaces/interfaces/ISpace.sol": {
      "keccak256": "0x200def4cf1f1cd046883c71efeccc3249d8b85c49738faef92f70b6ea04c39b0",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://21d558a9fc682e4d951524df4248322c31bcccf4532c2e92575e5fcc6a1e70cb",
        "dweb:/ipfs/QmWuVPrft6XWkKfkxVQieBRKvmSKpXsgztm3wvmeen12QU"
      ]
    },
    "contracts/src/spaces/interfaces/ISpaceManager.sol": {
      "keccak256": "0x4a82a0d71edf6870113e306e74453fdc738be35b1f601d1ec03ccf48dbf0f146",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://bfca35c0bf4f896b77816bb205b5ffc03ad1d6703f2270b70e56ce2dd23dfa05",
        "dweb:/ipfs/QmU2VmrJrbCQRU2JW7ySrB14AuuhwWDRMjnrRMCWDSUPke"
      ]
    },
    "contracts/src/spaces/libraries/Constants.sol": {
      "keccak256": "0xd4f2b16156d8d9f9e0cdcd4ad0835b94a67b49beabe22967eda7c069a7268407",
      "license": "MIT",
      "urls": [
        "bzz-raw://077701214ca4757cac2887f47c347ec75a9f3b4026785df11b95a0bc8b1e2ecc",
        "dweb:/ipfs/Qmd8uKoJU8EAhUhYc1MpDHBUaHHtxGGBr9V9ahVp4cUxPv"
      ]
    },
    "contracts/src/spaces/libraries/CreationLogic.sol": {
      "keccak256": "0x32f0b1036a16f73e99865febcfc6495d4523c649877ff28537af2f7ecadc5883",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://528901c6fd4ca5807e4fa883f6298e9dbc31b045a5fad2f59421b9f276bc1740",
        "dweb:/ipfs/QmQ65fcZfV2T3zjhaZeiAWR5AyVNNudz4a94eFp877LHdY"
      ]
    },
    "contracts/src/spaces/libraries/DataTypes.sol": {
      "keccak256": "0x75114eced808ede585f99552ecbefcaed45f0499a141ca02bb5d8dcd294da64c",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://76a2693d7c819212adfebf5a1727c59a151a729ca4c3a28239cad46be1580c99",
        "dweb:/ipfs/QmNy393dm59MyqS3ww64VHbzf38c44uGSkPDrttFxu7JbB"
      ]
    },
    "contracts/src/spaces/libraries/Errors.sol": {
      "keccak256": "0x9a941e4fc071bba09676638161d691f9d5e0cef3270d4eeb8d97c1fd091e08b5",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b33c1d41f30be06a7dd4c4308320703bf217a568a53a22b6af7f1390fd5bc580",
        "dweb:/ipfs/QmXLCmvmkTmyGs8HGGF9McFX7vCG8Pxsu4xHorgkSPYiW6"
      ]
    },
    "contracts/src/spaces/libraries/Events.sol": {
      "keccak256": "0xf2672cea93eae66554e9ee207271c27205099d4b2f98d7485693780ec4f628e3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c066b1040ad26e2ff5e5d66e5e7953f706104d449038a79548ec80bfb4d5571e",
        "dweb:/ipfs/QmTiFb674cbZboVEVMUaPStDmuVyEHGFp8wLR9VvmztqrG"
      ]
    },
    "contracts/src/spaces/libraries/PermissionTypes.sol": {
      "keccak256": "0xf2b4fa33252ee1f20f93ef3a36c76256c5194e46a217b7630160ca95ca6d569c",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://781f4af73155e4642927a0077660ae6e7334b801321d276d681fb671ec7a8d86",
        "dweb:/ipfs/QmR2Jsvy7KFGqttabBMAiS9SBQN52zh9CiQVTX2XxsJU6A"
      ]
    },
    "contracts/src/spaces/libraries/Utils.sol": {
      "keccak256": "0xa80bbef58a9e472109f1228b577ccb77d14f10a31a73f5bbc5ad852d490a7639",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://062ba1b53957a4cfffbecbbb5a8f918d883553f518683e61471ccb1b697ddaf0",
        "dweb:/ipfs/QmQTJP2j6M4Hm8GcakRaCy75xNCz7AMh4W3Sd1n69RCKF2"
      ]
    },
    "contracts/src/spaces/storage/ZionSpaceManagerStorage.sol": {
      "keccak256": "0xd776a38811d83201224b71844fdde810519c2ae85d03e86d703b6074ce78e622",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://51a9210bff60d223544ec266273490bb329a3db16a8c22e60b6ff6cb11858d6b",
        "dweb:/ipfs/QmbinA6B9vWszjdECwyY7pT8owJ4h3GSgnhZeJG1vj8Gnn"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}