---
description: These rules are essential for working with a complex blockchain-based space management and permission system. They're particularly helpful when:  1. Implementing new features or modifying existing ones in the space management system 2. Working with cross-chain entitlements and permission validation 3. Developing token distribution mechanisms or reward systems 4. Adding or modifying role-based access control 5. Upgrading contracts using the Diamond Pattern 6. Implementing new entitlement types or rules 7. Debugging permission or access control issues 8. Writing tests for contract interactions
globs: *.sol
alwaysApply: false
---
# Contracts Rule

These rules are essential for working with a complex blockchain-based space management and permission system. They're particularly helpful when:
1. Implementing new features or modifying existing ones in the space management system
2. Working with cross-chain entitlements and permission validation
3. Developing token distribution mechanisms or reward systems
4. Adding or modifying role-based access control
5. Upgrading contracts using the Diamond Pattern
6. Implementing new entitlement types or rules
7. Debugging permission or access control issues
8. Writing tests for contract interactions

## Overview

This project is a blockchain-based space/channel management system with role-based access control and entitlements. It implements a complex permission system using smart contracts that allows for cross-chain rule validation and user management.

The system also supports cross-chain delegation between Ethereum L1 and Base L2, allowing users to stake tokens on L1 and have delegation benefits on L2. Node operators can receive delegations directly or via spaces, with rewards distributed based on stake amounts and time.

### The system allows for:
- Creation and management of spaces and channels
- Role-based access control with granular permissions
- Cross-chain entitlement validation
- User membership management
- Rule-based entitlements with logical operations
- Staking and rewards distribution for DAO participants and node operators
- Cross-chain delegation and governance mechanisms

## Tech Stack

- Solidity ^0.8.23
- OpenZeppelin Contracts
- Solady Contracts
- Diamond Pattern (EIP-2535) for upgradeable contracts
- Foundry for development and testing
- TypeScript for contract type generation

## Project Structure

- [`src/airdrop/`](mdc:packages/contracts/src/airdrop) - Token distribution mechanisms (drops, points, streaks, rules)
- [`src/base/registry/`](mdc:packages/contracts/src/base/registry) - Core registry, delegation, rewards, entitlement checking
  - [`/facets/distribution/`](mdc:packages/contracts/src/base/registry/facets/distribution) - Staking and rewards distribution for DAO participants and node operators
  - [`/facets/mainnet/`](mdc:packages/contracts/src/base/registry/facets/mainnet) - Cross-chain delegation handling and message relaying
  - [`/facets/delegation/`](mdc:packages/contracts/src/base/registry/facets/delegation) - Space-to-operator delegation management
  - [`/facets/operator/`](mdc:packages/contracts/src/base/registry/facets/operator) - Node operator registration and management
- [`src/spaces/`](mdc:packages/contracts/src/spaces) - Space management, entitlements, permissions, cross-chain rules
- [`src/factory/`](mdc:packages/contracts/src/factory) - Factory contracts for space creation, deployment, wallet linking
- [`src/utils/`](mdc:packages/contracts/src/utils) - Utility libraries (currency, math, reverts, patterns)
- [`src/diamond/`](mdc:packages/contracts/src/diamond) - Diamond pattern implementation, facets, upgradeability
- [`src/tokens/`](mdc:packages/contracts/src/tokens) - Token management, membership NFTs, locks, bridging, inflation
- [`scripts/diamonds`](mdc:packages/contracts/scripts/diamonds) - Diamond deployment scripts

### Key Contracts

- `RuleEntitlement.sol` - Rule-based entitlements, cross-chain permission validation
- `EntitlementsManager.sol` - Entitlement validation and access control
- `Architect.sol` - Factory for space creation/initialization
- `CreateSpace.sol` - Space instance creation/initialization
- `Roles.sol` - Role-based permissions and hierarchies
- `Towns.sol` - Main ERC20 token (inflation, governance)
- `DropFacet.sol` - Token airdrops, claiming conditions
- `TownsPoints.sol` - Points-based rewards, check-ins, streaks
- `RewardsDistribution.sol` - Manages token staking, delegation proxies, and reward calculations
- `MainnetDelegation.sol` - Handles cross-chain delegation via cross-domain messengers
- `SpaceDelegationFacet.sol` - Manages delegation of spaces to node operators
- `EntitlementChecker.sol` - Cross-chain entitlement validation
- `DiamondCutFacet.sol` - Diamond upgradeability

## Rules

### General
1. All contracts must follow the Diamond Pattern for upgradeability
2. Use explicit visibility modifiers for all functions and state variables
3. Implement proper access control using modifiers
4. Follow gas optimization best practices
5. Use events for important state changes
6. Implement proper input validation
7. Follow semantic versioning for contract upgrades
8. Use calldata in external function argument definitions when possible
9. Prefer clear/descriptive names over excessive comments
10. Library functions should be pure in the functional programming sense (no side effects)

### Storage
1. Use diamond storage pattern for all state variables
2. Namespace storage slots to avoid collisions
3. Use efficient data structures for gas
4. Use proper mapping patterns for complex data

### Types
1. Use strict typing for all variables/parameters
2. Implement interface inheritance
3. Use enums for predefined sets
4. Use structs for complex types
5. Follow ABI encoding/decoding best practices

### Permissions
1. Implement granular permission checks
2. Use role-based access control
3. Validate cross-chain entitlements
4. Implement permission override mechanisms

### Testing
1. Write comprehensive unit tests
2. Test all edge cases
3. Test permission/access control logic
4. Test cross-chain functionality
5. Test upgrade paths

### Documentation
1. Use NatSpec for all public/external functions
2. Document complex logic/algorithms
3. Keep inline comments concise
4. Document storage layouts
5. Document upgrade procedures

### Gas Optimization
1. Use efficient data structures, pack storage
2. Implement batch operations where possible
3. Minimize storage reads/writes
4. Cache frequently accessed storage
5. Use unchecked blocks where safe
6. Use `msg.sender` directly

### Security
1. Follow CEI (Checks-Effects-Interactions)
2. Use reentrancy guards
3. Validate all inputs
4. Use safe math
5. Implement access control
6. Use `for (uint256 i; i < length; ++i)` for loops
7. Follow upgrade best practices

### Diamond Facet Storage

Every new facet/feature must use the following storage pattern to avoid collision:

```solidity
library FacetStorage {
  // A hash calculate by running
  // keccak256(abi.encode(uint256(keccak256("folder.path.to.feature")) - 1)) & ~bytes32(uint256(0xff))
  bytes32 internal constant STORAGE_SLOT =
    0x672ef851d5f92307da037116e23aa9e31af7e1f7e3ca62c4e6d540631df3fd00;

  struct Layout {
    // storage variables go here
  }

  function layout() internal pure returns (Layout storage ds) {
    assembly {
      ds.slot := STORAGE_SLOT
    }
  }
}
```

### Facet Example: Structure and Storage

A typical facet in this codebase is split into several files for clarity and upgrade safety:

- **Storage Library**: Handles diamond storage slot and layout.
- **Base Contract**: Implements internal logic and interacts with storage.
- **Facet Contract**: Exposes external/protected functions and inherits the base.
- **Interfaces**: Define external APIs.

**Example: Votes Facet**

- [`VotesStorage.sol`](mdc:src/diamond/facets/governance/votes/VotesStorage.sol)
    ```solidity
    library VotesStorage {
        bytes32 internal constant STORAGE_SLOT = keccak256("diamond.facets.governance.votes.storage");

        struct Layout {
            mapping(address => address) _delegation;
            mapping(address => Checkpoints.Trace224) _delegateCheckpoints;
            Checkpoints.Trace224 _totalCheckpoints;
        }

        function layout() internal pure returns (Layout storage db) {
            assembly { db.slot := STORAGE_SLOT }
        }
    }
    ```

- [`VotesBase.sol`](mdc:src/diamond/facets/governance/votes/VotesBase.sol)
    ```solidity
    abstract contract VotesBase {
        using VotesStorage for VotesStorage.Layout;
        function _getVotes(address account) internal view returns (uint256) {
            return VotesStorage.layout()._delegateCheckpoints[account].latest();
        }
        // ... more internal logic ...
    }
    ```

- [`Votes.sol`](mdc:src/diamond/facets/governance/votes/Votes.sol)
    ```solidity
    abstract contract Votes is VotesBase, IERC5805 {
        function getVotes(address account) public view virtual returns (uint256) {
            return _getVotes(account);
        }
        // ... external functions ...
    }
    ```

- **Guidelines**
    - Use the diamond storage pattern to avoid collisions
    - Split facet implementation into Storage Library, Base Contract, Facet Contract, and Interfaces
    - Place business logic in a base contract.
    - Expose only protected/external calls in the facet contract.
    - Define interfaces for external APIs.

### Deployment Script Example: Using Libraries

Deployment scripts use helper libraries to deploy facets and assemble the diamond. Each facet has a deployment library that provides selectors and cut data.

**Example: Deploying a Diamond with Facets**

- [`DeployMembership.s.sol`](mdc:scripts/deployments/facets/DeployMembership.s.sol)
    ```solidity
    library DeployMembership {
        function selectors() internal pure returns (bytes4[] memory) { ... }

        function makeCut(address facetAddress, IDiamond.FacetCutAction action)
            internal pure returns (IDiamond.FacetCut memory)
        { ... }

        function deploy() internal returns (address) {
            return DeployLib.deployCode("MembershipFacet.sol", "");
        }
    }
    ```

- [`DeploySpace.s.sol`](mdc:scripts/deployments/diamonds/DeploySpace.s.sol)
    ```solidity
    contract DeploySpace is IDiamondInitHelper, DiamondHelper, Deployer {
        function addImmutableCuts(address deployer) internal {
            address facet = facetHelper.deploy("DiamondCutFacet", deployer);
            addFacet(
                DeployDiamondCut.makeCut(facet, IDiamond.FacetCutAction.Add),
                facet,
                DeployDiamondCut.makeInitData()
            );
            // ... more facets ...
        }
        function diamondInitParams(address deployer) public returns (Diamond.InitParams memory) {
            address facet = facetHelper.deploy("MembershipToken", deployer);
            addCut(DeployMembershipToken.makeCut(facet, IDiamond.FacetCutAction.Add));
            // ... more facets ...
            return Diamond.InitParams({ ... });
        }
        function __deploy(address deployer) internal override returns (address) {
            addImmutableCuts(deployer);
            Diamond.InitParams memory initDiamondCut = diamondInitParams(deployer);
            Diamond diamond = new Diamond(initDiamondCut);
            return address(diamond);
        }
    }
    ```

**Key Patterns:**
- Each facet has a deployment library that provides selectors and cut data.
- The deployment script uses these libraries to deploy facets, build the diamond cut, and initialize the diamond.
- Facet deployment is modular and can be customized by passing different facet lists.
