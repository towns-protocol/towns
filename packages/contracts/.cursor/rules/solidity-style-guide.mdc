---
description: These rules are based on the official Solidity Style Guide with minor modifications. They should be followed when changes are suggested in order to maintain consistency and readability in the codebase.
globs: *.sol
alwaysApply: false
---
# Solidity Style Guide

## Code Layout

### Indentation
- Use 4 spaces per indentation level
- Do not use tabs; spaces are preferred

### Blank Lines
- Surround top-level declarations with two blank lines
- Within a contract, surround function declarations with a single blank line
- Blank lines may be omitted between groups of related one-liners (such as stub functions)

### Maximum Line Length
- Maximum suggested line length is 120 characters
- For wrapped lines:
  - First argument should not be attached to opening parenthesis
  - Use only one indent
  - Each argument should be on its own line
  - Terminating element should be on the final line by itself

### Source File Encoding
- UTF-8 or ASCII encoding is preferred

### Imports
- Import statements should always be at the top of the file
- All imports should be at the beginning of the file, after the pragma statement

### Order of Functions
Functions should be grouped according to visibility and ordered:
1. Constructor
2. Receive function (if exists)
3. Fallback function (if exists)
4. External
5. Public
6. Internal
7. Private
Within each group, place `view` and `pure` functions last.

### Whitespace in Expressions
- Avoid extraneous whitespace inside parentheses, brackets, or braces
- No whitespace before commas or semicolons
- No whitespace in the receive and fallback functions: `receive() external payable`
- Don't align assignments with extra spaces
- Use a single space around operators: `x = 1; y = 2;`
- Operators with higher priority can exclude whitespace to denote precedence: `x = 2**3 + 5;`

### Control Structures
- Opening braces should be on the same line as the declaration
- Closing braces should be on their own line at the same indentation level
- Include a single space between control keywords (`if`, `while`, `for`) and parentheses
- For `if` statements with `else` clauses, place `else` on the same line as the closing brace

## Order of Layout

Contract elements should be laid out in this order:
1. Pragma statements
2. Import statements
3. Events
4. Errors
5. Interfaces
6. Libraries
7. Contracts

Inside each contract, use this order:
1. Type declarations
2. State variables
3. Events
4. Errors
5. Modifiers
6. Functions

## Naming Conventions

- Contracts/Libraries/Interfaces: `PascalCase` (e.g., `SimpleToken`, `SwapRouter`)
  - Contract and library names should match their filenames (e.g., `SimpleToken.sol`)
  - When a file contains multiple contracts/libraries, the filename should match the core contract
  - Avoid files with multiple unrelated contracts/libraries when possible
- Structs: `PascalCase` (e.g., `UserProfile`)
- Events: `PascalCase` (e.g., `Transfer`)
- Functions: `camelCase` (e.g., `getBalance`)
- Function arguments: `camelCase` (e.g., `initialSupply`)
- Local/State variables: `camelCase` (e.g., `totalSupply`)
- Constants/Immutables: `UPPER_CASE` (e.g., `MAX_USERS`)
- Modifiers: `camelCase` (e.g., `onlyOwner`)
- Enums: `PascalCase` (e.g., `TokenStatus`), members in `UPPER_CASE`

### Names to Avoid
- Never use single letter variable names `l` (lowercase L), `O` (uppercase o), or `I` (uppercase i) as they can be confused with the numerals 1 and 0

### Visibility and Naming Conventions
- Use `_singleLeadingUnderscore` for private and internal functions and state variables in contracts
- Do NOT use underscores for internal functions in libraries
- Use `_singleLeadingUnderscore` for private functions in libraries
- Public/external functions and variables should never have a leading underscore
- Use `singleTrailingUnderscore_` when name collisions with reserved words occur

### NatSpec Comments
- All public interfaces (functions in the ABI) should be documented using NatSpec
- Prefer `///` single-line comments over `/** */` block comments to save lines of code
- Include `@param`, `@return`, `@dev`, and other tags as appropriate
- Example:
  ```solidity
  /// @notice Transfers tokens to a specified address
  /// @param to The address to transfer to
  /// @param amount The amount to transfer
  /// @return success Whether the transfer was successful
  function transfer(address to, uint256 amount) external returns (bool success);
  ```
