{
  "compiler": {
    "version": "0.8.16+commit.07a7930e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "permissionRegistry",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "DefaultEntitlementModuleNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DefaultPermissionsManagerNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementModuleNotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementNotWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidParameters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceDoesNotExist",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "addPermissionToRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "entitlementData",
            "type": "bytes"
          }
        ],
        "name": "addRoleToEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceNetworkId",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelNetworkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateChannelData",
            "name": "data",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "metadata",
                "type": "string"
              },
              {
                "components": [
                  {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                  }
                ],
                "internalType": "struct DataTypes.Permission[]",
                "name": "permissions",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct DataTypes.CreateRoleData",
            "name": "role",
            "type": "tuple"
          }
        ],
        "name": "createChannel",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "name": "createRole",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceNetworkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          }
        ],
        "name": "createSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceNetworkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "entitlementModuleAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "tokenAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "quantity",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "description",
                "type": "string"
              },
              {
                "internalType": "string[]",
                "name": "permissions",
                "type": "string[]"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceTokenEntitlementData",
            "name": "entitlement",
            "type": "tuple"
          }
        ],
        "name": "createSpaceWithTokenEntitlement",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getChannelIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          }
        ],
        "name": "getChannelInfoByChannelId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "channelId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              }
            ],
            "internalType": "struct DataTypes.ChannelInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getChannelsBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "idCounter",
                "type": "uint256"
              },
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "channelId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "createdAt",
                    "type": "uint256"
                  },
                  {
                    "internalType": "string",
                    "name": "networkId",
                    "type": "string"
                  },
                  {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "internalType": "address",
                    "name": "creator",
                    "type": "address"
                  }
                ],
                "internalType": "struct DataTypes.Channel[]",
                "name": "channels",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct DataTypes.Channels",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementModulesBySpaceId",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "entitlementModules",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getEntitlementsInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "entitlementAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "entitlementName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "entitlementDescription",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.EntitlementModuleInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "permissionType",
            "type": "bytes32"
          }
        ],
        "name": "getPermissionFromMap",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getPermissionsBySpaceIdByRoleId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getRoleBySpaceIdByRoleId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Role",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getRolesBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Role[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "networkId",
            "type": "string"
          }
        ],
        "name": "getSpaceIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceOwnerBySpaceId",
        "outputs": [
          {
            "internalType": "address",
            "name": "ownerAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSpaces",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Permission",
            "name": "permission",
            "type": "tuple"
          }
        ],
        "name": "isEntitled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          }
        ],
        "name": "isEntitlementModuleWhitelisted",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "roleIds",
            "type": "uint256[]"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "removeEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlementModule",
            "type": "address"
          }
        ],
        "name": "setDefaultEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "entitlementAddress",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "whitelist",
            "type": "bool"
          }
        ],
        "name": "whitelistEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "HNT Labs",
      "kind": "dev",
      "methods": {
        "createSpace((string,string))": {
          "params": {
            "info": "The data to create the space."
          }
        },
        "getEntitlementModulesBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "entitlementModules": "an array of entitlements"
          }
        },
        "getSpaceInfoBySpaceId(string)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "_0": "SpaceInfo a struct representing the space info"
          }
        },
        "getSpaceOwnerBySpaceId(string)": {
          "params": {
            "spaceId": "The space id"
          },
          "returns": {
            "ownerAddress": "The address of the owner of the space"
          }
        },
        "getSpaces()": {
          "returns": {
            "_0": "SpaceInfo[] an array containing the space info"
          }
        },
        "isEntitled(string,string,address,(string))": {
          "params": {
            "channelId": "The id of the channel",
            "permission": "The type of permission to check",
            "spaceId": "The id of the space",
            "user": "The address of the user"
          },
          "returns": {
            "_0": "bool representing if the user has access or not"
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "setDefaultEntitlementModule(address)": {
          "params": {
            "entitlementModuleAddress": "The address of the entitlement module"
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "ZionSpaceManager",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addPermissionToRole(string,uint256,(string))": {
          "notice": "Adds a permission to a role"
        },
        "addRoleToEntitlementModule(string,string,address,uint256,bytes)": {
          "notice": "add an entitlement to an entitlement module"
        },
        "createRole(string,string)": {
          "notice": "Create a role on a new space Id"
        },
        "createSpace((string,string))": {
          "notice": "Create a new space."
        },
        "createSpaceWithTokenEntitlement((string,string),(address,address,uint256,string,string[]))": {
          "notice": "Create a new space with a token entitlement."
        },
        "getEntitlementModulesBySpaceId(string)": {
          "notice": "Returns entitlements for a space"
        },
        "getEntitlementsInfoBySpaceId(string)": {
          "notice": "Returns the entitlement info for a space"
        },
        "getSpaceInfoBySpaceId(string)": {
          "notice": "Get the space information by id."
        },
        "getSpaceOwnerBySpaceId(string)": {
          "notice": "Returns the owner of the space by space id"
        },
        "getSpaces()": {
          "notice": "Returns an array of multiple space information objects"
        },
        "isEntitled(string,string,address,(string))": {
          "notice": "Checks if a user has access to space or channel based on the entitlements it holds"
        },
        "isEntitlementModuleWhitelisted(string,address)": {
          "notice": "returns if an entitlement module is whitelisted for a space"
        },
        "removeEntitlement(string,string,address,uint256[],bytes)": {
          "notice": "Removes an entitlement from an entitlement module"
        },
        "setDefaultEntitlementModule(address)": {
          "notice": "Sets the default entitlement for a newly created space"
        }
      },
      "notice": "This contract manages the spaces and entitlements in the Zion ecosystem.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/zion-governance/src/spaces/ZionSpaceManager.sol": "ZionSpaceManager"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@harmony/=node_modules/@harmony/",
      ":@opengsn/=node_modules/@opengsn/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":ds-test/=lib/solmate/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":solidity-json-writer/=node_modules/solidity-json-writer/",
      ":solmate/=lib/solmate/src/"
    ]
  },
  "sources": {
    "contracts/zion-governance/src/spaces/ZionPermissionsRegistry.sol": {
      "keccak256": "0x9a561b7c586b260a518681a8635b6946983fd036db88bc51ee27c16a93b1b2a7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://971735d8e5f08e5d082acd63a70c225c0c5c3c0e302ab15e037ea74436f1a61d",
        "dweb:/ipfs/QmZoEeoabYgRvvedosXt5uwRFweKeKJka7dDqt3apyh2eM"
      ]
    },
    "contracts/zion-governance/src/spaces/ZionSpaceManager.sol": {
      "keccak256": "0x7d0d04dd14e1fba5105742db785f936563453fdfafb04242f2894e825e0157ed",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9ba9d81f07e0f5579b316d92eeb2785da9450fbc2e4fba4f93a05e9e4d7c9e2c",
        "dweb:/ipfs/QmPM6U32f2qUvFJ41Rnp1nsw2HGMDJ2RY1SaysqmmMaJhJ"
      ]
    },
    "contracts/zion-governance/src/spaces/interfaces/IEntitlementModule.sol": {
      "keccak256": "0x8d10e6a7de93d6417ceed10f772d8b8f18c3fa565561573e5bacece6d32d138a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9c38797d7875e2a2201501f51d6a0976225d1004b043a34af1e21af50d9fd8f0",
        "dweb:/ipfs/QmbMhZ9ASvJoZezwt2ykGdmcNX54VspbJDusmSNGgDTkop"
      ]
    },
    "contracts/zion-governance/src/spaces/interfaces/ISpaceManager.sol": {
      "keccak256": "0x7f6fcd3864fb75c585b0a14c1743052475675b90913d20cfa44b8251655975ff",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://731e2a20fd5728a413d8c820d0fd4cefe88b44bcf9de9e8c7af15c2c0f98acaa",
        "dweb:/ipfs/QmZqNmHPxXASYEH3MwGtjZJKpjb1ckVaVvbppAXrDf7DuZ"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/Constants.sol": {
      "keccak256": "0x2a6f27ec9f3de51ff89ed016f22ad2734bbf223bee397df2964058fd5403b5c7",
      "license": "MIT",
      "urls": [
        "bzz-raw://2d0674f182413ea6c9bc20715b97ef99a9c1686f4e544a1f9e712a91e2e11227",
        "dweb:/ipfs/QmWPuWgKWR2X1SRg1WouwwDncc2UWMhCijqHEX53xdm2mK"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/CreationLogic.sol": {
      "keccak256": "0x446c6c8754d2ae1c1bbb0b664e6650930081819d23198b8a91172d4395ec7cb3",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://fb6b03734eaf72bd1615a04f561d7d5387c34d2d2c4a0984c58b4343c4a45a96",
        "dweb:/ipfs/Qmd4KVvgc2WqwJ2M1uDWkpLPdUdKjpbPAN2posqbEz59MK"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/DataTypes.sol": {
      "keccak256": "0x244ec77b13b3ea2f26b1daf0e8bd06324954488f114b13b9daeeb4c9f6918976",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://6bde742ab8e1d732acc85242248febf21822311099f5cef96847e65980a8d7f5",
        "dweb:/ipfs/QmRMqNk4hJHKjtH4CsRx3A3Xpfz4hJk7yF9zT2Hun2Cxry"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/Errors.sol": {
      "keccak256": "0x9f42b1d148c2003eaf90226cd3404ea4d1c5544931bf10e0a65ea439a148d37d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://90bb9db1cf147b7c94bceb6e195bf731a9dac1aa51716d2a405d2c0ff43cfdc1",
        "dweb:/ipfs/QmcxBbT5avEunHbXANGRDoNfc2DcE3q16b7setab12CNkJ"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/Events.sol": {
      "keccak256": "0x686d6090a39f3761c8329e7bba32b05d9ea84baa2cc85075ad29209de8b1260c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ce2fda00a319b81647a04fb5cb49b89cdb4a45c1ec53b6501a253379de5d3027",
        "dweb:/ipfs/QmQUx8Aky276cSFfgoL5CsCvKjJ4S6Cz2Wfv19p82SK2LV"
      ]
    },
    "contracts/zion-governance/src/spaces/libraries/PermissionTypes.sol": {
      "keccak256": "0x9ce9134e4321598e521d7370f9aa86563da37927560a0452addaa17a8c9d7c4a",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://f15bf4d8084b899f819eb4df682f0e8020004f723a1f4c512c9817472c3e9f18",
        "dweb:/ipfs/QmP1Wja6AFBFSFKzi7Aa9ERRXomkgRFGVsdC7q3udavnMb"
      ]
    },
    "contracts/zion-governance/src/spaces/modules/EntitlementModuleBase.sol": {
      "keccak256": "0xcb4eb841cc096b20ed32f1a683c9e06dd804c208534d1979b8b8230725a3e1bb",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://41993445129f294a5ef67fc042f73af4a87382268776106822bd3fe8fc435750",
        "dweb:/ipfs/QmcEijXXiBjEYPvpNtnBk8ZtW8L8EWCTQzJbsCXijvof6c"
      ]
    },
    "contracts/zion-governance/src/spaces/modules/entitlements/UserGrantedEntitlementModule.sol": {
      "keccak256": "0x24398e129fe57c0d09941bc7a8506b70c52f418d5c2b44b9f789b9bb21b609ae",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d57bed413c29d1e28c5b5529bf494c0ec5c242017e0cce992ee12925176352de",
        "dweb:/ipfs/QmPY9qoE62kNmQt45vv7RBMMvGivsUrxDegnH9Ng6sJ4jz"
      ]
    },
    "contracts/zion-governance/src/spaces/storage/ZionSpaceManagerStorage.sol": {
      "keccak256": "0x67d6796bc2ad3e38366c88189cf888628de047f2fc932fb2c606ebeb3a13d07c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ad35749cb7e718ae32f263370c2fb220c29ce3e453c3b012ab7ded97b69873ec",
        "dweb:/ipfs/QmWj8be3KJHufQi8MYsBm5mysEa2yxVS3Zx4RAFdWjyGjU"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
      "keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
      "license": "MIT",
      "urls": [
        "bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
        "dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}