{
  "compiler": {
    "version": "0.8.15+commit.e14f2714"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "DefaultEntitlementModuleNotSet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementModuleNotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementNotWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotSpaceOwner",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "spaceId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "enum DataTypes.EntitlementType[]",
            "name": "entitlementTypes",
            "type": "uint8[]"
          },
          {
            "internalType": "bytes",
            "name": "entitlementData",
            "type": "bytes"
          }
        ],
        "name": "addEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          }
        ],
        "name": "createSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "info",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "entitlementModuleAddress",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "tokenAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "quantity",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "description",
                "type": "string"
              },
              {
                "internalType": "enum DataTypes.EntitlementType[]",
                "name": "entitlementTypes",
                "type": "uint8[]"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceTokenEntitlementData",
            "name": "entitlement",
            "type": "tuple"
          }
        ],
        "name": "createSpaceWithTokenEntitlement",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "spaceId",
            "type": "uint256"
          }
        ],
        "name": "getEntitlementsBySpaceId",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "entitlements",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "spaceId",
            "type": "uint256"
          }
        ],
        "name": "getEntitlementsInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "entitlementAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "entitlementName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "entitlementDescription",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.EntitlementModuleInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "networkId",
            "type": "string"
          }
        ],
        "name": "getSpaceIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_spaceId",
            "type": "uint256"
          }
        ],
        "name": "getSpaceInfoBySpaceId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_spaceId",
            "type": "uint256"
          }
        ],
        "name": "getSpaceOwnerBySpaceId",
        "outputs": [
          {
            "internalType": "address",
            "name": "ownerAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSpaces",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "spaceId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "creator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "internalType": "struct DataTypes.SpaceInfo[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "spaceId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "roomId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "enum DataTypes.EntitlementType",
            "name": "entitlementType",
            "type": "uint8"
          }
        ],
        "name": "isEntitled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "spaceId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          }
        ],
        "name": "isEntitlementModuleWhitelisted",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlementModule",
            "type": "address"
          }
        ],
        "name": "registerDefaultEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "spaceId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "entitlementModuleAddress",
            "type": "address"
          },
          {
            "internalType": "enum DataTypes.EntitlementType[]",
            "name": "entitlementTypes",
            "type": "uint8[]"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "removeEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "spaceId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "entitlementAddress",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "whitelist",
            "type": "bool"
          }
        ],
        "name": "whitelistEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "HNT Labs",
      "kind": "dev",
      "methods": {
        "createSpace((string,string))": {
          "params": {
            "info": "The data to create the space."
          }
        },
        "getEntitlementsBySpaceId(uint256)": {
          "params": {
            "spaceId": "The id of the space"
          },
          "returns": {
            "entitlements": "an array of entitlements"
          }
        },
        "getSpaceIdByNetworkId(string)": {
          "params": {
            "networkId": "The network space id"
          },
          "returns": {
            "_0": "uint256 Returns the space id"
          }
        },
        "getSpaceInfoBySpaceId(uint256)": {
          "params": {
            "_spaceId": "The id of the space"
          },
          "returns": {
            "_0": "SpaceInfo a struct representing the space info"
          }
        },
        "getSpaceOwnerBySpaceId(uint256)": {
          "params": {
            "_spaceId": "The space id"
          },
          "returns": {
            "ownerAddress": "The address of the owner of the space"
          }
        },
        "getSpaces()": {
          "returns": {
            "_0": "SpaceInfo[] an array containing the space info"
          }
        },
        "isEntitled(uint256,uint256,address,uint8)": {
          "params": {
            "entitlementType": "The type of entitlement to check",
            "roomId": "The id of the room",
            "spaceId": "The id of the space",
            "user": "The address of the user"
          },
          "returns": {
            "_0": "bool representing if the user has access or not"
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "registerDefaultEntitlementModule(address)": {
          "params": {
            "entitlementModuleAddress": "The address of the entitlement module"
          }
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "ZionSpaceManager",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addEntitlement(uint256,address,uint8[],bytes)": {
          "notice": "add an entitlement to an entitlement module"
        },
        "createSpace((string,string))": {
          "notice": "********************************* *****SPACE OWNER FUNCTIONS***** *********************************"
        },
        "createSpaceWithTokenEntitlement((string,string),(address,address,uint256,string,uint8[]))": {
          "notice": "Create a new space with a token entitlement."
        },
        "getEntitlementsBySpaceId(uint256)": {
          "notice": "Returns entitlements for a space"
        },
        "getSpaceIdByNetworkId(string)": {
          "notice": "Returns the space id by network id"
        },
        "getSpaceInfoBySpaceId(uint256)": {
          "notice": "Get the space information by id."
        },
        "getSpaceOwnerBySpaceId(uint256)": {
          "notice": "Returns the owner of the space by space id"
        },
        "getSpaces()": {
          "notice": "Returns an array of multiple space information objects"
        },
        "isEntitled(uint256,uint256,address,uint8)": {
          "notice": "Checks if a user has access to space or room based on the entitlements it holds"
        },
        "registerDefaultEntitlementModule(address)": {
          "notice": "Sets the default entitlement for a newly created space"
        }
      },
      "notice": "This contract manages the spaces and entitlements in the Zion ecosystem.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/zion-governance/contracts/spaces/ZionSpaceManager.sol": "ZionSpaceManager"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [
      ":@ensdomains/=node_modules/@ensdomains/",
      ":@harmony/=node_modules/@harmony/",
      ":@opengsn/=node_modules/@opengsn/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":contract-debug-ui/=node_modules/contract-debug-ui/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
      ":forge-std/=lib/forge-std/src/",
      ":hardhat-console/=node_modules/hardhat-console/",
      ":hardhat-deploy/=node_modules/hardhat-deploy/",
      ":hardhat/=node_modules/hardhat/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":solidity-json-writer/=node_modules/solidity-json-writer/",
      ":solmate/=lib/solmate/src/"
    ]
  },
  "sources": {
    "contracts/zion-governance/contracts/spaces/ZionSpaceManager.sol": {
      "keccak256": "0x3a130468dbcb619266d087106d72ac3407c248e65c03e512cfea426e3f13db52",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://dc83feb9fe1153a6a39bd66ba85293648c1f9bfb2fa842f41fd405a021059dc1",
        "dweb:/ipfs/QmYAs3CouqRdh6LWdNAoJozFpUipLQix6yopEy1826aQrZ"
      ]
    },
    "contracts/zion-governance/contracts/spaces/interfaces/IEntitlementModule.sol": {
      "keccak256": "0xb03566d6f356cfe859f5f39ddda8b0ed87d01ea6173265ddc94e01718a44e68f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f4bc94ff0605462026cf7406566ac156fa60436386b3710ac7bb70be720901a6",
        "dweb:/ipfs/QmcinqP3FtxqaEa6oduSuqH9qXiP9CzkDPrt1P7B4xQx5v"
      ]
    },
    "contracts/zion-governance/contracts/spaces/interfaces/ISpaceManager.sol": {
      "keccak256": "0x79691db2e67fd2777c9de750e50d06caa65fae00921b021a5f088cabf616efe2",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://22c5ab0628442fba20d15b2de19018bd45f66b5abeb86597103c0da7daa6e5e7",
        "dweb:/ipfs/QmNtX4iWJCL9v3uwSVFkRQvZSrQBR5rGMPJEth7pQu95Qp"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/Constants.sol": {
      "keccak256": "0x2a6f27ec9f3de51ff89ed016f22ad2734bbf223bee397df2964058fd5403b5c7",
      "license": "MIT",
      "urls": [
        "bzz-raw://2d0674f182413ea6c9bc20715b97ef99a9c1686f4e544a1f9e712a91e2e11227",
        "dweb:/ipfs/QmWPuWgKWR2X1SRg1WouwwDncc2UWMhCijqHEX53xdm2mK"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/DataTypes.sol": {
      "keccak256": "0x20e27c31f2a34440377d8bdada88a9b1dfb4e5670a0ded60fab27db84d9992c3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://daaca9a4c5ce7d85bd48de19b140928d9ce0c2c548b701006dffa8c462814554",
        "dweb:/ipfs/QmeSvF8Jcr9qamn3oZaPkR3WZFsT66imPshhBiPaiE2Xkr"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/Errors.sol": {
      "keccak256": "0x9942037671b711319571a74146f19e134f1d8e704737db55d52bf2c4fcb6a4c7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a8d0cb8fe7360937a0082d81f3dbb5858bbf7b65f87acb9c967e5ea5c61e5a0a",
        "dweb:/ipfs/Qma1AEAhao8cA9JvScsQKfCEWaQiREwqAt9Np7xwwSrmyQ"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/Events.sol": {
      "keccak256": "0x2781bccf5985bacb82043b66d5f8339f77425a7327c32ac12b8744a28da71026",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a3022dfe85d6ac6efccab752693e11734eb3e58da9917b6ea4b34627f034a515",
        "dweb:/ipfs/QmQhPT3QjG7uDAZfQSLM6gp945GnHMAz1tTLtKwJo62hNr"
      ]
    },
    "contracts/zion-governance/contracts/spaces/libraries/ZionSpaceController.sol": {
      "keccak256": "0xc70869f3fbb9afaa6407777ac3aa30910dda2d850cdd5b5d816f04b2e412f073",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://3930a6b70e4064187a88ba9f537e11a42a8c103905f71401ffb1070db2de54cd",
        "dweb:/ipfs/QmfJQg46eNqkUxfhtZuV8k6nQfSsLm1SfJMwt1eW1JaWvZ"
      ]
    },
    "contracts/zion-governance/contracts/spaces/modules/EntitlementModuleBase.sol": {
      "keccak256": "0xd15c46d413bfd7dcf39b56c30d3026935d78baf6274ba58dd07486b60e293d41",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d147b7d9100e9b0e787a0e9a01f48bf4775a57df3cd95fb8c9c1e050dfd692a8",
        "dweb:/ipfs/QmbTLZn5hN719tfwJCXJqzHoJb6bieYGEW1zo3MMMxiYMh"
      ]
    },
    "contracts/zion-governance/contracts/spaces/modules/entitlements/UserGrantedEntitlementModule.sol": {
      "keccak256": "0xee6ff9604992be4566e5bcf694d1f230fb2ad244331f817658f270bfce0fdf52",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f93e68bf5b5cae2ae404d474b914ba0ffb110f0a7bb9ad20df05ccf01341a937",
        "dweb:/ipfs/QmYv948zEezq6keRFKHZufMfR8QhmJeEgxburNUDUdPSqi"
      ]
    },
    "contracts/zion-governance/contracts/spaces/storage/ZionSpaceManagerStorage.sol": {
      "keccak256": "0xb803ea2859a045b0ea238dbc7d243b53e6caeefbc6659503b136e5c8af68816b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f441b994a5d4589440f3361820b13cce1f13106ebb9b0bc502e784810ac223d7",
        "dweb:/ipfs/Qme9rkLmy8spsXxzajpnrbGP3hxJfSuGo4FUwLXKfXBPqY"
      ]
    },
    "lib/forge-std/src/console.sol": {
      "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
      "license": "MIT",
      "urls": [
        "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
        "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
      ]
    },
    "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "node_modules/@openzeppelin/contracts/interfaces/IERC165.sol": {
      "keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
      "license": "MIT",
      "urls": [
        "bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
        "dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}