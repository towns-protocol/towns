{
  "compiler": {
    "version": "0.8.17+commit.8df45f5f"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "AddRoleFailed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ChannelAlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ChannelDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementModuleNotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementNotWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidParameters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MissingOwnerPermission",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "PermissionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "RoleDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "RoleIsAssignedToEntitlement",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "previousAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "beacon",
            "type": "address"
          }
        ],
        "name": "BeaconUpgraded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint8",
            "name": "version",
            "type": "uint8"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "implementation",
            "type": "address"
          }
        ],
        "name": "Upgraded",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_permission",
            "type": "string"
          }
        ],
        "name": "addPermissionToRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_entitlement",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "addRoleToChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct DataTypes.Entitlement",
            "name": "_entitlement",
            "type": "tuple"
          }
        ],
        "name": "addRoleToEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "channels",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "channelsByHash",
        "outputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "channelId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "createdAt",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "disabled",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelName",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelNetworkId",
            "type": "string"
          },
          {
            "internalType": "uint256[]",
            "name": "roleIds",
            "type": "uint256[]"
          }
        ],
        "name": "createChannel",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_roleName",
            "type": "string"
          },
          {
            "internalType": "string[]",
            "name": "_permissions",
            "type": "string[]"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct DataTypes.Entitlement[]",
            "name": "_entitlements",
            "type": "tuple[]"
          }
        ],
        "name": "createRole",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "defaultEntitlements",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "disabled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "entitlements",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_channelHash",
            "type": "bytes32"
          }
        ],
        "name": "getChannelByHash",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "bytes32",
                "name": "channelId",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.Channel",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "getEntitlementIdsByRoleId",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getEntitlements",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "getPermissionsByRoleId",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "getRoleById",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Role",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getRoles",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Role[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "hasEntitlement",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_networkId",
            "type": "string"
          },
          {
            "internalType": "address[]",
            "name": "_entitlements",
            "type": "address[]"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToChannel",
        "outputs": [
          {
            "internalType": "bool",
            "name": "_entitled",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToSpace",
        "outputs": [
          {
            "internalType": "bool",
            "name": "_entitled",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes[]",
            "name": "data",
            "type": "bytes[]"
          }
        ],
        "name": "multicall",
        "outputs": [
          {
            "internalType": "bytes[]",
            "name": "results",
            "type": "bytes[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "networkId",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ownerRoleId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "proxiableUUID",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_permission",
            "type": "string"
          }
        ],
        "name": "removePermissionFromRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_entitlement",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRoleFromChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct DataTypes.Entitlement",
            "name": "_entitlement",
            "type": "tuple"
          }
        ],
        "name": "removeRoleFromEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "roleCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "rolesById",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "_disabled",
            "type": "bool"
          }
        ],
        "name": "setChannelAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_entitlement",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "_whitelist",
            "type": "bool"
          }
        ],
        "name": "setEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "setOwnerRoleId",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_disabled",
            "type": "bool"
          }
        ],
        "name": "setSpaceAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "token",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "tokenId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_channelName",
            "type": "string"
          }
        ],
        "name": "updateChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_roleName",
            "type": "string"
          }
        ],
        "name": "updateRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          }
        ],
        "name": "upgradeTo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "upgradeToAndCall",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addPermissionToRole(uint256,string)": {
          "params": {
            "permission": "the permission to add to the role",
            "roleId": "the roleId to add the permission to"
          }
        },
        "addRoleToChannel(string,address,uint256)": {
          "params": {
            "channelId": "the channelId to add the role to",
            "entitlement": "the address of the entitlement that we are adding the role to",
            "roleId": "the roleId to add to the channel"
          }
        },
        "addRoleToEntitlement(uint256,(address,bytes))": {
          "params": {
            "entitlement": "the address of the entitlement",
            "roleId": "the roleId to add to the entitlement"
          }
        },
        "constructor": {
          "custom:oz-upgrades-unsafe-allow": "constructor"
        },
        "createChannel(string,string,uint256[])": {
          "params": {
            "channelName": "the name of the channel",
            "channelNetworkId": "the network id of the channel linking it to the dendrite/casablanca protocol",
            "roleIds": "the roleIds to be set as the initial roles for the channel"
          },
          "returns": {
            "_0": "the channelId of the created channel"
          }
        },
        "createRole(string,string[],(address,bytes)[])": {
          "params": {
            "entitlements": "the initial entitlements to gate the role",
            "permissions": "the permissions to be set for the role",
            "roleName": "the name of the role"
          },
          "returns": {
            "_0": "the roleId of the created role"
          }
        },
        "getChannelByHash(bytes32)": {
          "params": {
            "channelHash": "the hashed channelId"
          },
          "returns": {
            "_0": "the Channel information"
          }
        },
        "getEntitlementIdsByRoleId(uint256)": {
          "params": {
            "roleId": "the roleId to fetch the entitlements for"
          },
          "returns": {
            "_0": "the entitlements for the role"
          }
        },
        "getEntitlements()": {
          "returns": {
            "_0": "entitlements array"
          }
        },
        "getPermissionsByRoleId(uint256)": {
          "params": {
            "roleId": "the roleId to fetch the permissions for"
          },
          "returns": {
            "_0": "permissions array for the role"
          }
        },
        "getRoleById(uint256)": {
          "params": {
            "roleId": "the roleId to fetch the role information for"
          },
          "returns": {
            "_0": "the role information"
          }
        },
        "initialize(string,string,address[],address,uint256)": {
          "params": {
            "modules": "the initial modules to be used by the space for gating",
            "name": "the name of the space",
            "networkId": "the network id of the space linking it to the dendrite/casablanca protocol"
          }
        },
        "isEntitledToChannel(string,address,string)": {
          "params": {
            "channelId": "the channelId to check the permission for",
            "permission": "the permission to check",
            "user": "the user to check the permission for"
          },
          "returns": {
            "_entitled": "whether the user is entitled to the permission in the channel"
          }
        },
        "isEntitledToSpace(address,string)": {
          "params": {
            "permission": "the permission to check",
            "user": "the user to check the permission for"
          },
          "returns": {
            "_entitled": "whether the user is entitled to the permission in the space"
          }
        },
        "owner()": {
          "returns": {
            "_0": "the address of the Space owner"
          }
        },
        "proxiableUUID()": {
          "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
        },
        "removePermissionFromRole(uint256,string)": {
          "params": {
            "permission": "the permission to remove from the role",
            "roleId": "the roleId to remove the permission from"
          }
        },
        "removeRole(uint256)": {
          "params": {
            "roleId": "the roleId to remove"
          }
        },
        "removeRoleFromChannel(string,address,uint256)": {
          "params": {
            "channelId": "the channelId to remove the role from",
            "entitlement": "the address of the entitlement that we are removing the role from",
            "roleId": "the roleId to remove from the channel"
          }
        },
        "removeRoleFromEntitlement(uint256,(address,bytes))": {
          "params": {
            "entitlement": "the address of the entitlement to remove",
            "roleId": "the roleId to remove the entitlement from"
          }
        },
        "setChannelAccess(string,bool)": {
          "params": {
            "channelId": "the channelId to set the access for",
            "disabled": "whether to make the channel disabled or not"
          }
        },
        "setEntitlement(address,bool)": {
          "params": {
            "entitlement": "the address of the new entitlement",
            "whitelist": "whether to set the entitlement as activated or not"
          }
        },
        "setOwnerRoleId(uint256)": {
          "params": {
            "roleId": "the roleId to be set as the owner role id"
          }
        },
        "setSpaceAccess(bool)": {
          "params": {
            "disabled": "whether to make the space disabled or not"
          }
        },
        "updateRole(uint256,string)": {
          "params": {
            "roleId": "the roleId to update",
            "roleName": "the new name of the role"
          }
        },
        "upgradeTo(address)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        },
        "upgradeToAndCall(address,bytes)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addPermissionToRole(uint256,string)": {
          "notice": "***** Permission Management *****adds a permission to a role by roleId"
        },
        "addRoleToChannel(string,address,uint256)": {
          "notice": "adds a role to a channel"
        },
        "addRoleToEntitlement(uint256,(address,bytes))": {
          "notice": "adds a role to an entitlement"
        },
        "createChannel(string,string,uint256[])": {
          "notice": "creates a new channel for the space"
        },
        "createRole(string,string[],(address,bytes)[])": {
          "notice": "creates a new role for the space"
        },
        "getChannelByHash(bytes32)": {
          "notice": "fetches the Channel information by the hashed channelId"
        },
        "getEntitlementIdsByRoleId(uint256)": {
          "notice": "***** Entitlement Management *****gets the entitlements for a given role"
        },
        "getEntitlements()": {
          "notice": "fetches all the entitlements for the space"
        },
        "getPermissionsByRoleId(uint256)": {
          "notice": "fetches the permissions for a role by roleId"
        },
        "getRoleById(uint256)": {
          "notice": "fetches the role information by roleId"
        },
        "getRoles()": {
          "notice": "***** Role Management *****fetches the all the created roles for the space"
        },
        "initialize(string,string,address[],address,uint256)": {
          "notice": "***** Space Management *****initializes a new Space"
        },
        "isEntitledToChannel(string,address,string)": {
          "notice": "checks if a user is entitled to a permission in a channel"
        },
        "isEntitledToSpace(address,string)": {
          "notice": "checks if a user is entitled to a permission in the space"
        },
        "owner()": {
          "notice": "fetches the Space owner"
        },
        "removePermissionFromRole(uint256,string)": {
          "notice": "removes a permission from a role by roleId"
        },
        "removeRole(uint256)": {
          "notice": "removes a role by roleId"
        },
        "removeRoleFromChannel(string,address,uint256)": {
          "notice": "removes a role from a channel"
        },
        "removeRoleFromEntitlement(uint256,(address,bytes))": {
          "notice": "removes an entitlement from the space"
        },
        "setChannelAccess(string,bool)": {
          "notice": "sets whether the channel is disabled or not"
        },
        "setEntitlement(address,bool)": {
          "notice": "sets a new entitlement for the space"
        },
        "setOwnerRoleId(uint256)": {
          "notice": "sets a created roleId to be the owner role id for the Space"
        },
        "setSpaceAccess(bool)": {
          "notice": "sets whether the space is disabled or not"
        },
        "updateRole(uint256,string)": {
          "notice": "updates a role name by roleId"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/core/spaces/Space.sol": "Space"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@opengsn/=node_modules/@opengsn/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":contracts/=contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":solmate/=lib/solmate/src/"
    ]
  },
  "sources": {
    "contracts/src/core/spaces/Space.sol": {
      "keccak256": "0x1721927b56e90a0cb8139c01e627a8617ef48eb58882e9d2cf40ae3afd9f42e9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4d4d8fbc21e28d918bf68fdc91d1543b3937c762a5bec3bdbc901db5a4177067",
        "dweb:/ipfs/QmWiYG8eR4aCdybPjXhcP3ycioCyn7RN8wYuxbgKRABivi"
      ]
    },
    "contracts/src/interfaces/IEntitlement.sol": {
      "keccak256": "0x05a317a8b059f6c79085102299c9e9cb706a8f3facdea86b8ed872831a77d192",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9771d94c5863ca975b15d3a8b6cfd3040a4573da31e4f08b38f5fe9418f0e2a8",
        "dweb:/ipfs/QmfBkooY6ahi6nYLnJmLwvkSdw7CuJfwfSnH187i27sX6o"
      ]
    },
    "contracts/src/interfaces/ISpace.sol": {
      "keccak256": "0x061935623fee614239ae36af6dc26cf183a252f11ad9a896a4db00f02d1d3871",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://19ab58f82b97404fcaa7201f7814263a7b89837f0799440bed3224cc7bf5dcc4",
        "dweb:/ipfs/QmSvuUGZ3WrSJTFHAHVx1q5nciHdsj2YLP4JxvA9ahmGy5"
      ]
    },
    "contracts/src/libraries/DataTypes.sol": {
      "keccak256": "0x237c717bcaf3aae77594766b6c556efe3d232bc91da78a2c9025e48b7e4a2b6b",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://cac72e2d89c882e54c0c6037a262ff1e1bb4018e5d9f88902a87b811f7f365cd",
        "dweb:/ipfs/QmYuBFtACWfw5L4EUT3dGXi6Ebd1dCnXXJ3srL6g9GEt7Z"
      ]
    },
    "contracts/src/libraries/Errors.sol": {
      "keccak256": "0xa58c2c12ba0d81501a37a360097b07288341c582efee3787179f7ec7edc0509a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9ef8c5a09ded0537b7c631ff38c1ee1a9eb6071cd2dfdcbbdbb8ff50fcf388ff",
        "dweb:/ipfs/QmTy1iNZfz69MCJwE1U9aDR4ZyKXujhmYUVrVjakSYFd8R"
      ]
    },
    "contracts/src/libraries/Events.sol": {
      "keccak256": "0xf85630e7cf615f44c0e40ae2bc54fe617c7fb0ed9f5b5f2be305c1b893929281",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://06c543e82bb8ac6121d0613cc405263cc6130563aae54cfa55a7958978664381",
        "dweb:/ipfs/QmV6z23bcZtTdeKxTeQZkym9syDXu1sd7mSjgiVDg1Nsnd"
      ]
    },
    "contracts/src/libraries/Permissions.sol": {
      "keccak256": "0x041510f19d4c4409f07a2371e53863f21c51d11f20d1c5d36898b25da80acfed",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://b3fdf833d428ec8bab778017fb475eb70ee652746058e46cd07c0da07dcb660f",
        "dweb:/ipfs/QmTVN4fe7FnrrL9o9DZbxZUwVbBTjrScybaGiW8V9oYhuR"
      ]
    },
    "contracts/src/libraries/Utils.sol": {
      "keccak256": "0x5aa3aee5134845cd64fbc2df36dc016b509524443156f3d7636339cf8463424b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6bf45246ccecdc97a6811cb211856d65d11be51cbda48640fab6875eafd21557",
        "dweb:/ipfs/QmV2N9CXHdErW8ZKLMXsyK6WgvSX9z177BhK2nnXFaEUAe"
      ]
    },
    "contracts/src/misc/MultiCaller.sol": {
      "keccak256": "0x327cfbd6b49c5baaef9ab213a1ca37f53dc3e232552d20af3d85946ef0d30872",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://7d790196392959f83a7e3949e469efdbe7c8179b2916f068392ef2b86c5da192",
        "dweb:/ipfs/QmSTcFLkpn147fi1GKpQmiYxCZyBzAY5xKzT9KxM7H91nk"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
      "keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
      "license": "MIT",
      "urls": [
        "bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
        "dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
      "license": "MIT",
      "urls": [
        "bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
        "dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
      "keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
      "license": "MIT",
      "urls": [
        "bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
        "dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "keccak256": "0xedc5eaa54866c6d0e8960d9fe8ea6f9052ba28686907f6886f83dfba41fa1549",
      "license": "MIT",
      "urls": [
        "bzz-raw://0b296244e62d13e87d8272c574fb58c22af02b262d74d7a8f642753522351bb0",
        "dweb:/ipfs/Qmcd3MfBWRE8EQt67AqgGGHviNum5aQ7JE7manH5nNtx4o"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "keccak256": "0xcf6837f68b5376c07f7b5130dc8de39f00f357f119113a82a15229bf2b96fdc5",
      "license": "MIT",
      "urls": [
        "bzz-raw://6be1e3e05f79a714c08a446a994dba2939203092d7aa97302d7b2ab157b437fb",
        "dweb:/ipfs/QmdgBbHNijVgApRQ9UM17qds6QdhTgXxKHUoLAswA6VNyH"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "keccak256": "0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0",
      "license": "MIT",
      "urls": [
        "bzz-raw://b189423f1102ff4487e9c59a65ec400b98cc4aeef478dac8272b482e9f5ad7de",
        "dweb:/ipfs/QmdpYHrzD8wPe5DMuEiWkXiVLsTkqD7C4tbBjWwkBQwJi2"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
      "license": "MIT",
      "urls": [
        "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
        "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
      "keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
      "license": "MIT",
      "urls": [
        "bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
        "dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0x41bbb2c41036ca64b2f6c9e973e8cfaa113ebc42af86702cd0d267f915a7e886",
      "license": "MIT",
      "urls": [
        "bzz-raw://6bf6699c55e82c7af6ae90b61ea9643ca0c905097da9a31269319f1b5a2a696a",
        "dweb:/ipfs/QmRJZa2UmWcRo6W8JnuomwzfjVtAS21QC8HKggxBhoPsU4"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}