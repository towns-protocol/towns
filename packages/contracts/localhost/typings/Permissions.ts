/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PermissionsInterface extends utils.Interface {
  functions: {
    "AddRemoveChannels()": FunctionFragment;
    "Ban()": FunctionFragment;
    "Invite()": FunctionFragment;
    "ModifyChannelDefaults()": FunctionFragment;
    "ModifyChannelPermissions()": FunctionFragment;
    "ModifyProfile()": FunctionFragment;
    "ModifySpacePermissions()": FunctionFragment;
    "Owner()": FunctionFragment;
    "PinMessage()": FunctionFragment;
    "Ping()": FunctionFragment;
    "Read()": FunctionFragment;
    "Redact()": FunctionFragment;
    "Upgrade()": FunctionFragment;
    "Write()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AddRemoveChannels"
      | "Ban"
      | "Invite"
      | "ModifyChannelDefaults"
      | "ModifyChannelPermissions"
      | "ModifyProfile"
      | "ModifySpacePermissions"
      | "Owner"
      | "PinMessage"
      | "Ping"
      | "Read"
      | "Redact"
      | "Upgrade"
      | "Write"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AddRemoveChannels",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Ban", values?: undefined): string;
  encodeFunctionData(functionFragment: "Invite", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ModifyChannelDefaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ModifyChannelPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ModifyProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ModifySpacePermissions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PinMessage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Ping", values?: undefined): string;
  encodeFunctionData(functionFragment: "Read", values?: undefined): string;
  encodeFunctionData(functionFragment: "Redact", values?: undefined): string;
  encodeFunctionData(functionFragment: "Upgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "Write", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AddRemoveChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Ban", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Invite", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ModifyChannelDefaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ModifyChannelPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ModifyProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ModifySpacePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PinMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Ping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Read", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Redact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Write", data: BytesLike): Result;

  events: {};
}

export interface Permissions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PermissionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AddRemoveChannels(overrides?: CallOverrides): Promise<[string]>;

    Ban(overrides?: CallOverrides): Promise<[string]>;

    Invite(overrides?: CallOverrides): Promise<[string]>;

    ModifyChannelDefaults(overrides?: CallOverrides): Promise<[string]>;

    ModifyChannelPermissions(overrides?: CallOverrides): Promise<[string]>;

    ModifyProfile(overrides?: CallOverrides): Promise<[string]>;

    ModifySpacePermissions(overrides?: CallOverrides): Promise<[string]>;

    Owner(overrides?: CallOverrides): Promise<[string]>;

    PinMessage(overrides?: CallOverrides): Promise<[string]>;

    Ping(overrides?: CallOverrides): Promise<[string]>;

    Read(overrides?: CallOverrides): Promise<[string]>;

    Redact(overrides?: CallOverrides): Promise<[string]>;

    Upgrade(overrides?: CallOverrides): Promise<[string]>;

    Write(overrides?: CallOverrides): Promise<[string]>;
  };

  AddRemoveChannels(overrides?: CallOverrides): Promise<string>;

  Ban(overrides?: CallOverrides): Promise<string>;

  Invite(overrides?: CallOverrides): Promise<string>;

  ModifyChannelDefaults(overrides?: CallOverrides): Promise<string>;

  ModifyChannelPermissions(overrides?: CallOverrides): Promise<string>;

  ModifyProfile(overrides?: CallOverrides): Promise<string>;

  ModifySpacePermissions(overrides?: CallOverrides): Promise<string>;

  Owner(overrides?: CallOverrides): Promise<string>;

  PinMessage(overrides?: CallOverrides): Promise<string>;

  Ping(overrides?: CallOverrides): Promise<string>;

  Read(overrides?: CallOverrides): Promise<string>;

  Redact(overrides?: CallOverrides): Promise<string>;

  Upgrade(overrides?: CallOverrides): Promise<string>;

  Write(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AddRemoveChannels(overrides?: CallOverrides): Promise<string>;

    Ban(overrides?: CallOverrides): Promise<string>;

    Invite(overrides?: CallOverrides): Promise<string>;

    ModifyChannelDefaults(overrides?: CallOverrides): Promise<string>;

    ModifyChannelPermissions(overrides?: CallOverrides): Promise<string>;

    ModifyProfile(overrides?: CallOverrides): Promise<string>;

    ModifySpacePermissions(overrides?: CallOverrides): Promise<string>;

    Owner(overrides?: CallOverrides): Promise<string>;

    PinMessage(overrides?: CallOverrides): Promise<string>;

    Ping(overrides?: CallOverrides): Promise<string>;

    Read(overrides?: CallOverrides): Promise<string>;

    Redact(overrides?: CallOverrides): Promise<string>;

    Upgrade(overrides?: CallOverrides): Promise<string>;

    Write(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    AddRemoveChannels(overrides?: CallOverrides): Promise<BigNumber>;

    Ban(overrides?: CallOverrides): Promise<BigNumber>;

    Invite(overrides?: CallOverrides): Promise<BigNumber>;

    ModifyChannelDefaults(overrides?: CallOverrides): Promise<BigNumber>;

    ModifyChannelPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    ModifyProfile(overrides?: CallOverrides): Promise<BigNumber>;

    ModifySpacePermissions(overrides?: CallOverrides): Promise<BigNumber>;

    Owner(overrides?: CallOverrides): Promise<BigNumber>;

    PinMessage(overrides?: CallOverrides): Promise<BigNumber>;

    Ping(overrides?: CallOverrides): Promise<BigNumber>;

    Read(overrides?: CallOverrides): Promise<BigNumber>;

    Redact(overrides?: CallOverrides): Promise<BigNumber>;

    Upgrade(overrides?: CallOverrides): Promise<BigNumber>;

    Write(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AddRemoveChannels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Ban(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Invite(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ModifyChannelDefaults(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ModifyChannelPermissions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ModifyProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ModifySpacePermissions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PinMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Ping(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Read(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Redact(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Upgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Write(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
