/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type ExternalTokenStruct = {
    contractAddress: PromiseOrValue<string>;
    quantity: PromiseOrValue<BigNumberish>;
    isSingleToken: PromiseOrValue<boolean>;
    tokenIds: PromiseOrValue<BigNumberish>[];
  };

  export type ExternalTokenStructOutput = [
    string,
    BigNumber,
    boolean,
    BigNumber[]
  ] & {
    contractAddress: string;
    quantity: BigNumber;
    isSingleToken: boolean;
    tokenIds: BigNumber[];
  };

  export type CreateSpaceExtraEntitlementsStruct = {
    roleName: PromiseOrValue<string>;
    permissions: PromiseOrValue<string>[];
    tokens: DataTypes.ExternalTokenStruct[];
    users: PromiseOrValue<string>[];
  };

  export type CreateSpaceExtraEntitlementsStructOutput = [
    string,
    string[],
    DataTypes.ExternalTokenStructOutput[],
    string[]
  ] & {
    roleName: string;
    permissions: string[];
    tokens: DataTypes.ExternalTokenStructOutput[];
    users: string[];
  };
}

export interface SpaceFactoryInterface extends utils.Interface {
  functions: {
    "SPACE_IMPLEMENTATION_ADDRESS()": FunctionFragment;
    "SPACE_TOKEN_ADDRESS()": FunctionFragment;
    "TOKEN_IMPLEMENTATION_ADDRESS()": FunctionFragment;
    "USER_IMPLEMENTATION_ADDRESS()": FunctionFragment;
    "addOwnerPermissions(string[])": FunctionFragment;
    "createSpace(string,string,string,string[],(string,string[],(address,uint256,bool,uint256[])[],address[]))": FunctionFragment;
    "getOwnerPermissions()": FunctionFragment;
    "initialize(address,address,address,address,string[])": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerPermissions(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "spaceByHash(bytes32)": FunctionFragment;
    "tokenByHash(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateImplementations(address,address,address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SPACE_IMPLEMENTATION_ADDRESS"
      | "SPACE_TOKEN_ADDRESS"
      | "TOKEN_IMPLEMENTATION_ADDRESS"
      | "USER_IMPLEMENTATION_ADDRESS"
      | "addOwnerPermissions"
      | "createSpace"
      | "getOwnerPermissions"
      | "initialize"
      | "owner"
      | "ownerPermissions"
      | "proxiableUUID"
      | "renounceOwnership"
      | "spaceByHash"
      | "tokenByHash"
      | "transferOwnership"
      | "updateImplementations"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SPACE_IMPLEMENTATION_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPACE_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_IMPLEMENTATION_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USER_IMPLEMENTATION_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOwnerPermissions",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createSpace",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      DataTypes.CreateSpaceExtraEntitlementsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerPermissions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spaceByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateImplementations",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "SPACE_IMPLEMENTATION_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPACE_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_IMPLEMENTATION_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USER_IMPLEMENTATION_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spaceByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SpaceFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpaceFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SPACE_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    SPACE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    USER_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    addOwnerPermissions(
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSpace(
      spaceName: PromiseOrValue<string>,
      spaceNetworkId: PromiseOrValue<string>,
      spaceMetadata: PromiseOrValue<string>,
      _everyonePermissions: PromiseOrValue<string>[],
      _extraEntitlements: DataTypes.CreateSpaceExtraEntitlementsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwnerPermissions(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      _spaceToken: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerPermissions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spaceByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateImplementations(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  SPACE_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

  SPACE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  TOKEN_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

  USER_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

  addOwnerPermissions(
    _permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSpace(
    spaceName: PromiseOrValue<string>,
    spaceNetworkId: PromiseOrValue<string>,
    spaceMetadata: PromiseOrValue<string>,
    _everyonePermissions: PromiseOrValue<string>[],
    _extraEntitlements: DataTypes.CreateSpaceExtraEntitlementsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwnerPermissions(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _space: PromiseOrValue<string>,
    _tokenEntitlement: PromiseOrValue<string>,
    _userEntitlement: PromiseOrValue<string>,
    _spaceToken: PromiseOrValue<string>,
    _permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerPermissions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spaceByHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenByHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateImplementations(
    _space: PromiseOrValue<string>,
    _tokenEntitlement: PromiseOrValue<string>,
    _userEntitlement: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SPACE_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

    SPACE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    TOKEN_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

    USER_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

    addOwnerPermissions(
      _permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createSpace(
      spaceName: PromiseOrValue<string>,
      spaceNetworkId: PromiseOrValue<string>,
      spaceMetadata: PromiseOrValue<string>,
      _everyonePermissions: PromiseOrValue<string>[],
      _extraEntitlements: DataTypes.CreateSpaceExtraEntitlementsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwnerPermissions(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      _spaceToken: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerPermissions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    spaceByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateImplementations(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    SPACE_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    SPACE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    USER_IMPLEMENTATION_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    addOwnerPermissions(
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSpace(
      spaceName: PromiseOrValue<string>,
      spaceNetworkId: PromiseOrValue<string>,
      spaceMetadata: PromiseOrValue<string>,
      _everyonePermissions: PromiseOrValue<string>[],
      _extraEntitlements: DataTypes.CreateSpaceExtraEntitlementsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwnerPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      _spaceToken: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerPermissions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spaceByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateImplementations(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SPACE_IMPLEMENTATION_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SPACE_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_IMPLEMENTATION_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USER_IMPLEMENTATION_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addOwnerPermissions(
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSpace(
      spaceName: PromiseOrValue<string>,
      spaceNetworkId: PromiseOrValue<string>,
      spaceMetadata: PromiseOrValue<string>,
      _everyonePermissions: PromiseOrValue<string>[],
      _extraEntitlements: DataTypes.CreateSpaceExtraEntitlementsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwnerPermissions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      _spaceToken: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerPermissions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spaceByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateImplementations(
      _space: PromiseOrValue<string>,
      _tokenEntitlement: PromiseOrValue<string>,
      _userEntitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
