/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type CreateChannelDataStruct = {
    channelName: PromiseOrValue<string>;
    channelNetworkId: PromiseOrValue<string>;
    roleIds: PromiseOrValue<BigNumberish>[];
  };

  export type CreateChannelDataStructOutput = [string, string, BigNumber[]] & {
    channelName: string;
    channelNetworkId: string;
    roleIds: BigNumber[];
  };

  export type ChannelStruct = {
    name: PromiseOrValue<string>;
    channelId: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    disabled: PromiseOrValue<boolean>;
  };

  export type ChannelStructOutput = [string, string, BigNumber, boolean] & {
    name: string;
    channelId: string;
    createdAt: BigNumber;
    disabled: boolean;
  };

  export type RoleStruct = {
    roleId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type RoleStructOutput = [BigNumber, string] & {
    roleId: BigNumber;
    name: string;
  };
}

export interface SpaceInterface extends utils.Interface {
  functions: {
    "addPermissionToRole(uint256,string)": FunctionFragment;
    "addRoleToChannel(string,address,uint256)": FunctionFragment;
    "addRoleToEntitlement(address,uint256,bytes)": FunctionFragment;
    "channels(uint256)": FunctionFragment;
    "channelsByHash(bytes32)": FunctionFragment;
    "createChannel((string,string,uint256[]))": FunctionFragment;
    "createRole(string,string[])": FunctionFragment;
    "entitlements(uint256)": FunctionFragment;
    "getChannelByHash(bytes32)": FunctionFragment;
    "getEntitlements()": FunctionFragment;
    "getPermissionsByRoleId(uint256)": FunctionFragment;
    "getRoleById(uint256)": FunctionFragment;
    "getRoles()": FunctionFragment;
    "hasEntitlement(address)": FunctionFragment;
    "initialize(string,string,address[])": FunctionFragment;
    "isEntitled(address,string)": FunctionFragment;
    "isEntitled(string,address,string)": FunctionFragment;
    "name()": FunctionFragment;
    "networkId()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerRoleId()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removePermissionFromRole(uint256,string)": FunctionFragment;
    "removeRole(uint256)": FunctionFragment;
    "removeRoleFromChannel(string,address,uint256)": FunctionFragment;
    "removeRoleFromEntitlement(address,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roleId()": FunctionFragment;
    "rolesById(uint256)": FunctionFragment;
    "setChannelAccess(string,bool)": FunctionFragment;
    "setEntitlement(address,bool)": FunctionFragment;
    "setOwnerRoleId(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPermissionToRole"
      | "addRoleToChannel"
      | "addRoleToEntitlement"
      | "channels"
      | "channelsByHash"
      | "createChannel"
      | "createRole"
      | "entitlements"
      | "getChannelByHash"
      | "getEntitlements"
      | "getPermissionsByRoleId"
      | "getRoleById"
      | "getRoles"
      | "hasEntitlement"
      | "initialize"
      | "isEntitled(address,string)"
      | "isEntitled(string,address,string)"
      | "name"
      | "networkId"
      | "owner"
      | "ownerRoleId"
      | "proxiableUUID"
      | "removePermissionFromRole"
      | "removeRole"
      | "removeRoleFromChannel"
      | "removeRoleFromEntitlement"
      | "renounceOwnership"
      | "roleId"
      | "rolesById"
      | "setChannelAccess"
      | "setEntitlement"
      | "setOwnerRoleId"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPermissionToRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleToChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleToEntitlement",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "channels",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "channelsByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createChannel",
    values: [DataTypes.CreateChannelDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "entitlements",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionsByRoleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasEntitlement",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntitled(address,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntitled(string,address,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "networkId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerRoleId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionFromRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoleFromChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoleFromEntitlement",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rolesById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntitlement",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerRoleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPermissionToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleToChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleToEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "channels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "channelsByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entitlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionsByRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEntitled(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEntitled(string,address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "networkId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRoleFromChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRoleFromEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rolesById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChannelAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Space extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPermissionToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoleToEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        name: string;
        channelId: string;
        createdAt: BigNumber;
        disabled: boolean;
      }
    >;

    createChannel(
      _info: DataTypes.CreateChannelDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ChannelStructOutput]>;

    getEntitlements(overrides?: CallOverrides): Promise<[string[]]>;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RoleStructOutput]>;

    getRoles(
      overrides?: CallOverrides
    ): Promise<[DataTypes.RoleStructOutput[]]>;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "isEntitled(address,string)"(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _entitled: boolean }>;

    "isEntitled(string,address,string)"(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _entitled: boolean }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    networkId(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerRoleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removePermissionFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRoleFromEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { roleId: BigNumber; name: string }>;

    setChannelAccess(
      _channelId: PromiseOrValue<string>,
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEntitlement(
      _entitlement: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPermissionToRole(
    _roleId: PromiseOrValue<BigNumberish>,
    _permission: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoleToChannel(
    _channelId: PromiseOrValue<string>,
    _entitlement: PromiseOrValue<string>,
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoleToEntitlement(
    _entitlement: PromiseOrValue<string>,
    _roleId: PromiseOrValue<BigNumberish>,
    _entitlementData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  channels(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  channelsByHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      name: string;
      channelId: string;
      createdAt: BigNumber;
      disabled: boolean;
    }
  >;

  createChannel(
    _info: DataTypes.CreateChannelDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRole(
    _roleName: PromiseOrValue<string>,
    _permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entitlements(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChannelByHash(
    _channelHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ChannelStructOutput>;

  getEntitlements(overrides?: CallOverrides): Promise<string[]>;

  getPermissionsByRoleId(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoleById(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RoleStructOutput>;

  getRoles(overrides?: CallOverrides): Promise<DataTypes.RoleStructOutput[]>;

  hasEntitlement(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _name: PromiseOrValue<string>,
    _networkId: PromiseOrValue<string>,
    _entitlements: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "isEntitled(address,string)"(
    _user: PromiseOrValue<string>,
    _permission: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isEntitled(string,address,string)"(
    _channelId: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _permission: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  networkId(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerRoleId(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removePermissionFromRole(
    _roleId: PromiseOrValue<BigNumberish>,
    _permission: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRole(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRoleFromChannel(
    _channelId: PromiseOrValue<string>,
    _entitlement: PromiseOrValue<string>,
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRoleFromEntitlement(
    _entitlement: PromiseOrValue<string>,
    _roleId: PromiseOrValue<BigNumberish>,
    _entitlementData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleId(overrides?: CallOverrides): Promise<BigNumber>;

  rolesById(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { roleId: BigNumber; name: string }>;

  setChannelAccess(
    _channelId: PromiseOrValue<string>,
    _disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEntitlement(
    _entitlement: PromiseOrValue<string>,
    _whitelist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwnerRoleId(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPermissionToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRoleToEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        name: string;
        channelId: string;
        createdAt: BigNumber;
        disabled: boolean;
      }
    >;

    createChannel(
      _info: DataTypes.CreateChannelDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ChannelStructOutput>;

    getEntitlements(overrides?: CallOverrides): Promise<string[]>;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RoleStructOutput>;

    getRoles(overrides?: CallOverrides): Promise<DataTypes.RoleStructOutput[]>;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "isEntitled(address,string)"(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isEntitled(string,address,string)"(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    networkId(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerRoleId(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removePermissionFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRoleFromEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roleId(overrides?: CallOverrides): Promise<BigNumber>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { roleId: BigNumber; name: string }>;

    setChannelAccess(
      _channelId: PromiseOrValue<string>,
      _disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntitlement(
      _entitlement: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    addPermissionToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoleToEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createChannel(
      _info: DataTypes.CreateChannelDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntitlements(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "isEntitled(address,string)"(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEntitled(string,address,string)"(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    networkId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerRoleId(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removePermissionFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRoleFromEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleId(overrides?: CallOverrides): Promise<BigNumber>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChannelAccess(
      _channelId: PromiseOrValue<string>,
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEntitlement(
      _entitlement: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPermissionToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoleToEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createChannel(
      _info: DataTypes.CreateChannelDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntitlements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "isEntitled(address,string)"(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEntitled(string,address,string)"(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerRoleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePermissionFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permission: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRoleFromEntitlement(
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlementData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChannelAccess(
      _channelId: PromiseOrValue<string>,
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEntitlement(
      _entitlement: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
