/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Events, EventsInterface } from "../../libraries/Events";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceNetworkId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "string",
        name: "channelNetworkId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "CreateChannel",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "string",
        name: "roleName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "CreateRole",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "string",
        name: "roleName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "CreateRoleWithEntitlementData",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "spaceNetworkId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "CreateSpace",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "entitlementAddress",
        type: "address",
      },
    ],
    name: "DefaultEntitlementSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "entitlementAddress",
        type: "address",
      },
    ],
    name: "EntitlementModuleAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "entitlementAddress",
        type: "address",
      },
    ],
    name: "EntitlementModuleRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updater",
        type: "address",
      },
    ],
    name: "ModifyRoleWithEntitlementData",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updater",
        type: "address",
      },
    ],
    name: "RemoveRole",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceNetworkId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "string",
        name: "channelNetworkId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "disabled",
        type: "bool",
      },
    ],
    name: "SetChannelAccess",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceNetworkId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "disabled",
        type: "bool",
      },
    ],
    name: "SetSpaceAccess",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "spaceNFTAddress",
        type: "address",
      },
    ],
    name: "SpaceNFTAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updater",
        type: "address",
      },
    ],
    name: "UpdateRole",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "spaceNetworkId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "entitlementAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "whitelist",
        type: "bool",
      },
    ],
    name: "WhitelistEntitlementModule",
    type: "event",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202aad24327b142cac2d3848d371b8250fd86c145aa1ec73fe25bfd9c4810e6ce564736f6c63430008110033";

type EventsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EventsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Events__factory extends ContractFactory {
  constructor(...args: EventsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Events> {
    return super.deploy(overrides || {}) as Promise<Events>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Events {
    return super.attach(address) as Events;
  }
  override connect(signer: Signer): Events__factory {
    return super.connect(signer) as Events__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventsInterface {
    return new utils.Interface(_abi) as EventsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Events {
    return new Contract(address, _abi, signerOrProvider) as Events;
  }
}
