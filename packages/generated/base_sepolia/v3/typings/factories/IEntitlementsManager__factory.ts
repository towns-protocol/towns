/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEntitlementsManager,
  IEntitlementsManagerInterface,
} from "../IEntitlementsManager";

const _abi = [
  {
    type: "function",
    name: "addEntitlementModule",
    inputs: [
      {
        name: "entitlement",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "addImmutableEntitlements",
    inputs: [
      {
        name: "entitlements",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getEntitlement",
    inputs: [
      {
        name: "entitlement",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "entitlements",
        type: "tuple",
        internalType: "struct IEntitlementsManagerBase.Entitlement",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "moduleAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "moduleType",
            type: "string",
            internalType: "string",
          },
          {
            name: "isImmutable",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getEntitlements",
    inputs: [],
    outputs: [
      {
        name: "entitlements",
        type: "tuple[]",
        internalType: "struct IEntitlementsManagerBase.Entitlement[]",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "moduleAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "moduleType",
            type: "string",
            internalType: "string",
          },
          {
            name: "isImmutable",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isEntitledToChannel",
    inputs: [
      {
        name: "channelId",
        type: "string",
        internalType: "string",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
      {
        name: "permission",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isEntitledToTown",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
      {
        name: "permission",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removeEntitlementModule",
    inputs: [
      {
        name: "entitlement",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

export class IEntitlementsManager__factory {
  static readonly abi = _abi;
  static createInterface(): IEntitlementsManagerInterface {
    return new utils.Interface(_abi) as IEntitlementsManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEntitlementsManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IEntitlementsManager;
  }
}
