/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  StreamRegistry,
  StreamRegistryInterface,
} from "../StreamRegistry";

const _abi = [
  {
    type: "function",
    name: "allocateStream",
    inputs: [
      {
        name: "newStream",
        type: "tuple",
        internalType: "struct StreamRegistry.Stream",
        components: [
          {
            name: "streamId",
            type: "string",
            internalType: "string",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "genesisMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "errAlreadyExists",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "errNotFound",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "errOutOfBounds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStream",
    inputs: [
      {
        name: "_streamId",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct StreamRegistry.Stream",
        components: [
          {
            name: "streamId",
            type: "string",
            internalType: "string",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "genesisMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStreamByIndex",
    inputs: [
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct StreamRegistry.Stream",
        components: [
          {
            name: "streamId",
            type: "string",
            internalType: "string",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "genesisMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStreamsLength",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610aca806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638a3c9ed11161005b5780638a3c9ed1146100cf578063d16248f914610108578063d2bc97d614610135578063d340882f1461015d57600080fd5b80635e587d7a1461008257806368b454df146100ab57806380e8ecb5146100be575b600080fd5b6100956100903660046106f3565b610172565b6040516100a29190610776565b60405180910390f35b6100956100b93660046107f4565b61032a565b6000546040519081526020016100a2565b6100fb6040518060400160405280600d81526020016c4f55545f4f465f424f554e445360981b81525081565b6040516100a2919061080d565b6100fb6040518060400160405280600e81526020016d414c52454144595f45584953545360901b81525081565b6100fb604051806040016040528060098152602001681393d517d193d5539160ba1b81525081565b61017061016b366004610827565b6104bf565b005b60408051606080820183528082526020808301919091526000828401819052845185830120808252600183529084902054845180860190955260098552681393d517d193d5539160ba1b928501929092529192816101ec5760405162461bcd60e51b81526004016101e3919061080d565b60405180910390fd5b5060006101fa600183610942565b8154811061020a5761020a610969565b90600052602060002090600302016040518060600160405290816000820180546102339061097f565b80601f016020809104026020016040519081016040528092919081815260200182805461025f9061097f565b80156102ac5780601f10610281576101008083540402835291602001916102ac565b820191906000526020600020905b81548152906001019060200180831161028f57829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561030e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102f0575b5050505050815260200160028201548152505092505050919050565b6040805160608082018352808252602082015260009181019190915260005460408051808201909152600d81526c4f55545f4f465f424f554e445360981b602082015290831061038d5760405162461bcd60e51b81526004016101e3919061080d565b50600082815481106103a1576103a1610969565b90600052602060002090600302016040518060600160405290816000820180546103ca9061097f565b80601f01602080910402602001604051908101604052809291908181526020018280546103f69061097f565b80156104435780601f1061041857610100808354040283529160200191610443565b820191906000526020600020905b81548152906001019060200180831161042657829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156104a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610487575b505050505081526020016002820154815250509050919050565b80518051602091820120600081815260018352604090819020548151808301909252600e82526d414c52454144595f45584953545360901b9382019390935290911561051e5760405162461bcd60e51b81526004016101e3919061080d565b5060008054600181018255908052825183916003027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019081906105629082610a0a565b50602082810151805161057b9260018501920190610599565b50604091820151600290910155600080549281526001602052205550565b8280548282559060005260206000209081019282156105ee579160200282015b828111156105ee57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906105b9565b506105fa9291506105fe565b5090565b5b808211156105fa57600081556001016105ff565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561064c5761064c610613565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561067b5761067b610613565b604052919050565b600082601f83011261069457600080fd5b813567ffffffffffffffff8111156106ae576106ae610613565b6106c1601f8201601f1916602001610652565b8181528460208386010111156106d657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561070557600080fd5b813567ffffffffffffffff81111561071c57600080fd5b61072884828501610683565b949350505050565b6000815180845260005b818110156107565760208185018101518683018201520161073a565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080835283516060828501526107926080850182610730565b85830151858203601f19016040870152805180835290840192506000918401905b808310156107dc5783516001600160a01b031682529284019260019290920191908401906107b3565b50604087015160608701528094505050505092915050565b60006020828403121561080657600080fd5b5035919050565b6020815260006108206020830184610730565b9392505050565b6000602080838503121561083a57600080fd5b823567ffffffffffffffff8082111561085257600080fd5b908401906060828703121561086657600080fd5b61086e610629565b82358281111561087d57600080fd5b61088988828601610683565b825250838301358281111561089d57600080fd5b8301601f810188136108ae57600080fd5b8035838111156108c0576108c0610613565b8060051b93506108d1868501610652565b818152938201860193868101908a8611156108eb57600080fd5b928701925b8584101561092257833592506001600160a01b03831683146109125760008081fd5b82825292870192908701906108f0565b808886015250505050604083013560408201528094505050505092915050565b8181038181111561096357634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061099357607f821691505b6020821081036109b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610a05576000816000526020600020601f850160051c810160208610156109e25750805b601f850160051c820191505b81811015610a01578281556001016109ee565b5050505b505050565b815167ffffffffffffffff811115610a2457610a24610613565b610a3881610a32845461097f565b846109b9565b602080601f831160018114610a6d5760008415610a555750858301515b600019600386901b1c1916600185901b178555610a01565b600085815260208120601f198616915b82811015610a9c57888601518255948401946001909101908401610a7d565b5085821015610aba5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056";

type StreamRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StreamRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StreamRegistry__factory extends ContractFactory {
  constructor(...args: StreamRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StreamRegistry> {
    return super.deploy(overrides || {}) as Promise<StreamRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StreamRegistry {
    return super.attach(address) as StreamRegistry;
  }
  override connect(signer: Signer): StreamRegistry__factory {
    return super.connect(signer) as StreamRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StreamRegistryInterface {
    return new utils.Interface(_abi) as StreamRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StreamRegistry {
    return new Contract(address, _abi, signerOrProvider) as StreamRegistry;
  }
}
