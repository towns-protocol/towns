/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IRiverRegistry,
  IRiverRegistryInterface,
} from "../IRiverRegistry";

const _abi = [
  {
    type: "function",
    name: "allocateStream",
    inputs: [
      {
        name: "streamId",
        type: "string",
        internalType: "string",
      },
      {
        name: "nodes",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "genesisMiniblockHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "genesisMiniblock",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approveOperator",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAllNodeAddresses",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllNodes",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct IRiverRegistryBase.Node[]",
        components: [
          {
            name: "nodeAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "url",
            type: "string",
            internalType: "string",
          },
          {
            name: "status",
            type: "uint8",
            internalType: "enum IRiverRegistryBase.NodeStatus",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllStreamIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllStreams",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct IRiverRegistryBase.Stream[]",
        components: [
          {
            name: "streamId",
            type: "string",
            internalType: "string",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "genesisMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "genesisMiniblock",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "lastMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastMiniblockNum",
            type: "uint64",
            internalType: "uint64",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getNode",
    inputs: [
      {
        name: "nodeAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IRiverRegistryBase.Node",
        components: [
          {
            name: "nodeAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "url",
            type: "string",
            internalType: "string",
          },
          {
            name: "status",
            type: "uint8",
            internalType: "enum IRiverRegistryBase.NodeStatus",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getNodeCount",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStream",
    inputs: [
      {
        name: "streamIdHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IRiverRegistryBase.Stream",
        components: [
          {
            name: "streamId",
            type: "string",
            internalType: "string",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "genesisMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "genesisMiniblock",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "lastMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastMiniblockNum",
            type: "uint64",
            internalType: "uint64",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStreamCount",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isOperator",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerNode",
    inputs: [
      {
        name: "nodeAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "url",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "removeOperator",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setStreamLastMiniblock",
    inputs: [
      {
        name: "streamIdHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "lastMiniblockHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "lastMiniblockNum",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "NodeAdded",
    inputs: [
      {
        name: "nodeAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "url",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "status",
        type: "uint8",
        indexed: false,
        internalType: "enum IRiverRegistryBase.NodeStatus",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NodeStatusUpdated",
    inputs: [
      {
        name: "nodeAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "status",
        type: "uint8",
        indexed: false,
        internalType: "enum IRiverRegistryBase.NodeStatus",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NodeUrlUpdated",
    inputs: [
      {
        name: "nodeAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "url",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorAdded",
    inputs: [
      {
        name: "operatorAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorRemoved",
    inputs: [
      {
        name: "operatorAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StreamAllocated",
    inputs: [
      {
        name: "streamId",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "nodes",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
      {
        name: "genesisMiniblockHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StreamLastMiniblockUpdated",
    inputs: [
      {
        name: "streamId",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "lastMiniblockHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "lastMiniblockNum",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
] as const;

export class IRiverRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IRiverRegistryInterface {
    return new utils.Interface(_abi) as IRiverRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRiverRegistry {
    return new Contract(address, _abi, signerOrProvider) as IRiverRegistry;
  }
}
