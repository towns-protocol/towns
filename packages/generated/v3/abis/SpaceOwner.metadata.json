{
  "compiler": {
    "version": "0.8.23+commit.f704f362"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "AlreadyDisabled",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "AlreadyEnabled",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ApprovalCallerNotOwnerNorApproved",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ApprovalQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "BalanceQueryForZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ECDSAInvalidSignature",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "length",
            "type": "uint256"
          }
        ],
        "name": "ECDSAInvalidSignatureLength",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ],
        "name": "ECDSAInvalidSignatureS",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "GuardianEnabled",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initializable_AlreadyInitialized",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_InInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_NotInInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_AlreadySupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_NotSupported",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "currentNonce",
            "type": "uint256"
          }
        ],
        "name": "InvalidAccountNonce",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintERC2309QuantityExceedsLimit",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintToZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintZeroQuantity",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotExternalAccount",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Ownable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Ownable__ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OwnerQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OwnershipNotInitializedForExtraData",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "bits",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "SafeCastOverflowedUintDowncast",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceOwner__OnlyFactoryAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceOwner__OnlySpaceOwnerAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferCallerNotOwnerNorApproved",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferFromIncorrectOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferToNonERC721ReceiverImplementer",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferToZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "URIQueryForNonexistentToken",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Validator__InvalidAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Validator__InvalidStringLength",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "fromTokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "toTokenId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "name": "ConsecutiveTransfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "delegator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "fromDelegate",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "toDelegate",
            "type": "address"
          }
        ],
        "name": "DelegateChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "delegate",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "previousBalance",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newBalance",
            "type": "uint256"
          }
        ],
        "name": "DelegateVotesChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "EIP712DomainChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "bool",
            "name": "enabled",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "cooldown",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "GuardianUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "factory",
            "type": "address"
          }
        ],
        "name": "SpaceOwner__SetFactory",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "space",
            "type": "address"
          }
        ],
        "name": "SpaceOwner__UpdateSpace",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "CLOCK_MODE",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DOMAIN_SEPARATOR",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "result",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name_",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol_",
            "type": "string"
          }
        ],
        "name": "__ERC721A_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "version",
            "type": "string"
          }
        ],
        "name": "__SpaceOwner_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "clock",
        "outputs": [
          {
            "internalType": "uint48",
            "name": "",
            "type": "uint48"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          }
        ],
        "name": "delegate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "expiry",
            "type": "uint256"
          },
          {
            "internalType": "uint8",
            "name": "v",
            "type": "uint8"
          },
          {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ],
        "name": "delegateBySig",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "delegates",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "eip712Domain",
        "outputs": [
          {
            "internalType": "bytes1",
            "name": "fields",
            "type": "bytes1"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "version",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "chainId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "verifyingContract",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "salt",
            "type": "bytes32"
          },
          {
            "internalType": "uint256[]",
            "name": "extensions",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFactory",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "timepoint",
            "type": "uint256"
          }
        ],
        "name": "getPastTotalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "timepoint",
            "type": "uint256"
          }
        ],
        "name": "getPastVotes",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "space",
            "type": "address"
          }
        ],
        "name": "getSpaceInfo",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "uri",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "networkId",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              }
            ],
            "internalType": "struct ISpaceOwnerBase.Space",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "getVotes",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "networkId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "uri",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "space",
            "type": "address"
          }
        ],
        "name": "mintSpace",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "nextTokenId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "nonces",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "result",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "factory",
            "type": "address"
          }
        ],
        "name": "setFactory",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "space",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "uri",
            "type": "string"
          }
        ],
        "name": "updateSpaceInfo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "errors": {
        "ECDSAInvalidSignature()": [
          {
            "details": "The signature derives the `address(0)`."
          }
        ],
        "ECDSAInvalidSignatureLength(uint256)": [
          {
            "details": "The signature has an invalid length."
          }
        ],
        "ECDSAInvalidSignatureS(bytes32)": [
          {
            "details": "The signature has an S value that is in the upper half order."
          }
        ],
        "InvalidAccountNonce(address,uint256)": [
          {
            "details": "The nonce used for an `account` is not the expected current nonce."
          }
        ],
        "SafeCastOverflowedUintDowncast(uint8,uint256)": [
          {
            "details": "Value doesn't fit in an uint of `bits` size."
          }
        ]
      },
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
        },
        "ApprovalForAll(address,address,bool)": {
          "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
        },
        "ConsecutiveTransfer(uint256,uint256,address,address)": {
          "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
        },
        "DelegateChanged(address,address,address)": {
          "details": "Emitted when an account changes their delegate."
        },
        "DelegateVotesChanged(address,uint256,uint256)": {
          "details": "Emitted when a token transfer or delegate change results in changes to a delegate's number of votes."
        },
        "EIP712DomainChanged()": {
          "details": "MAY be emitted to signal that the domain could have changed."
        },
        "OwnershipTransferred(address,address)": {
          "details": "This emits when ownership of a contract changes."
        },
        "Transfer(address,address,uint256)": {
          "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
        }
      },
      "kind": "dev",
      "methods": {
        "CLOCK_MODE()": {
          "details": "Description of the clock"
        },
        "approve(address,uint256)": {
          "details": "Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}. Requirements: - The caller must own the token or be an approved operator."
        },
        "balanceOf(address)": {
          "details": "Returns the number of tokens in `owner`'s account."
        },
        "clock()": {
          "details": "Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting)."
        },
        "delegate(address)": {
          "details": "Delegates votes from the sender to `delegatee`."
        },
        "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
          "details": "Delegates votes from signer to `delegatee`."
        },
        "delegates(address)": {
          "details": "Returns the delegate that `account` has chosen."
        },
        "eip712Domain()": {
          "details": "See {EIP-5267}. _Available since v4.9._"
        },
        "getApproved(uint256)": {
          "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "getPastTotalSupply(uint256)": {
          "details": "Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote."
        },
        "getPastVotes(address,uint256)": {
          "details": "Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block."
        },
        "getSpaceInfo(address)": {
          "params": {
            "space": "The address of the space"
          },
          "returns": {
            "_0": "space The space info"
          }
        },
        "getVotes(address)": {
          "details": "Returns the current amount of votes that `account` has."
        },
        "isApprovedForAll(address,address)": {
          "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
        },
        "mintSpace(string,string,string,address)": {
          "details": "Only the factory is allowed to mint spaces",
          "params": {
            "name": "The name of the space",
            "networkId": "The network id of the space",
            "space": "The address of the space",
            "uri": "The URI of the space"
          },
          "returns": {
            "tokenId": "The token id of the minted space"
          }
        },
        "name()": {
          "details": "Returns the token collection name."
        },
        "ownerOf(uint256)": {
          "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
        },
        "setApprovalForAll(address,bool)": {
          "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
        },
        "symbol()": {
          "details": "Returns the token collection symbol."
        },
        "tokenURI(uint256)": {
          "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
        },
        "totalSupply()": {
          "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
        },
        "transferFrom(address,address,uint256)": {
          "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
        },
        "updateSpaceInfo(address,string,string)": {
          "details": "Only the space owner is allowed to update the space info",
          "params": {
            "name": "The name of the space",
            "space": "The address of the space",
            "uri": "The URI of the space"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "errors": {
        "ApprovalCallerNotOwnerNorApproved()": [
          {
            "notice": "The caller must own the token or be an approved operator."
          }
        ],
        "ApprovalQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ],
        "BalanceQueryForZeroAddress()": [
          {
            "notice": "Cannot query the balance for the zero address."
          }
        ],
        "MintERC2309QuantityExceedsLimit()": [
          {
            "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
          }
        ],
        "MintToZeroAddress()": [
          {
            "notice": "Cannot mint to the zero address."
          }
        ],
        "MintZeroQuantity()": [
          {
            "notice": "The quantity of tokens minted must be more than zero."
          }
        ],
        "OwnerQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ],
        "OwnershipNotInitializedForExtraData()": [
          {
            "notice": "The `extraData` cannot be set on an unintialized ownership slot."
          }
        ],
        "TransferCallerNotOwnerNorApproved()": [
          {
            "notice": "The caller must own the token or be an approved operator."
          }
        ],
        "TransferFromIncorrectOwner()": [
          {
            "notice": "The token must be owned by `from`."
          }
        ],
        "TransferToNonERC721ReceiverImplementer()": [
          {
            "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
          }
        ],
        "TransferToZeroAddress()": [
          {
            "notice": "Cannot transfer to the zero address."
          }
        ],
        "URIQueryForNonexistentToken()": [
          {
            "notice": "The token does not exist."
          }
        ]
      },
      "events": {
        "InterfaceAdded(bytes4)": {
          "notice": "Emitted when an interface is added to the contract via `_addInterface`."
        },
        "InterfaceRemoved(bytes4)": {
          "notice": "Emitted when an interface is removed from the contract via `_removeInterface`."
        }
      },
      "kind": "user",
      "methods": {
        "getFactory()": {
          "notice": "Get the factory address"
        },
        "getSpaceInfo(address)": {
          "notice": "Get the space info"
        },
        "mintSpace(string,string,string,address)": {
          "notice": "Mint a space"
        },
        "nextTokenId()": {
          "notice": "Get the next token id that will be used to mint a space"
        },
        "setFactory(address)": {
          "notice": "Set the factory address that is allowed to mint spaces"
        },
        "updateSpaceInfo(address,string,string)": {
          "notice": "Update the space info"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/spaces/facets/owner/SpaceOwner.sol": "SpaceOwner"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      ":@prb/math/=lib/prb-math/src/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64-sol/=lib/base64/",
      ":base64/=lib/base64/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-math/=lib/prb-math/src/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/diamond/facets/Facet.sol": {
      "keccak256": "0xecbb7e8de0dae5bdbcbda879436335abac6808bcc2e14f1f4e9efbdc77c4e8be",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b7b5446461a1492f16c86137ce49a699d8a3452e2174c5568b97f8d2d4bc85a7",
        "dweb:/ipfs/QmY74odf1qgTwBV3wjF12rV8TXs3DiNoMm9Pg9S8w2F4VP"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/Checkpoints.sol": {
      "keccak256": "0xe8cbe16d5a723a36dfab4beeeb30ac528172f8dcc810ffec4ae4b1a44b413ac7",
      "license": "MIT",
      "urls": [
        "bzz-raw://e9a6791f8cbf01c3a96adcebc5eb45bec8e2b84db9aacc7f5316ab8e19cb42ee",
        "dweb:/ipfs/QmSMq1ju11z8tTKGwqJcTpituviFdkUnLNa7HxzwmXUf9X"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/IERC5805.sol": {
      "keccak256": "0x8b3b84026610f99bcac6139359305a46c537edf377e44771b904c2bd35719ee3",
      "license": "MIT",
      "urls": [
        "bzz-raw://49a8e7af9b47b6bbd794ccb50380b8f9e9b84561d62bcbf16843dde55bab86e6",
        "dweb:/ipfs/QmdBdYxvhwCwtqW9DfPa6Bw5PrYdzhuKQyJv4vcLsttqrV"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/IERC6372.sol": {
      "keccak256": "0xc3fa5c25bdd3db6126e04897496889e68a65749b050ae8fede0ff80e322aca86",
      "license": "MIT",
      "urls": [
        "bzz-raw://bcf56ae1474c9a3032f8b15b1bbbeeb50ac21c574047f846673d4aca9bf82db4",
        "dweb:/ipfs/Qmcce1zD6TBWiMLXMDsFF6bUrwtVtharjwvAbtkMmoYRgd"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/IVotes.sol": {
      "keccak256": "0xe84a920ea7070bafd35afb05c057801a466ba5d9a0db10be3e31720a1db1f2e6",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://72415e259038afac01a7e76dd74d31243518514e58fe01fd7a6a38f93dd8247b",
        "dweb:/ipfs/QmdS8GkX9Ze4rHp2JQ8Va1DMWHaqxQLCjGD8hVVR5KyMVS"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/Votes.sol": {
      "keccak256": "0x36ca9d8aa95a21f2812aa1f2a3712d4acecd78476d8e50900566cc233a54eefa",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0d910d09517696658fe1cb4291fca5f66cc0b7fd4605f2a4ad70f9c7c494206c",
        "dweb:/ipfs/QmVrcYUZPgbxfQkqXkEdnUFJ81XenXt8hbmDvXBnVyTpDS"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/VotesBase.sol": {
      "keccak256": "0x4406eb10fa6748f35b1dc54f8fcb4eca3189f9f94e20a167c24357d553cdc7ee",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ba30250f00fe1cb6499b9aa6bdbe08e2f13725ccd53a656cf1794d9dd532c696",
        "dweb:/ipfs/QmVqzfAkNkYk6wgKrbqu3n9o1bXVSqp9apgjcWxX5AzHzq"
      ]
    },
    "contracts/src/diamond/facets/governance/votes/VotesStorage.sol": {
      "keccak256": "0xcaed1a4ca14a66a1842ee8d2ef8c853efd9c9a51bbee0d262692174a4fe70c51",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://306ef3d5e39d11cb2e80b2af0e53961af506ee88a687d4e5eec63b0b416454a3",
        "dweb:/ipfs/QmURLsviJWywP84dYkpxKAiUpX1G7bztBmS1ZXNf8iqbEw"
      ]
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0xe02e99665b5acb22d5c508c3bda97c35acd2597ce0a58569a19cc12f0010da90",
      "license": "MIT",
      "urls": [
        "bzz-raw://b586a51dbe63e8763ae0b2b3dadd5c8559f47bc8cbaa0e9fe52aaec4c3677552",
        "dweb:/ipfs/QmRtaVikg6YDwzUAtY7WV793taZgT1ZxyMB4PLAEqGBeCC"
      ]
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0x278589764eab56d2f12e536c168a83f8170918b1dd8811f4a8463b3e720c95ba",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f19d4d8f41d28de52ef25fbce3eb29ce5fd57c12b806dda64c27e535a6fa43b6",
        "dweb:/ipfs/QmPj1TyysUzfBYzNCBDF4AK14mGjcGtPcGfYNoSb2t3U7w"
      ]
    },
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x243cfeefa64ba07bee887b0b03704147f9bd2f25571272a6ebca3ba684af1b00",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1aed67ea7251fad9dbfb58a30f59f7edd81d48d7f6b193b98f957be359653361",
        "dweb:/ipfs/QmQauJL4nFMN3QDutjWezRbBjLX5GsTWt5jeLfkX4JW64T"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x5379ee00fe8945cb6820e9f3692c1f141ab2bacb286ac39f096857bd530f91ca",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://90c08f3e8e8fc64264ac94bc8005286e881760b0c776a9b0a2e679e4cff0237a",
        "dweb:/ipfs/QmXcpnF9hcUH7jGvEySkNBRybYYrcGyUjkUHXuTex886cJ"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x6dfdf3a4b7b09bd162e9571abe96ac85244f4b26d1ecbe3cd0c4bf534413445a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e454b9dd354536d1defe593d88dbb8f7c4d8d46d7bf855d39a3eb9bf07d7c349",
        "dweb:/ipfs/QmaZFpCsdutxFcpuWVnjiAUb17vLqnhhQ23tv8my86h8u1"
      ]
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0xec6475a73e1229430edadb6fd3e32f1599ebb8af78dbbc762d54ded196e534ae",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://46e9fef226666c827f408b5d2c9061600fa5233ddf5fcbc3a2b8956d89e8a872",
        "dweb:/ipfs/Qmd6L6wtehyrD8XwKqFD7gG5hJxsBZ1ja6hGSf2dtN4XEx"
      ]
    },
    "contracts/src/diamond/facets/ownable/OwnableBase.sol": {
      "keccak256": "0x6dd67541350d05fa7980a6497c1e372290e363c40c765a0ce4b7795c38510762",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3eadd97e12aff7228d28e5f9cb27dcddcf7764296d2a72ad703c3765376d50c4",
        "dweb:/ipfs/QmP5hGb6Nj64XCpG4s3sdoYR3sEt85AwDy4hcjoigNxYDa"
      ]
    },
    "contracts/src/diamond/facets/ownable/OwnableStorage.sol": {
      "keccak256": "0x9d27c81f90cb91d1135d440d231776c1749c0836078668a2293f03fa6596f835",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://996d047c91c6f1445bb784851cf7182d9fca47c198829f9897590815d1865923",
        "dweb:/ipfs/QmNSuLTojYzf5BD8oWkdn3Vavqhw6zR6Vugkb1toGopBoB"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721A.sol": {
      "keccak256": "0xc8fab662d9a0c4e697c8dcaad72dd2a190331b01476649a742b6f317266ac5a1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9c84047a6d47a901f45f90f12f713432289ae6d88fea95a383900906005cf70b",
        "dweb:/ipfs/QmVdLUVdtjTQn2fCG85Uv2ZAzCSfNbWYcAg5eXthunnigc"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721ABase.sol": {
      "keccak256": "0xe1d57f0d29b0e5fa88e1d7e7384dc5c20901dfdfb81adb667c749cba57673b34",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d2282b33d16f31635acdc951a6e193d88b35d446d81518605006841cd2fcdb25",
        "dweb:/ipfs/QmSBEbcBkYMmZnfaNWGTkbvMMdMFwU9xrBsKLNZPduwFwc"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/ERC721AStorage.sol": {
      "keccak256": "0x96b4e1886b3697a44deccbaf25f3d59842adc1d8ccb8cc9953a591f10c41c14a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://59e1cc6fd674d7a1b912e28623be7ca3488dd0305e9cf9f53645387e97c3feae",
        "dweb:/ipfs/QmUSvBk1MzHBWUPjHYWkGgBbtxZGKpnBAQTqiLNJQNqMsF"
      ]
    },
    "contracts/src/diamond/facets/token/ERC721A/IERC721A.sol": {
      "keccak256": "0xfce3dc8955c337c405c27c7741b7beff81685ed89f2e102fbad517043e20edf9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6c0ef999aaa971921ba4a4d2190ce5fae92fe15a34a87aac02fd081773fdbe9e",
        "dweb:/ipfs/QmUFD83GFhupZo2d3PafyK5fjqrzFRDnJHEsTGYhHakzUM"
      ]
    },
    "contracts/src/diamond/utils/Context.sol": {
      "keccak256": "0xbace3785343657020bee8dc579fec3a7f18741e5ddfaea001903f7ed087c5b8a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://df02a2fa496a45ceecd157bfed9d8e093b4ff236d3f83e89453cf0656b5c018d",
        "dweb:/ipfs/QmarCnWB7CNimfnNr51p2QBzdwpqbRAkgQncnA2c8kz7KR"
      ]
    },
    "contracts/src/diamond/utils/Nonces.sol": {
      "keccak256": "0xb830d9485d77fdced0bdb6dbc4e98716c0624d037309c2c501b5dfc59020c885",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e29f44ea18dff657462137312b6b2a73c9d5b41f63594057ccb1aec4c5f56883",
        "dweb:/ipfs/QmRVeQ2WtRwsrPtCzt1y5Ud7i539bcgyX5kZYPjsJaTHay"
      ]
    },
    "contracts/src/diamond/utils/cryptography/EIP712.sol": {
      "keccak256": "0x4bc6ac914b47d64b899510e901545369b2b1c292fb392500c3fcc09bb13fbf21",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e7bd2f9bf25d82ff5f45c8075254dba48bcff67b1d6f1b5ab91d1b17a1d9f624",
        "dweb:/ipfs/QmegqbdjZy6DfKNzZHQ1rGJ67w4SaXUz6w3ZL8mrWkwQ5d"
      ]
    },
    "contracts/src/diamond/utils/cryptography/IERC5267.sol": {
      "keccak256": "0x1369ee10d9df0a2700fdf659db717f7c6beae8b2e7173212ec4ed70909f86d50",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f43717adb31aaac44770deac2c689bc45472b9f752614ae32c9efe2013b2d42f",
        "dweb:/ipfs/Qmba5h3jR9Lenn5LRFwxfeEEiZMHqp8wnbX4FTfTtMxqHt"
      ]
    },
    "contracts/src/spaces/facets/guardian/GuardianBase.sol": {
      "keccak256": "0x380bbefb6d29266ce37efcc247b355a714485e21e2c3a6789f81226c36d8ac41",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://7c9512890c4dd3dddc10ac94bdd747c4e49d6e9eb6ebf808eb017eda1733221a",
        "dweb:/ipfs/QmWwocwLuRiKzqJoNdLPmxpEH34H2sBfMTH7iU4aFkW8Kj"
      ]
    },
    "contracts/src/spaces/facets/guardian/GuardianStorage.sol": {
      "keccak256": "0xc2e8be1f0d89e7a3f5c6a3f8ca8d35ba02a3edf78a1332847d37d48fd4505ad8",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://335483da54ab46c850fc72219aa128d547ddf0668740c3a15d71c5522cd7d1dc",
        "dweb:/ipfs/QmXRhA1rqX3jvbhQqKRCfziHCdDXtw5WX9jAUBpQWbdega"
      ]
    },
    "contracts/src/spaces/facets/guardian/IGuardian.sol": {
      "keccak256": "0x9898180a058f5d922141026a1266008c9d7883a9863549ab76d8218123be6c19",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3481a5ced56b71d2b5e8bbc6bce46d80eb8161fb9195fb232272a442d015323b",
        "dweb:/ipfs/QmV6LvhxezH6PJw1gfV7DgAyHUpGd2GN56w6G9n83vGxa3"
      ]
    },
    "contracts/src/spaces/facets/owner/ISpaceOwner.sol": {
      "keccak256": "0x168e417aba7f522d48c0862f23638cf0b3acea7226bef0db11e82b156e7dc898",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4d4e28028010cb0562caabbcdbff938843643c6accd8eb3cbe1ab9e1cf91cfe8",
        "dweb:/ipfs/QmfD6JG54Pc6P95TVt2GEHC6GmNkHoZTs2vi8aiUped1cT"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwner.sol": {
      "keccak256": "0xb07ebdca18a8b93776eedb88bf87fe6da8f9946f017b43d907b0dfc4e24ec8f4",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://886f2564bdff634792a8f8103d875ab0855e5d4c0bf99bdac12d8d7001b4d14a",
        "dweb:/ipfs/QmZBGcHXF9a3ECkMbzBLyeozqRCxn1fZdsu6BrXTySSqXe"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwnerBase.sol": {
      "keccak256": "0xe8a498b293ec017dff36ba127e2ff8a881f9b254499930b6f49fcbbd528be172",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://fac9b2b2ba455370632e12e69d9a0557763d18f7f8ecf3a75d1c7e0e22103dce",
        "dweb:/ipfs/QmX9DEpV5y4JDyupoHy6pdTo9jSXPDReFpBUYcLmJNCsQA"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwnerStorage.sol": {
      "keccak256": "0x1c1c69d3e252604e5714800a1957b9a405bc7da2e7e65c928d373c86208d7c86",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e82031db4c00a643feb47aae4f1b39d7eb1121a7cea3aff26071d686765c0339",
        "dweb:/ipfs/QmRzB5jseuFmjVouCZ3se8giLM1vfJKVijkqGrXhLVh15X"
      ]
    },
    "contracts/src/spaces/facets/owner/SpaceOwnerUriBase.sol": {
      "keccak256": "0x73874d7dddec9364b31c553086364eb04c0f3c3f7be5aa5671fef7f4ea930b3f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://be1e7fac1e58efc47c270b6201690c122e1e993b2e9da2847b1f0d48884dabc2",
        "dweb:/ipfs/QmbR8tAwZjeD4en6pW4bxSgKoAqNd994ePXTVXaiDgZTXf"
      ]
    },
    "contracts/src/utils/Validator.sol": {
      "keccak256": "0xb8d6d023395c2611e308cb09606dc9e49dce0d985a75f20572aeed590d738f50",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://144807c8826c643f74c48e3589243ac4b05dffd0a00b861b75ce46451224be64",
        "dweb:/ipfs/QmazGzxM9owCyKTV1cY46PiMHXdApYJR221Lm9YMcn7J72"
      ]
    },
    "lib/base64/base64.sol": {
      "keccak256": "0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf",
      "license": "MIT",
      "urls": [
        "bzz-raw://17c12e16d8d66f3af15d8787920bd41ca6c1e7517a212a6b9cebd4b6d38f36fe",
        "dweb:/ipfs/QmcXMnZUXEz6LRKsm3CSvqdPboAzmezavi8bTg2dRxM2yE"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
      "license": "MIT",
      "urls": [
        "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
        "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
      "license": "MIT",
      "urls": [
        "bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
        "dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf",
      "license": "MIT",
      "urls": [
        "bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c",
        "dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
      "keccak256": "0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435",
      "license": "MIT",
      "urls": [
        "bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c",
        "dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
      "license": "MIT",
      "urls": [
        "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
        "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
      "license": "MIT",
      "urls": [
        "bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
        "dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe",
      "license": "MIT",
      "urls": [
        "bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c",
        "dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
      "keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
      "license": "MIT",
      "urls": [
        "bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
        "dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
      ]
    }
  },
  "version": 1
}