/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IRoles, IRolesInterface } from "../IRoles";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        internalType: "string[]",
        name: "permissions",
        type: "string[]",
      },
    ],
    name: "addPermissionsToRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IRolesStructs.CreateEntitlement",
        name: "entitlement",
        type: "tuple",
      },
    ],
    name: "addRoleToEntitlement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "roleName",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "permissions",
        type: "string[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IRolesStructs.CreateEntitlement[]",
        name: "entitlements",
        type: "tuple[]",
      },
    ],
    name: "createRole",
    outputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
    ],
    name: "getPermissionsByRoleId",
    outputs: [
      {
        internalType: "string[]",
        name: "permissions",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
    ],
    name: "getRoleById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
          {
            internalType: "address[]",
            name: "entitlements",
            type: "address[]",
          },
        ],
        internalType: "struct IRolesStructs.Role",
        name: "role",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRoles",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
          {
            internalType: "address[]",
            name: "entitlements",
            type: "address[]",
          },
        ],
        internalType: "struct IRolesStructs.Role[]",
        name: "roles",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        internalType: "string[]",
        name: "permissions",
        type: "string[]",
      },
    ],
    name: "removePermissionsFromRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
    ],
    name: "removeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IRolesStructs.CreateEntitlement",
        name: "entitlement",
        type: "tuple",
      },
    ],
    name: "removeRoleFromEntitlement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "roleName",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "permissions",
        type: "string[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IRolesStructs.CreateEntitlement[]",
        name: "entitlements",
        type: "tuple[]",
      },
    ],
    name: "updateRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IRoles__factory {
  static readonly abi = _abi;
  static createInterface(): IRolesInterface {
    return new utils.Interface(_abi) as IRolesInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IRoles {
    return new Contract(address, _abi, signerOrProvider) as IRoles;
  }
}
