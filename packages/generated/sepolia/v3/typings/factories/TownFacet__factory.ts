/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { TownFacet, TownFacetInterface } from "../TownFacet";

const _abi = [
  {
    inputs: [],
    name: "info",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "networkId",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct ITownBase.Info",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101f0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063370158ea14610030575b600080fd5b61003861004e565b6040516100459190610155565b60405180910390f35b60408051808201909152606081526000602082015261006b610070565b905090565b60408051808201909152606081526000602082015260007f37387c92bc1af262a940de25ef2429d783e8c29c13c4034586a4ebfcff884ad1905060405180604001604052808260000180546100c4906101b6565b80601f01602080910402602001604051908101604052809291908181526020018280546100f0906101b6565b801561013d5780601f106101125761010080835404028352916020019161013d565b820191906000526020600020905b81548152906001019060200180831161012057829003601f168201915b50505050508152602001826001015481525091505090565b600060208083528351604082850152805180606086015260005b8181101561018b5782810184015186820160800152830161016f565b506000608082870101528286015160408601526080601f19601f830116860101935050505092915050565b600181811c908216806101ca57607f821691505b6020821081036101ea57634e487b7160e01b600052602260045260246000fd5b5091905056";

type TownFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TownFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TownFacet__factory extends ContractFactory {
  constructor(...args: TownFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TownFacet> {
    return super.deploy(overrides || {}) as Promise<TownFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TownFacet {
    return super.attach(address) as TownFacet;
  }
  override connect(signer: Signer): TownFacet__factory {
    return super.connect(signer) as TownFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TownFacetInterface {
    return new utils.Interface(_abi) as TownFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TownFacet {
    return new Contract(address, _abi, signerOrProvider) as TownFacet;
  }
}
