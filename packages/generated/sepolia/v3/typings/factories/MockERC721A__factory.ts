/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockERC721A, MockERC721AInterface } from "../MockERC721A";

const _abi = [
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "Initializable_InInitializingState",
    type: "error",
  },
  {
    inputs: [],
    name: "Initializable_NotInInitializingState",
    type: "error",
  },
  {
    inputs: [],
    name: "Introspection_AlreadySupported",
    type: "error",
  },
  {
    inputs: [],
    name: "Introspection_NotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "MintERC2309QuantityExceedsLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "MintToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintZeroQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnershipNotInitializedForExtraData",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "fromTokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "toTokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "ConsecutiveTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "version",
        type: "uint32",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "InterfaceAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "InterfaceRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    name: "__ERC721A_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "token",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mintTo",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100c4565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de8054640100000000900460ff161561006a576040516366008a2d60e01b815260040160405180910390fd5b805463ffffffff90811610156100c157805463ffffffff191663ffffffff90811782556040519081527fe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c9060200160405180910390a15b50565b611537806100d36000396000f3fe6080604052600436106100fe5760003560e01c80636352211e11610095578063a22cb46511610064578063a22cb46514610279578063b88d4fde14610299578063c87b56dd146102ac578063d2f01f19146102cc578063e985e9c5146102ec57600080fd5b80636352211e1461020457806370a0823114610224578063755edd171461024457806395d89b411461026457600080fd5b806323b872dd116100d157806323b872dd1461019e57806340c10f19146101b157806342842e0e146101d157806342966c68146101e457600080fd5b806306fdde0314610103578063081812fc1461012e578063095ea7b31461016657806318160ddd1461017b575b600080fd5b34801561010f57600080fd5b5061011861031c565b6040516101259190611081565b60405180910390f35b34801561013a57600080fd5b5061014e610149366004611094565b6103b7565b6040516001600160a01b039091168152602001610125565b6101796101743660046110c4565b6103c8565b005b34801561018757600080fd5b506101906103d8565b604051908152602001610125565b6101796101ac3660046110ee565b6103f7565b3480156101bd57600080fd5b506101796101cc3660046110c4565b6105dc565b6101796101df3660046110ee565b6105e6565b3480156101f057600080fd5b506101796101ff366004611094565b610606565b34801561021057600080fd5b5061014e61021f366004611094565b610612565b34801561023057600080fd5b5061019061023f36600461112a565b61061d565b34801561025057600080fd5b5061019061025f36600461112a565b610686565b34801561027057600080fd5b506101186106a2565b34801561028557600080fd5b50610179610294366004611145565b6106ba565b6101796102a736600461120d565b610737565b3480156102b857600080fd5b506101186102c7366004611094565b610781565b3480156102d857600080fd5b506101796102e73660046112a9565b610812565b3480156102f857600080fd5b5061030c61030736600461130d565b610866565b6040519015158152602001610125565b6060610326610872565b600201805461033490611340565b80601f016020809104026020016040519081016040528092919081815260200182805461036090611340565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b5050505050905090565b60006103c282610896565b92915050565b6103d4828260016108e3565b5050565b6000806103e3610872565b600101546103ef610872565b540303919050565b600061040282610998565b9050836001600160a01b0316816001600160a01b0316146104355760405162a1148160e81b815260040160405180910390fd5b60008061044184610a3c565b9150915061046681876104513390565b6001600160a01b039081169116811491141790565b610491576104748633610866565b61049157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166104b857604051633a954ecd60e21b815260040160405180910390fd5b80156104c357600082555b6104cb610872565b6001600160a01b03871660009081526005919091016020526040902080546000190190556104f7610872565b6001600160a01b03861660008181526005929092016020526040909120805460010190554260a01b17600160e11b1761052e610872565b60008681526004919091016020526040812091909155600160e11b841690036105a4576001840161055d610872565b6000828152600491909101602052604081205490036105a25761057e610872565b5481146105a2578361058e610872565b600083815260049190910160205260409020555b505b83856001600160a01b0316876001600160a01b031660008051602061151783398151915260405160405180910390a45b505050505050565b6103d48282610a64565b61060183838360405180602001604052806000815250610737565b505050565b61060f81610b7b565b50565b60006103c282610998565b60006001600160a01b038216610646576040516323d3ad8160e21b815260040160405180910390fd5b67ffffffffffffffff610657610872565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b6000610690610b86565b905061069d826001610a64565b919050565b60606106ac610872565b600301805461033490611340565b806106c3610872565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6107428484846103f7565b6001600160a01b0383163b1561077b5761075e84848484610b96565b61077b576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061078c82610c81565b6107a957604051630a14c4b560e41b815260040160405180910390fd5b60006107c060408051602081019091526000815290565b905080516000036107e0576040518060200160405280600081525061080b565b806107ea84610cbd565b6040516020016107fb92919061137a565b6040516020818303038152906040525b9392505050565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de54640100000000900460ff1661085c57604051630ef4733760e31b815260040160405180910390fd5b6103d48282610d01565b600061080b8383610d75565b7f234d8962d7c9a6a6604d7f98797e6ad6d7a886804f7409feb26422e27bf8125490565b60006108a182610c81565b6108be576040516333d1c03960e21b815260040160405180910390fd5b6108c6610872565b60009283526006016020525060409020546001600160a01b031690565b60006108ee83610612565b9050811561092d57336001600160a01b0382161461092d576109108133610d75565b61092d576040516367d9dca160e11b815260040160405180910390fd5b83610936610872565b6000858152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551859287811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a450505050565b60006109a2610872565b600083815260049190910160205260408120549150600160e01b82169003610a23578060000361069d576109d4610872565b5482106109f457604051636f96cda160e11b815260040160405180910390fd5b6109fc610872565b6000199092016000818152600493909301602052604090922054905080156109f457919050565b604051636f96cda160e11b815260040160405180910390fd5b6000806000610a49610872565b60009485526006016020525050604090912080549092909150565b6000610a6e610872565b5490506000829003610a935760405163b562e8dd60e01b815260040160405180910390fd5b680100000000000000018202610aa7610872565b6001600160a01b038516600081815260059290920160205260409091208054929092019091554260a01b6001841460e11b1717610ae2610872565b600083815260049190910160205260408120919091556001600160a01b0384169083830190839083906000805160206115178339815191528180a4600183015b818114610b485780836000600080516020611517833981519152600080a4600101610b22565b5081600003610b6957604051622e076360e81b815260040160405180910390fd5b80610b72610872565b55506106019050565b61060f816000610db2565b6000610b90610872565b54919050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610bcb9033908990889088906004016113a9565b6020604051808303816000875af1925050508015610c06575060408051601f3d908101601f19168201909252610c03918101906113e6565b60015b610c64573d808015610c34576040519150601f19603f3d011682016040523d82523d6000602084013e610c39565b606091505b508051600003610c5c576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6000610c8b610872565b54821080156103c25750600160e01b610ca2610872565b60008481526004919091016020526040902054161592915050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480610cd75750819003601f19909101908152919050565b7f2d0d21306acfe8e9bb163a4573e95aff6cef95dc1102c6a16d5f19eac08cc4de54640100000000900460ff16610d4b57604051630ef4733760e31b815260040160405180910390fd5b610d5b6380ac58cd60e01b610f21565b610d6b635b5e139f60e01b610f21565b6103d48282610fff565b6000610d7f610872565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b6000610dbd83610998565b905080600080610dcc86610a3c565b915091508415610e0c57610de1818433610451565b610e0c57610def8333610d75565b610e0c57604051632ce44b5f60e11b815260040160405180910390fd5b8015610e1757600082555b6fffffffffffffffffffffffffffffffff610e30610872565b6001600160a01b038516600081815260059290920160205260409091208054929092019091554260a01b17600360e01b17610e69610872565b60008881526004919091016020526040812091909155600160e11b85169003610edf5760018601610e98610872565b600082815260049190910160205260408120549003610edd57610eb9610872565b548114610edd5784610ec9610872565b600083815260049190910160205260409020555b505b60405186906000906001600160a01b03861690600080516020611517833981519152908390a4610f0d610872565b600190810180549091019055505050505050565b6001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c4602052604090205460ff161515600114610fae576001600160e01b0319811660009081527fbc7de460bcfb6afd0c415c8c610d408bd914b18d7d0feec0da9e25348087a5c460205260409020805460ff19166001179055610fc7565b604051637967f77d60e11b815260040160405180910390fd5b6040516001600160e01b03198216907f78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f2290600090a250565b6000611009610872565b9050600281016110198482611456565b50600381016110288382611456565b50600090555050565b60005b8381101561104c578181015183820152602001611034565b50506000910152565b6000815180845261106d816020860160208601611031565b601f01601f19169290920160200192915050565b60208152600061080b6020830184611055565b6000602082840312156110a657600080fd5b5035919050565b80356001600160a01b038116811461069d57600080fd5b600080604083850312156110d757600080fd5b6110e0836110ad565b946020939093013593505050565b60008060006060848603121561110357600080fd5b61110c846110ad565b925061111a602085016110ad565b9150604084013590509250925092565b60006020828403121561113c57600080fd5b61080b826110ad565b6000806040838503121561115857600080fd5b611161836110ad565b91506020830135801515811461117657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156111b2576111b2611181565b604051601f8501601f19908116603f011681019082821181831017156111da576111da611181565b816040528093508581528686860111156111f357600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561122357600080fd5b61122c856110ad565b935061123a602086016110ad565b925060408501359150606085013567ffffffffffffffff81111561125d57600080fd5b8501601f8101871361126e57600080fd5b61127d87823560208401611197565b91505092959194509250565b600082601f83011261129a57600080fd5b61080b83833560208501611197565b600080604083850312156112bc57600080fd5b823567ffffffffffffffff808211156112d457600080fd5b6112e086838701611289565b935060208501359150808211156112f657600080fd5b5061130385828601611289565b9150509250929050565b6000806040838503121561132057600080fd5b611329836110ad565b9150611337602084016110ad565b90509250929050565b600181811c9082168061135457607f821691505b60208210810361137457634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161138c818460208801611031565b8351908301906113a0818360208801611031565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113dc90830184611055565b9695505050505050565b6000602082840312156113f857600080fd5b81516001600160e01b03198116811461080b57600080fd5b601f82111561060157600081815260208120601f850160051c810160208610156114375750805b601f850160051c820191505b818110156105d457828155600101611443565b815167ffffffffffffffff81111561147057611470611181565b6114848161147e8454611340565b84611410565b602080601f8311600181146114b957600084156114a15750858301515b600019600386901b1c1916600185901b1785556105d4565b600085815260208120601f198616915b828110156114e8578886015182559484019460019091019084016114c9565b50858210156115065787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type MockERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC721A__factory extends ContractFactory {
  constructor(...args: MockERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC721A> {
    return super.deploy(overrides || {}) as Promise<MockERC721A>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC721A {
    return super.attach(address) as MockERC721A;
  }
  override connect(signer: Signer): MockERC721A__factory {
    return super.connect(signer) as MockERC721A__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721AInterface {
    return new utils.Interface(_abi) as MockERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC721A {
    return new Contract(address, _abi, signerOrProvider) as MockERC721A;
  }
}
