/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IWalletLinkBase {
  export type WalletLinkInfoStruct = {
    wallet: PromiseOrValue<string>;
    rootKey: PromiseOrValue<string>;
  };

  export type WalletLinkInfoStructOutput = [string, string] & {
    wallet: string;
    rootKey: string;
  };
}

export interface IWalletLinkInterface extends utils.Interface {
  functions: {
    "checkLinkForAll(address,address)": FunctionFragment;
    "getLinksByRootKey(address)": FunctionFragment;
    "getLinksForAll(address)": FunctionFragment;
    "linkForAll(address,bool)": FunctionFragment;
    "revokeAllLinks()": FunctionFragment;
    "revokeLink(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkLinkForAll"
      | "getLinksByRootKey"
      | "getLinksForAll"
      | "linkForAll"
      | "revokeAllLinks"
      | "revokeLink"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkLinkForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinksByRootKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinksForAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllLinks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLink",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkLinkForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinksByRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinksForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkForAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllLinks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeLink", data: BytesLike): Result;

  events: {
    "LinkForAll(address,address,bool)": EventFragment;
    "RevokeAllLinks(address)": EventFragment;
    "RevokeLink(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LinkForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAllLinks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeLink"): EventFragment;
}

export interface LinkForAllEventObject {
  wallet: string;
  rootKey: string;
  value: boolean;
}
export type LinkForAllEvent = TypedEvent<
  [string, string, boolean],
  LinkForAllEventObject
>;

export type LinkForAllEventFilter = TypedEventFilter<LinkForAllEvent>;

export interface RevokeAllLinksEventObject {
  wallet: string;
}
export type RevokeAllLinksEvent = TypedEvent<
  [string],
  RevokeAllLinksEventObject
>;

export type RevokeAllLinksEventFilter = TypedEventFilter<RevokeAllLinksEvent>;

export interface RevokeLinkEventObject {
  wallet: string;
  rootKey: string;
}
export type RevokeLinkEvent = TypedEvent<
  [string, string],
  RevokeLinkEventObject
>;

export type RevokeLinkEventFilter = TypedEventFilter<RevokeLinkEvent>;

export interface IWalletLink extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWalletLinkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkLinkForAll(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLinksByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IWalletLinkBase.WalletLinkInfoStructOutput[]] & {
        info: IWalletLinkBase.WalletLinkInfoStructOutput[];
      }
    >;

    getLinksForAll(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    linkForAll(
      rootKey: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAllLinks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeLink(
      rootKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkLinkForAll(
    rootKey: PromiseOrValue<string>,
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLinksByRootKey(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IWalletLinkBase.WalletLinkInfoStructOutput[]>;

  getLinksForAll(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  linkForAll(
    rootKey: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAllLinks(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeLink(
    rootKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkLinkForAll(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLinksByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IWalletLinkBase.WalletLinkInfoStructOutput[]>;

    getLinksForAll(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    linkForAll(
      rootKey: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAllLinks(overrides?: CallOverrides): Promise<void>;

    revokeLink(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LinkForAll(address,address,bool)"(
      wallet?: null,
      rootKey?: null,
      value?: null
    ): LinkForAllEventFilter;
    LinkForAll(
      wallet?: null,
      rootKey?: null,
      value?: null
    ): LinkForAllEventFilter;

    "RevokeAllLinks(address)"(wallet?: null): RevokeAllLinksEventFilter;
    RevokeAllLinks(wallet?: null): RevokeAllLinksEventFilter;

    "RevokeLink(address,address)"(
      wallet?: null,
      rootKey?: null
    ): RevokeLinkEventFilter;
    RevokeLink(wallet?: null, rootKey?: null): RevokeLinkEventFilter;
  };

  estimateGas: {
    checkLinkForAll(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinksByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinksForAll(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkForAll(
      rootKey: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAllLinks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeLink(
      rootKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkLinkForAll(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinksByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinksForAll(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkForAll(
      rootKey: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAllLinks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeLink(
      rootKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
