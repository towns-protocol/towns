/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace StreamRegistry {
  export type StreamStruct = {
    streamId: PromiseOrValue<string>;
    nodes: PromiseOrValue<string>[];
    genesisMiniblockHash: PromiseOrValue<BytesLike>;
  };

  export type StreamStructOutput = [string, string[], string] & {
    streamId: string;
    nodes: string[];
    genesisMiniblockHash: string;
  };
}

export interface StreamRegistryInterface extends utils.Interface {
  functions: {
    "allocateStream((string,address[],bytes32))": FunctionFragment;
    "errAlreadyExists()": FunctionFragment;
    "errNotFound()": FunctionFragment;
    "errOutOfBounds()": FunctionFragment;
    "getStream(string)": FunctionFragment;
    "getStreamByIndex(uint256)": FunctionFragment;
    "getStreamsLength()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allocateStream"
      | "errAlreadyExists"
      | "errNotFound"
      | "errOutOfBounds"
      | "getStream"
      | "getStreamByIndex"
      | "getStreamsLength"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocateStream",
    values: [StreamRegistry.StreamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "errAlreadyExists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "errNotFound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "errOutOfBounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStream",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamsLength",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "errAlreadyExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "errNotFound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "errOutOfBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStreamByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStreamsLength",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StreamRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StreamRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocateStream(
      newStream: StreamRegistry.StreamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    errAlreadyExists(overrides?: CallOverrides): Promise<[string]>;

    errNotFound(overrides?: CallOverrides): Promise<[string]>;

    errOutOfBounds(overrides?: CallOverrides): Promise<[string]>;

    getStream(
      _streamId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StreamRegistry.StreamStructOutput]>;

    getStreamByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[StreamRegistry.StreamStructOutput]>;

    getStreamsLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allocateStream(
    newStream: StreamRegistry.StreamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  errAlreadyExists(overrides?: CallOverrides): Promise<string>;

  errNotFound(overrides?: CallOverrides): Promise<string>;

  errOutOfBounds(overrides?: CallOverrides): Promise<string>;

  getStream(
    _streamId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StreamRegistry.StreamStructOutput>;

  getStreamByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<StreamRegistry.StreamStructOutput>;

  getStreamsLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allocateStream(
      newStream: StreamRegistry.StreamStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    errAlreadyExists(overrides?: CallOverrides): Promise<string>;

    errNotFound(overrides?: CallOverrides): Promise<string>;

    errOutOfBounds(overrides?: CallOverrides): Promise<string>;

    getStream(
      _streamId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StreamRegistry.StreamStructOutput>;

    getStreamByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<StreamRegistry.StreamStructOutput>;

    getStreamsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    allocateStream(
      newStream: StreamRegistry.StreamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    errAlreadyExists(overrides?: CallOverrides): Promise<BigNumber>;

    errNotFound(overrides?: CallOverrides): Promise<BigNumber>;

    errOutOfBounds(overrides?: CallOverrides): Promise<BigNumber>;

    getStream(
      _streamId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreamByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreamsLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateStream(
      newStream: StreamRegistry.StreamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    errAlreadyExists(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    errNotFound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    errOutOfBounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStream(
      _streamId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStreamByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStreamsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
