/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StreamRegistryInterface extends utils.Interface {
  functions: {
    "addNodeToStream(string,string)": FunctionFragment;
    "addNodesToStream(string,string[])": FunctionFragment;
    "getStreamNodes(string)": FunctionFragment;
    "removeNodeFromStream(string,string)": FunctionFragment;
    "valueExists(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNodeToStream"
      | "addNodesToStream"
      | "getStreamNodes"
      | "removeNodeFromStream"
      | "valueExists"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNodeToStream",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addNodesToStream",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamNodes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNodeFromStream",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueExists",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNodeToStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNodesToStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStreamNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNodeFromStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueExists",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StreamRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StreamRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNodeToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNodesToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStreamNodes(
      streamIdHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    removeNodeFromStream(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    valueExists(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addNodeToStream(
    streamIdHash: PromiseOrValue<string>,
    newNodeId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNodesToStream(
    streamIdHash: PromiseOrValue<string>,
    newNodeIds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStreamNodes(
    streamIdHash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  removeNodeFromStream(
    streamIdHash: PromiseOrValue<string>,
    nodeId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  valueExists(
    streamIdHash: PromiseOrValue<string>,
    nodeId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addNodeToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNodesToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeIds: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getStreamNodes(
      streamIdHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    removeNodeFromStream(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    valueExists(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addNodeToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNodesToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStreamNodes(
      streamIdHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeNodeFromStream(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    valueExists(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNodeToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNodesToStream(
      streamIdHash: PromiseOrValue<string>,
      newNodeIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStreamNodes(
      streamIdHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeNodeFromStream(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    valueExists(
      streamIdHash: PromiseOrValue<string>,
      nodeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
