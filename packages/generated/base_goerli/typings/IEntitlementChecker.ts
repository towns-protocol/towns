/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IEntitlementCheckerInterface extends utils.Interface {
  functions: {
    "emitEntitlementCheckRequested(bytes32,address[])": FunctionFragment;
    "getRandomNodes(uint256,address)": FunctionFragment;
    "nodeCount()": FunctionFragment;
    "registerNode()": FunctionFragment;
    "unregisterNode()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "emitEntitlementCheckRequested"
      | "getRandomNodes"
      | "nodeCount"
      | "registerNode"
      | "unregisterNode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "emitEntitlementCheckRequested",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNodes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "nodeCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterNode",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "emitEntitlementCheckRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodeCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterNode",
    data: BytesLike
  ): Result;

  events: {
    "EntitlementCheckRequested(address,bytes32,address[],address)": EventFragment;
    "NodeRegistered(address)": EventFragment;
    "NodeUnregistered(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntitlementCheckRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeUnregistered"): EventFragment;
}

export interface EntitlementCheckRequestedEventObject {
  callerAddress: string;
  transactionId: string;
  selectedNodes: string[];
  contractAddress: string;
}
export type EntitlementCheckRequestedEvent = TypedEvent<
  [string, string, string[], string],
  EntitlementCheckRequestedEventObject
>;

export type EntitlementCheckRequestedEventFilter =
  TypedEventFilter<EntitlementCheckRequestedEvent>;

export interface NodeRegisteredEventObject {
  nodeAddress: string;
}
export type NodeRegisteredEvent = TypedEvent<
  [string],
  NodeRegisteredEventObject
>;

export type NodeRegisteredEventFilter = TypedEventFilter<NodeRegisteredEvent>;

export interface NodeUnregisteredEventObject {
  nodeAddress: string;
}
export type NodeUnregisteredEvent = TypedEvent<
  [string],
  NodeUnregisteredEventObject
>;

export type NodeUnregisteredEventFilter =
  TypedEventFilter<NodeUnregisteredEvent>;

export interface IEntitlementChecker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEntitlementCheckerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitEntitlementCheckRequested(
      transactionId: PromiseOrValue<BytesLike>,
      selectedNodes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRandomNodes(
      requestedNodeCount: PromiseOrValue<BigNumberish>,
      requestingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    nodeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerNode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterNode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  emitEntitlementCheckRequested(
    transactionId: PromiseOrValue<BytesLike>,
    selectedNodes: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRandomNodes(
    requestedNodeCount: PromiseOrValue<BigNumberish>,
    requestingContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  nodeCount(overrides?: CallOverrides): Promise<BigNumber>;

  registerNode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterNode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emitEntitlementCheckRequested(
      transactionId: PromiseOrValue<BytesLike>,
      selectedNodes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRandomNodes(
      requestedNodeCount: PromiseOrValue<BigNumberish>,
      requestingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    nodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerNode(overrides?: CallOverrides): Promise<void>;

    unregisterNode(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EntitlementCheckRequested(address,bytes32,address[],address)"(
      callerAddress?: PromiseOrValue<string> | null,
      transactionId?: null,
      selectedNodes?: null,
      contractAddress?: null
    ): EntitlementCheckRequestedEventFilter;
    EntitlementCheckRequested(
      callerAddress?: PromiseOrValue<string> | null,
      transactionId?: null,
      selectedNodes?: null,
      contractAddress?: null
    ): EntitlementCheckRequestedEventFilter;

    "NodeRegistered(address)"(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeRegisteredEventFilter;
    NodeRegistered(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeRegisteredEventFilter;

    "NodeUnregistered(address)"(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeUnregisteredEventFilter;
    NodeUnregistered(
      nodeAddress?: PromiseOrValue<string> | null
    ): NodeUnregisteredEventFilter;
  };

  estimateGas: {
    emitEntitlementCheckRequested(
      transactionId: PromiseOrValue<BytesLike>,
      selectedNodes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRandomNodes(
      requestedNodeCount: PromiseOrValue<BigNumberish>,
      requestingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerNode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterNode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emitEntitlementCheckRequested(
      transactionId: PromiseOrValue<BytesLike>,
      selectedNodes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRandomNodes(
      requestedNodeCount: PromiseOrValue<BigNumberish>,
      requestingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerNode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterNode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
