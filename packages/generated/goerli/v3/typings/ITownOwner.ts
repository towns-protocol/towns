/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITownOwnerBase {
  export type TownStruct = {
    name: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    networkId: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type TownStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    name: string;
    uri: string;
    tokenId: BigNumber;
    networkId: string;
    createdAt: BigNumber;
  };
}

export interface ITownOwnerInterface extends utils.Interface {
  functions: {
    "getTownInfo(address)": FunctionFragment;
    "mintTown(string,string,string,address)": FunctionFragment;
    "nextTokenId()": FunctionFragment;
    "setFactory(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTownInfo"
      | "mintTown"
      | "nextTokenId"
      | "setFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTownInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTown",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTownInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;

  events: {
    "TownOwner__SetFactory(address)": EventFragment;
    "TownOwner__UpdateTown(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TownOwner__SetFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TownOwner__UpdateTown"): EventFragment;
}

export interface TownOwner__SetFactoryEventObject {
  factory: string;
}
export type TownOwner__SetFactoryEvent = TypedEvent<
  [string],
  TownOwner__SetFactoryEventObject
>;

export type TownOwner__SetFactoryEventFilter =
  TypedEventFilter<TownOwner__SetFactoryEvent>;

export interface TownOwner__UpdateTownEventObject {
  town: string;
}
export type TownOwner__UpdateTownEvent = TypedEvent<
  [string],
  TownOwner__UpdateTownEventObject
>;

export type TownOwner__UpdateTownEventFilter =
  TypedEventFilter<TownOwner__UpdateTownEvent>;

export interface ITownOwner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITownOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTownInfo(
      townAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ITownOwnerBase.TownStructOutput]>;

    mintTown(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      networkId: PromiseOrValue<string>,
      townAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getTownInfo(
    townAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ITownOwnerBase.TownStructOutput>;

  mintTown(
    name: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    networkId: PromiseOrValue<string>,
    townAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  setFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTownInfo(
      townAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ITownOwnerBase.TownStructOutput>;

    mintTown(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      networkId: PromiseOrValue<string>,
      townAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TownOwner__SetFactory(address)"(
      factory?: null
    ): TownOwner__SetFactoryEventFilter;
    TownOwner__SetFactory(factory?: null): TownOwner__SetFactoryEventFilter;

    "TownOwner__UpdateTown(address)"(
      town?: null
    ): TownOwner__UpdateTownEventFilter;
    TownOwner__UpdateTown(town?: null): TownOwner__UpdateTownEventFilter;
  };

  estimateGas: {
    getTownInfo(
      townAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTown(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      networkId: PromiseOrValue<string>,
      townAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTownInfo(
      townAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintTown(
      name: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      networkId: PromiseOrValue<string>,
      townAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
