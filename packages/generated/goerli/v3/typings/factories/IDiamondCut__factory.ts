/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IDiamondCut, IDiamondCutInterface } from "../IDiamondCut";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "DiamondCut_FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "DiamondCut_FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "DiamondCut_FunctionFromSameFacetAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "DiamondCut_ImmutableFacet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "init",
        type: "address",
      },
    ],
    name: "DiamondCut_InvalidContract",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "DiamondCut_InvalidFacet",
    type: "error",
  },
  {
    inputs: [],
    name: "DiamondCut_InvalidFacetCutAction",
    type: "error",
  },
  {
    inputs: [],
    name: "DiamondCut_InvalidFacetCutLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "DiamondCut_InvalidFacetRemoval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "DiamondCut_InvalidFacetSelectors",
    type: "error",
  },
  {
    inputs: [],
    name: "DiamondCut_InvalidSelector",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamond.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamond.FacetCut[]",
        name: "facetCuts",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "initPayload",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamond.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamond.FacetCut[]",
        name: "facetCuts",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "initPayload",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDiamondCut__factory {
  static readonly abi = _abi;
  static createInterface(): IDiamondCutInterface {
    return new utils.Interface(_abi) as IDiamondCutInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDiamondCut {
    return new Contract(address, _abi, signerOrProvider) as IDiamondCut;
  }
}
