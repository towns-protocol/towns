/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ITownOwner, ITownOwnerInterface } from "../ITownOwner";

const _abi = [
  {
    inputs: [],
    name: "TownOwner__OnlyFactoryAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "TownOwner__OnlyTownOwnerAllowed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "factory",
        type: "address",
      },
    ],
    name: "TownOwner__SetFactory",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "town",
        type: "address",
      },
    ],
    name: "TownOwner__UpdateTown",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "townAddress",
        type: "address",
      },
    ],
    name: "getTownInfo",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "networkId",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct ITownOwnerBase.Town",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        internalType: "string",
        name: "networkId",
        type: "string",
      },
      {
        internalType: "address",
        name: "townAddress",
        type: "address",
      },
    ],
    name: "mintTown",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nextTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
    ],
    name: "setFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ITownOwner__factory {
  static readonly abi = _abi;
  static createInterface(): ITownOwnerInterface {
    return new utils.Interface(_abi) as ITownOwnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITownOwner {
    return new Contract(address, _abi, signerOrProvider) as ITownOwner;
  }
}
