{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "facetAddress",
                    "type": "address"
                  },
                  {
                    "internalType": "enum IDiamond.FacetCutAction",
                    "name": "action",
                    "type": "uint8"
                  },
                  {
                    "internalType": "bytes4[]",
                    "name": "functionSelectors",
                    "type": "bytes4[]"
                  }
                ],
                "internalType": "struct IDiamond.FacetCut[]",
                "name": "baseFacets",
                "type": "tuple[]"
              },
              {
                "internalType": "address",
                "name": "init",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "initData",
                "type": "bytes"
              }
            ],
            "internalType": "struct Diamond.InitParams",
            "name": "initDiamondCut",
            "type": "tuple"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_FunctionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_FunctionDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_FunctionFromSameFacetAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_ImmutableFacet",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "init",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidContract",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidFacet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidFacetCutAction",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidFacetCutLength",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          },
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_InvalidFacetRemoval",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidFacetSelectors",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidSelector",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Diamond_UnsupportedFunction",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initializable_AlreadyInitialized",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_AlreadySupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_NotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Proxy__ImplementationIsNotContract",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "facetAddress",
                "type": "address"
              },
              {
                "internalType": "enum IDiamond.FacetCutAction",
                "name": "action",
                "type": "uint8"
              },
              {
                "internalType": "bytes4[]",
                "name": "functionSelectors",
                "type": "bytes4[]"
              }
            ],
            "indexed": false,
            "internalType": "struct IDiamond.FacetCut[]",
            "name": "facetCuts",
            "type": "tuple[]"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "init",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "initPayload",
            "type": "bytes"
          }
        ],
        "name": "DiamondCut",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceRemoved",
        "type": "event"
      },
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "devdoc": {
      "events": {
        "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "params": {
            "facetCuts": "Facet addresses and function selectors.",
            "init": "Address of contract or facet to execute initPayload.",
            "initPayload": "A function call, including function selector and arguments."
          }
        }
      },
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "errors": {
        "Diamond_UnsupportedFunction()": [
          {
            "notice": "Thrown when calling a function that was not registered in the diamond."
          }
        ]
      },
      "events": {
        "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "notice": "Event emitted when facets are added/removed/replaced"
        },
        "InterfaceAdded(bytes4)": {
          "notice": "Emitted when an interface is added to the contract via `_addInterface`."
        },
        "InterfaceRemoved(bytes4)": {
          "notice": "Emitted when an interface is removed from the contract via `_removeInterface`."
        }
      },
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/diamond/Diamond.sol": "Diamond"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/diamond/Diamond.sol": {
      "keccak256": "0x3bdaf57e179f96d9213feea12d092642c0c6a9708807099d9caffbd76cf4a5a9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://63b47cb1703fe9bfccbc72d4c56deb653c95681f62de07701a5946cb1d64a8b2",
        "dweb:/ipfs/QmUv3oQwKQkg6fxgHMugQBKUUCgTYgpihjheYUJ2dUscVx"
      ]
    },
    "contracts/src/diamond/IDiamond.sol": {
      "keccak256": "0x229b4689e28257d9cbf4812e2bf2e42467107ce1922ffc1c167b72fe8b8e4532",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9b1684fd3ebcb86d611495cad57d01002c3a9564975cc4d8d5d3a3afa2e3110e",
        "dweb:/ipfs/QmVFTX38enoWRiDkU6LVutRoFSsSuaoNuzz6ZVKajQK5VB"
      ]
    },
    "contracts/src/diamond/facets/cut/DiamondCutBase.sol": {
      "keccak256": "0x3c7b30a0c0198f7c6f482103ebbcd07a51537b8fda0fdc9aa0c2fa94b7d56381",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d4aa75bea783571945fc0f4fd2565ab603884e40c2b8046971bea647ced77058",
        "dweb:/ipfs/QmWWvTmzSGAD5exYYdJL4EC721nCHw6nH4VS8ns641moX7"
      ]
    },
    "contracts/src/diamond/facets/cut/DiamondCutStorage.sol": {
      "keccak256": "0x66979c2a475d398e3c1800eac068e386283d59a035e61b036aac5aab8800a0a6",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f16a69b5b620f7c7c03539ba4273af399b16635a7e0ccfa1ecd3916c2d443a11",
        "dweb:/ipfs/QmZUg2JrVqUg2Jz7nNnvnSYmkKutzAUm7199EL9xoJt8i6"
      ]
    },
    "contracts/src/diamond/facets/cut/IDiamondCut.sol": {
      "keccak256": "0xcdd725c5691ccc750bf8f5fb14bafa525377ed3bad72d94d0abe633c09e8b2aa",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://024d0f05aef75094de7d104360b68128f48a5ad69e76d79923c71bbddb8eda49",
        "dweb:/ipfs/QmWRhDE7rZQSAbahYXBnJZZrvo7R2huE6oqRhaPECWGGcw"
      ]
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0x2a4f3a99b3b3ac6c2c18431cea80b40774c1d8265ddefac21b26da561e069096",
      "license": "MIT",
      "urls": [
        "bzz-raw://36dbba730942b1fd345f242051ea7f33e979f70392fbd929d8522c0c9c6dd367",
        "dweb:/ipfs/QmYMvYnvg9zQJpDQX9yMHZ1AET9Vx7UXtDenXAs1JhfPpd"
      ]
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0x99dfe047dbb8df48a7490f63939420dd990fb5fd3b3a03c42d0cb9c6f4f9eefa",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://5e8f6d4bff257324e4544cacadd9fee42bada459f457fb707fef90bcfe0e895a",
        "dweb:/ipfs/QmYWEam5VcMt5ViNMKRkaxoD84MK2MewS5iWwSES589Vma"
      ]
    },
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0xa1dfa0449031fced106dd105c184823595398c876be53b4bb8d855937a435816",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e98a9007bca24776e4580c9326cfbb72ffe56334229626c336545be8c2c6e6d2",
        "dweb:/ipfs/QmdqoQTUoDKqirUR3hscy4zBh4Kn2E1fRta1y9DfA43urV"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x503b6ce030f8a760e9a877545b35307d05bbb704b501095795ab2168fe40db59",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://769658fed18c26f67dec9bf4ca18dd595c0343bc8ea21bb3e50595eca3401265",
        "dweb:/ipfs/QmVuqWH5eKqBJbNEtXzybgZ7ahtjTraMew8CMb4TuVUyo6"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0xd2ec3bbe4d15f9232006b41e0a80a5127006243ee596754af77bd3926045782a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8c47e18bfd34a687ce9ec75dc1f1fa5bca088e97e59aad2ac3fdb0989d06d7e6",
        "dweb:/ipfs/QmdktQXV7PKABzh43SZqemdTG25RxMaMsgpXTTUvZUxmfU"
      ]
    },
    "contracts/src/diamond/facets/loupe/DiamondLoupeBase.sol": {
      "keccak256": "0x8db2619bcc4b0c7e920bbd603d8790168a6fed3e687780304fc76278ae0b9cf3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://cef388e76684f823fc6ab718a18bdaec3cc9b002c1cc12b8f6fc1ff07b8f929e",
        "dweb:/ipfs/QmVaUuM1nSTgoSv6Na3fZHcAgCX2XFDuVEek5caFA5iWvx"
      ]
    },
    "contracts/src/diamond/facets/loupe/IDiamondLoupe.sol": {
      "keccak256": "0x83141e0a7e8f1e9a592ca00bb6365aae7296f61d06080024546350594f076618",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f0917399449ea9830cff570d958d28b37b3c83af3a38c5f0a58241264aaf8290",
        "dweb:/ipfs/QmUbJD4U8Fpf7BiXJWExejkd54vUjiXJrjnxxARUDzrGa8"
      ]
    },
    "contracts/src/diamond/proxy/IProxy.sol": {
      "keccak256": "0x56c8fafe5e06a8ad2a80f19d0eb8ac68c8cd42fc00d8501cb65201849fb62799",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2767795c4790a270e44e882e237ceb68afbcb75d811a94a5f9c32c7e16cf8e4d",
        "dweb:/ipfs/QmSWLUpnNk2G7x1PscxecJD3mWbnXo2R7kAkF2qjjquW91"
      ]
    },
    "contracts/src/diamond/proxy/Proxy.sol": {
      "keccak256": "0x633c279137c71720b2134030c8c9843adb5b34c90587c8c29b60d32ec9ba5353",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d73f89f3198fe2a65890d28648d64377ecee50caf2cd62a787c00aafe5b21708",
        "dweb:/ipfs/QmZnHjDoZBnmCqod18WPSm7jdREwy1f7yhuq7Z3RJmE6Jh"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
      "license": "MIT",
      "urls": [
        "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
        "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    }
  },
  "version": 1
}