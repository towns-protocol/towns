/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Mock721, Mock721Interface } from "../../MockToken.sol/Mock721";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mintTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405180604001604052806005815260200164135e53919560da1b815250604051806040016040528060048152602001631353919560e21b81525081600090816200005e91906200011b565b5060016200006d82826200011b565b505050620001e7565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a157607f821691505b602082108103620000c257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011657600081815260208120601f850160051c81016020861015620000f15750805b601f850160051c820191505b818110156200011257828155600101620000fd565b5050505b505050565b81516001600160401b0381111562000137576200013762000076565b6200014f816200014884546200008c565b84620000c8565b602080601f8311600181146200018757600084156200016e5750858301515b600019600386901b1c1916600185901b17855562000112565b600085815260208120601f198616915b82811015620001b85788860151825594840194600190910190840162000197565b5085821015620001d75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61136580620001f76000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb46514610213578063b88d4fde14610226578063c87b56dd14610239578063e985e9c51461024c57600080fd5b80636352211e146101d257806370a08231146101e5578063755edd17146101f857806395d89b411461020b57600080fd5b806317d70f7c116100d357806317d70f7c1461018257806323b872dd1461019957806340c10f19146101ac57806342842e0e146101bf57600080fd5b806301ffc9a71461010557806306fdde031461012d578063081812fc14610142578063095ea7b31461016d575b600080fd5b610118610113366004610eca565b610288565b60405190151581526020015b60405180910390f35b6101356102da565b6040516101249190610f37565b610155610150366004610f4a565b61036c565b6040516001600160a01b039091168152602001610124565b61018061017b366004610f7f565b610393565b005b61018b60065481565b604051908152602001610124565b6101806101a7366004610fa9565b6104ad565b6101806101ba366004610f7f565b6104de565b6101806101cd366004610fa9565b61051d565b6101556101e0366004610f4a565b610538565b61018b6101f3366004610fe5565b610598565b610180610206366004610fe5565b61061e565b610135610642565b610180610221366004611000565b610651565b610180610234366004611052565b610660565b610135610247366004610f4a565b610698565b61011861025a36600461112e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102b957506001600160e01b03198216635b5e139f60e01b145b806102d457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102e990611161565b80601f016020809104026020016040519081016040528092919081815260200182805461031590611161565b80156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b5050505050905090565b60006103778261070c565b506000908152600460205260409020546001600160a01b031690565b600061039e82610538565b9050806001600160a01b0316836001600160a01b0316036104105760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061042c575061042c813361025a565b61049e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610407565b6104a8838361076b565b505050565b6104b733826107d9565b6104d35760405162461bcd60e51b81526004016104079061119b565b6104a8838383610858565b60005b818110156104a8576104f5836006546109bc565b60068054906000610505836111e8565b91905055508080610515906111e8565b9150506104e1565b6104a883838360405180602001604052806000815250610660565b6000818152600260205260408120546001600160a01b0316806102d45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610407565b60006001600160a01b0382166106025760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610407565b506001600160a01b031660009081526003602052604090205490565b6006805490600061062e836111e8565b919050555061063f816006546109bc565b50565b6060600180546102e990611161565b61065c338383610b47565b5050565b61066a33836107d9565b6106865760405162461bcd60e51b81526004016104079061119b565b61069284848484610c15565b50505050565b60606106a38261070c565b60006106ba60408051602081019091526000815290565b905060008151116106da5760405180602001604052806000815250610705565b806106e484610c48565b6040516020016106f592919061120f565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b031661063f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610407565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107a082610538565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806107e583610538565b9050806001600160a01b0316846001600160a01b0316148061082c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806108505750836001600160a01b03166108458461036c565b6001600160a01b0316145b949350505050565b826001600160a01b031661086b82610538565b6001600160a01b0316146108915760405162461bcd60e51b81526004016104079061123e565b6001600160a01b0382166108f35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610407565b826001600160a01b031661090682610538565b6001600160a01b03161461092c5760405162461bcd60e51b81526004016104079061123e565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610a125760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610407565b6000818152600260205260409020546001600160a01b031615610a775760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610407565b6000818152600260205260409020546001600160a01b031615610adc5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610407565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b031603610ba85760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610407565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c20848484610858565b610c2c84848484610cdb565b6106925760405162461bcd60e51b815260040161040790611283565b60606000610c5583610ddc565b600101905060008167ffffffffffffffff811115610c7557610c7561103c565b6040519080825280601f01601f191660200182016040528015610c9f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ca957509392505050565b60006001600160a01b0384163b15610dd157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d1f9033908990889088906004016112d5565b6020604051808303816000875af1925050508015610d5a575060408051601f3d908101601f19168201909252610d5791810190611312565b60015b610db7573d808015610d88576040519150601f19603f3d011682016040523d82523d6000602084013e610d8d565b606091505b508051600003610daf5760405162461bcd60e51b815260040161040790611283565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610850565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610e1b5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610e47576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e6557662386f26fc10000830492506010015b6305f5e1008310610e7d576305f5e100830492506008015b6127108310610e9157612710830492506004015b60648310610ea3576064830492506002015b600a83106102d45760010192915050565b6001600160e01b03198116811461063f57600080fd5b600060208284031215610edc57600080fd5b813561070581610eb4565b60005b83811015610f02578181015183820152602001610eea565b50506000910152565b60008151808452610f23816020860160208601610ee7565b601f01601f19169290920160200192915050565b6020815260006107056020830184610f0b565b600060208284031215610f5c57600080fd5b5035919050565b80356001600160a01b0381168114610f7a57600080fd5b919050565b60008060408385031215610f9257600080fd5b610f9b83610f63565b946020939093013593505050565b600080600060608486031215610fbe57600080fd5b610fc784610f63565b9250610fd560208501610f63565b9150604084013590509250925092565b600060208284031215610ff757600080fd5b61070582610f63565b6000806040838503121561101357600080fd5b61101c83610f63565b91506020830135801515811461103157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561106857600080fd5b61107185610f63565b935061107f60208601610f63565b925060408501359150606085013567ffffffffffffffff808211156110a357600080fd5b818701915087601f8301126110b757600080fd5b8135818111156110c9576110c961103c565b604051601f8201601f19908116603f011681019083821181831017156110f1576110f161103c565b816040528281528a602084870101111561110a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561114157600080fd5b61114a83610f63565b915061115860208401610f63565b90509250929050565b600181811c9082168061117557607f821691505b60208210810361119557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60006001820161120857634e487b7160e01b600052601160045260246000fd5b5060010190565b60008351611221818460208801610ee7565b835190830190611235818360208801610ee7565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061130890830184610f0b565b9695505050505050565b60006020828403121561132457600080fd5b815161070581610eb456fea2646970667358221220e0c883eb44c6d04405434675438f3f5d0b67f59a9f949bdab7a93591eaf2db9964736f6c63430008130033";

type Mock721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Mock721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mock721__factory extends ContractFactory {
  constructor(...args: Mock721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Mock721> {
    return super.deploy(overrides || {}) as Promise<Mock721>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Mock721 {
    return super.attach(address) as Mock721;
  }
  override connect(signer: Signer): Mock721__factory {
    return super.connect(signer) as Mock721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Mock721Interface {
    return new utils.Interface(_abi) as Mock721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Mock721 {
    return new Contract(address, _abi, signerOrProvider) as Mock721;
  }
}
