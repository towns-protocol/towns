/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IEntitlementGatedInterface extends utils.Interface {
  functions: {
    "getEntitlementOperations()": FunctionFragment;
    "postEntitlementCheckResult(bytes32,uint8)": FunctionFragment;
    "removeTransaction(bytes32)": FunctionFragment;
    "requestEntitlementCheck()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getEntitlementOperations"
      | "postEntitlementCheckResult"
      | "removeTransaction"
      | "requestEntitlementCheck"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEntitlementOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postEntitlementCheckResult",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEntitlementCheck",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getEntitlementOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postEntitlementCheckResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEntitlementCheck",
    data: BytesLike
  ): Result;

  events: {
    "EntitlementCheckResultPosted(bytes32,uint8)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "EntitlementCheckResultPosted"
  ): EventFragment;
}

export interface EntitlementCheckResultPostedEventObject {
  transactionId: string;
  result: number;
}
export type EntitlementCheckResultPostedEvent = TypedEvent<
  [string, number],
  EntitlementCheckResultPostedEventObject
>;

export type EntitlementCheckResultPostedEventFilter =
  TypedEventFilter<EntitlementCheckResultPostedEvent>;

export interface IEntitlementGated extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEntitlementGatedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEntitlementOperations(overrides?: CallOverrides): Promise<[string]>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestEntitlementCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getEntitlementOperations(overrides?: CallOverrides): Promise<string>;

  postEntitlementCheckResult(
    transactionId: PromiseOrValue<BytesLike>,
    result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTransaction(
    transactionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestEntitlementCheck(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getEntitlementOperations(overrides?: CallOverrides): Promise<string>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestEntitlementCheck(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EntitlementCheckResultPosted(bytes32,uint8)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;
    EntitlementCheckResultPosted(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;
  };

  estimateGas: {
    getEntitlementOperations(overrides?: CallOverrides): Promise<BigNumber>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestEntitlementCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEntitlementOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postEntitlementCheckResult(
      transactionId: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestEntitlementCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
