/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IChannel, IChannelInterface } from "../IChannel";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "channelId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
    ],
    name: "addRoleToChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "channelId",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        internalType: "uint256[]",
        name: "roleIds",
        type: "uint256[]",
      },
    ],
    name: "createChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "channelId",
        type: "string",
      },
    ],
    name: "getChannel",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256[]",
            name: "roleIds",
            type: "uint256[]",
          },
        ],
        internalType: "struct IChannelBase.Channel",
        name: "channel",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChannels",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256[]",
            name: "roleIds",
            type: "uint256[]",
          },
        ],
        internalType: "struct IChannelBase.Channel[]",
        name: "channels",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "channelId",
        type: "string",
      },
    ],
    name: "removeChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "channelId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "roleId",
        type: "uint256",
      },
    ],
    name: "removeRoleFromChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "channelId",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        internalType: "bool",
        name: "disabled",
        type: "bool",
      },
    ],
    name: "updateChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IChannel__factory {
  static readonly abi = _abi;
  static createInterface(): IChannelInterface {
    return new utils.Interface(_abi) as IChannelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IChannel {
    return new Contract(address, _abi, signerOrProvider) as IChannel;
  }
}
