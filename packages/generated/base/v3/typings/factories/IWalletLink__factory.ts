/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IWalletLink, IWalletLinkInterface } from "../IWalletLink";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    name: "LinkAlreadyExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    name: "LinkWalletToRootKey",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    name: "RemoveLinkViaRootKey",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    name: "RemoveLinkViaWallet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "checkIfLinked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    name: "getLatestNonceForRootKey",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    name: "getLatestRemoveNonceForRootKey",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "getLatestRemoveNonceForWallet",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "getRootKeyForWallet",
    outputs: [
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
    ],
    name: "getWalletsByRootKey",
    outputs: [
      {
        internalType: "address[]",
        name: "wallets",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "walletSignature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "rootKeySignature",
        type: "bytes",
      },
      {
        internalType: "uint64",
        name: "nonce",
        type: "uint64",
      },
    ],
    name: "linkWalletToRootKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "rootKeySignature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "removeNonce",
        type: "uint64",
      },
    ],
    name: "removeLinkViaRootKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "walletSignature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "rootKey",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "removeNonce",
        type: "uint64",
      },
    ],
    name: "removeLinkViaWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IWalletLink__factory {
  static readonly abi = _abi;
  static createInterface(): IWalletLinkInterface {
    return new utils.Interface(_abi) as IWalletLinkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IWalletLink {
    return new Contract(address, _abi, signerOrProvider) as IWalletLink;
  }
}
