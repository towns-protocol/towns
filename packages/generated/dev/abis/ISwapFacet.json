{"abi":[{"type":"function","name":"executeSwap","inputs":[{"name":"params","type":"tuple","internalType":"struct ISwapRouterBase.ExactInputParams","components":[{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"minAmountOut","type":"uint256","internalType":"uint256"},{"name":"recipient","type":"address","internalType":"address"}]},{"name":"routerParams","type":"tuple","internalType":"struct ISwapRouterBase.RouterParams","components":[{"name":"router","type":"address","internalType":"address"},{"name":"approveTarget","type":"address","internalType":"address"},{"name":"swapData","type":"bytes","internalType":"bytes"}]},{"name":"poster","type":"address","internalType":"address"}],"outputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"getSwapFees","inputs":[],"outputs":[{"name":"treasuryBps","type":"uint16","internalType":"uint16"},{"name":"posterBps","type":"uint16","internalType":"uint16"},{"name":"collectPosterFeeToSpace","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getSwapRouter","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setSwapFeeConfig","inputs":[{"name":"posterFeeBps","type":"uint16","internalType":"uint16"},{"name":"collectPosterFeeToSpace","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"FeeDistribution","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"treasury","type":"address","indexed":true,"internalType":"address"},{"name":"poster","type":"address","indexed":true,"internalType":"address"},{"name":"treasuryAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"posterAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Swap","inputs":[{"name":"router","type":"address","indexed":true,"internalType":"address"},{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"tokenIn","type":"address","indexed":false,"internalType":"address"},{"name":"tokenOut","type":"address","indexed":false,"internalType":"address"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"recipient","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SwapExecuted","inputs":[{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"tokenIn","type":"address","indexed":true,"internalType":"address"},{"name":"tokenOut","type":"address","indexed":true,"internalType":"address"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"poster","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SwapFeeConfigUpdated","inputs":[{"name":"posterFeeBps","type":"uint16","indexed":false,"internalType":"uint16"},{"name":"collectPosterFeeToSpace","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"SwapRouterInitialized","inputs":[{"name":"spaceFactory","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"SwapFacet__SwapFailed","inputs":[]},{"type":"error","name":"SwapFacet__SwapRouterNotSet","inputs":[]},{"type":"error","name":"SwapFacet__TotalFeeTooHigh","inputs":[]},{"type":"error","name":"SwapRouter__InsufficientOutput","inputs":[]},{"type":"error","name":"SwapRouter__InvalidAmount","inputs":[]},{"type":"error","name":"SwapRouter__InvalidRouter","inputs":[]},{"type":"error","name":"SwapRouter__UnexpectedETH","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)":"e73dfd5d","getSwapFees()":"c91bbba5","getSwapRouter()":"725c9c49","setSwapFeeConfig(uint16,bool)":"d1e8507f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SwapFacet__SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFacet__SwapRouterNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFacet__TotalFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__InsufficientOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__InvalidRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__UnexpectedETH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"posterAmount\",\"type\":\"uint256\"}],\"name\":\"FeeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"posterFeeBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"collectPosterFeeToSpace\",\"type\":\"bool\"}],\"name\":\"SwapFeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceFactory\",\"type\":\"address\"}],\"name\":\"SwapRouterInitialized\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ISwapRouterBase.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct ISwapRouterBase.RouterParams\",\"name\":\"routerParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"}],\"name\":\"executeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"treasuryBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"posterBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"collectPosterFeeToSpace\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"posterFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"collectPosterFeeToSpace\",\"type\":\"bool\"}],\"name\":\"setSwapFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeDistribution(address,address,address,uint256,uint256)\":{\"params\":{\"poster\":\"The address receiving the poster fee (if any)\",\"posterAmount\":\"The amount of tokens sent to the poster\",\"token\":\"The token in which fees are paid\",\"treasury\":\"The address receiving the treasury fee\",\"treasuryAmount\":\"The amount of tokens sent to the treasury\"}},\"Swap(address,address,address,address,uint256,uint256,address)\":{\"params\":{\"amountIn\":\"The amount of input tokens sold\",\"amountOut\":\"The amount of output tokens received\",\"caller\":\"The address that initiated the swap\",\"recipient\":\"The address that received the output tokens\",\"router\":\"The address of the router used\",\"tokenIn\":\"The input token\",\"tokenOut\":\"The output token\"}},\"SwapExecuted(address,address,address,uint256,uint256,address)\":{\"params\":{\"amountIn\":\"The amount of input tokens sold\",\"amountOut\":\"The amount of output tokens received\",\"poster\":\"The address that posted this swap opportunity\",\"recipient\":\"The address that received the output tokens\",\"tokenIn\":\"The input token\",\"tokenOut\":\"The output token\"}},\"SwapFeeConfigUpdated(uint16,bool)\":{\"params\":{\"collectPosterFeeToSpace\":\"Whether the poster fee is collected to the space\",\"posterFeeBps\":\"Poster fee in basis points\"}},\"SwapRouterInitialized(address)\":{\"params\":{\"spaceFactory\":\"The address of the space factory\"}}},\"kind\":\"dev\",\"methods\":{\"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)\":{\"params\":{\"params\":\"The parameters for the swap\",\"poster\":\"The address that posted this swap opportunity\",\"routerParams\":\"The router parameters for the swap\"},\"returns\":{\"amountOut\":\"The amount of tokenOut received\"}},\"getSwapFees()\":{\"returns\":{\"collectPosterFeeToSpace\":\"Whether the poster fee is collected to the space\",\"posterBps\":\"Poster fee in basis points (space specific)\",\"treasuryBps\":\"Treasury fee in basis points (from protocol config)\"}},\"getSwapRouter()\":{\"returns\":{\"_0\":\"The address of the swap router\"}},\"setSwapFeeConfig(uint16,bool)\":{\"params\":{\"collectPosterFeeToSpace\":\"Whether to collect the poster fee to the space instead of the poster\",\"posterFeeBps\":\"Poster fee in basis points\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SwapFacet__SwapFailed()\":[{\"notice\":\"Error thrown when a swap execution fails\"}],\"SwapFacet__SwapRouterNotSet()\":[{\"notice\":\"Error thrown when the swap router address is not set\"}],\"SwapFacet__TotalFeeTooHigh()\":[{\"notice\":\"Error thrown when the total fee exceeds the maximum allowed\"}],\"SwapRouter__InsufficientOutput()\":[{\"notice\":\"Error thrown when the output amount is less than the minimum expected\"}],\"SwapRouter__InvalidAmount()\":[{\"notice\":\"Error thrown when an invalid amount is provided\"}],\"SwapRouter__InvalidRouter()\":[{\"notice\":\"Error thrown when an invalid router is specified\"}],\"SwapRouter__UnexpectedETH()\":[{\"notice\":\"Error thrown when ETH is sent but not expected (tokenIn is not the native token)\"}]},\"events\":{\"FeeDistribution(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when fees are distributed after a swap\"},\"Swap(address,address,address,address,uint256,uint256,address)\":{\"notice\":\"Emitted when a swap is successfully executed\"},\"SwapExecuted(address,address,address,uint256,uint256,address)\":{\"notice\":\"Emitted when a swap is successfully executed through the space\"},\"SwapFeeConfigUpdated(uint16,bool)\":{\"notice\":\"Emitted when swap fee configuration is updated\"},\"SwapRouterInitialized(address)\":{\"notice\":\"Emitted when the SwapRouter is initialized\"}},\"kind\":\"user\",\"methods\":{\"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)\":{\"notice\":\"Execute a swap within the space context\"},\"getSwapFees()\":{\"notice\":\"Get the swap fees for this space\"},\"getSwapRouter()\":{\"notice\":\"Get the current swap router address\"},\"setSwapFeeConfig(uint16,bool)\":{\"notice\":\"Set the swap fee configuration for this space\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/spaces/facets/swap/ISwapFacet.sol\":\"ISwapFacet\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":4194303},\"remappings\":[\":@erc6900/reference-implementation/=node_modules/@erc6900/reference-implementation/src/\",\":@eth-infinitism/account-abstraction/=node_modules/account-abstraction/contracts/\",\":@ethereum-attestation-service/eas-contracts/=node_modules/@ethereum-attestation-service/eas-contracts/contracts/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/math/=node_modules/@prb/math/src/\",\":@prb/test/=node_modules/@prb/test/src/\",\":@solidity/=node_modules/crypto-lib/src/\",\":@towns-protocol/diamond/=node_modules/@towns-protocol/diamond/\",\":account-abstraction/=node_modules/account-abstraction/contracts/\",\":crypto-lib/=node_modules/crypto-lib/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/account-abstraction/node_modules/hardhat-deploy/\",\":hardhat/=node_modules/@ethereum-attestation-service/eas-contracts/node_modules/hardhat/\",\":solady/=node_modules/solady/src/\"]},\"sources\":{\"src/router/ISwapRouter.sol\":{\"keccak256\":\"0x93ff6e8518ae98ca1af5ac4895e181fe3265121348d68421e8f66513c7cf0c61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5e62f01885bec42707085b9fdbb0395bb185998cb67ec2744362cc6b5e8104fa\",\"dweb:/ipfs/QmaQf5Lhq65JUXhsP3kagJtavg1iMBmQzXvZKoQNDGyqpS\"]},\"src/spaces/facets/swap/ISwapFacet.sol\":{\"keccak256\":\"0xe76ed063f8052330b998f14748303392250400524f10250cdb2c64d29b7df31c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://722a8d7a3705fd2cc0e02a11633b64eb2108be8ef42da9cd38301f2968e6519f\",\"dweb:/ipfs/QmcZN6AooARkiNYQbo8umMD8XZ4uPabKgynZpiH36u9KoN\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.29+commit.ab55807c"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"SwapFacet__SwapFailed"},{"inputs":[],"type":"error","name":"SwapFacet__SwapRouterNotSet"},{"inputs":[],"type":"error","name":"SwapFacet__TotalFeeTooHigh"},{"inputs":[],"type":"error","name":"SwapRouter__InsufficientOutput"},{"inputs":[],"type":"error","name":"SwapRouter__InvalidAmount"},{"inputs":[],"type":"error","name":"SwapRouter__InvalidRouter"},{"inputs":[],"type":"error","name":"SwapRouter__UnexpectedETH"},{"inputs":[{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"address","name":"treasury","type":"address","indexed":true},{"internalType":"address","name":"poster","type":"address","indexed":true},{"internalType":"uint256","name":"treasuryAmount","type":"uint256","indexed":false},{"internalType":"uint256","name":"posterAmount","type":"uint256","indexed":false}],"type":"event","name":"FeeDistribution","anonymous":false},{"inputs":[{"internalType":"address","name":"router","type":"address","indexed":true},{"internalType":"address","name":"caller","type":"address","indexed":true},{"internalType":"address","name":"tokenIn","type":"address","indexed":false},{"internalType":"address","name":"tokenOut","type":"address","indexed":false},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false},{"internalType":"address","name":"recipient","type":"address","indexed":false}],"type":"event","name":"Swap","anonymous":false},{"inputs":[{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"address","name":"tokenIn","type":"address","indexed":true},{"internalType":"address","name":"tokenOut","type":"address","indexed":true},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false},{"internalType":"address","name":"poster","type":"address","indexed":false}],"type":"event","name":"SwapExecuted","anonymous":false},{"inputs":[{"internalType":"uint16","name":"posterFeeBps","type":"uint16","indexed":false},{"internalType":"bool","name":"collectPosterFeeToSpace","type":"bool","indexed":false}],"type":"event","name":"SwapFeeConfigUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"spaceFactory","type":"address","indexed":false}],"type":"event","name":"SwapRouterInitialized","anonymous":false},{"inputs":[{"internalType":"struct ISwapRouterBase.ExactInputParams","name":"params","type":"tuple","components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}]},{"internalType":"struct ISwapRouterBase.RouterParams","name":"routerParams","type":"tuple","components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"approveTarget","type":"address"},{"internalType":"bytes","name":"swapData","type":"bytes"}]},{"internalType":"address","name":"poster","type":"address"}],"stateMutability":"payable","type":"function","name":"executeSwap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getSwapFees","outputs":[{"internalType":"uint16","name":"treasuryBps","type":"uint16"},{"internalType":"uint16","name":"posterBps","type":"uint16"},{"internalType":"bool","name":"collectPosterFeeToSpace","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getSwapRouter","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint16","name":"posterFeeBps","type":"uint16"},{"internalType":"bool","name":"collectPosterFeeToSpace","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setSwapFeeConfig"}],"devdoc":{"kind":"dev","methods":{"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)":{"params":{"params":"The parameters for the swap","poster":"The address that posted this swap opportunity","routerParams":"The router parameters for the swap"},"returns":{"amountOut":"The amount of tokenOut received"}},"getSwapFees()":{"returns":{"collectPosterFeeToSpace":"Whether the poster fee is collected to the space","posterBps":"Poster fee in basis points (space specific)","treasuryBps":"Treasury fee in basis points (from protocol config)"}},"getSwapRouter()":{"returns":{"_0":"The address of the swap router"}},"setSwapFeeConfig(uint16,bool)":{"params":{"collectPosterFeeToSpace":"Whether to collect the poster fee to the space instead of the poster","posterFeeBps":"Poster fee in basis points"}}},"version":1},"userdoc":{"kind":"user","methods":{"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)":{"notice":"Execute a swap within the space context"},"getSwapFees()":{"notice":"Get the swap fees for this space"},"getSwapRouter()":{"notice":"Get the current swap router address"},"setSwapFeeConfig(uint16,bool)":{"notice":"Set the swap fee configuration for this space"}},"version":1}},"settings":{"remappings":["@erc6900/reference-implementation/=node_modules/@erc6900/reference-implementation/src/","@eth-infinitism/account-abstraction/=node_modules/account-abstraction/contracts/","@ethereum-attestation-service/eas-contracts/=node_modules/@ethereum-attestation-service/eas-contracts/contracts/","@openzeppelin/=node_modules/@openzeppelin/","@prb/math/=node_modules/@prb/math/src/","@prb/test/=node_modules/@prb/test/src/","@solidity/=node_modules/crypto-lib/src/","@towns-protocol/diamond/=node_modules/@towns-protocol/diamond/","account-abstraction/=node_modules/account-abstraction/contracts/","crypto-lib/=node_modules/crypto-lib/src/","forge-std/=node_modules/forge-std/src/","hardhat-deploy/=node_modules/account-abstraction/node_modules/hardhat-deploy/","hardhat/=node_modules/@ethereum-attestation-service/eas-contracts/node_modules/hardhat/","solady/=node_modules/solady/src/"],"optimizer":{"enabled":true,"runs":4194303},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/spaces/facets/swap/ISwapFacet.sol":"ISwapFacet"},"evmVersion":"cancun","libraries":{}},"sources":{"src/router/ISwapRouter.sol":{"keccak256":"0x93ff6e8518ae98ca1af5ac4895e181fe3265121348d68421e8f66513c7cf0c61","urls":["bzz-raw://5e62f01885bec42707085b9fdbb0395bb185998cb67ec2744362cc6b5e8104fa","dweb:/ipfs/QmaQf5Lhq65JUXhsP3kagJtavg1iMBmQzXvZKoQNDGyqpS"],"license":"MIT"},"src/spaces/facets/swap/ISwapFacet.sol":{"keccak256":"0xe76ed063f8052330b998f14748303392250400524f10250cdb2c64d29b7df31c","urls":["bzz-raw://722a8d7a3705fd2cc0e02a11633b64eb2108be8ef42da9cd38301f2968e6519f","dweb:/ipfs/QmcZN6AooARkiNYQbo8umMD8XZ4uPabKgynZpiH36u9KoN"],"license":"MIT"}},"version":1},"id":491}