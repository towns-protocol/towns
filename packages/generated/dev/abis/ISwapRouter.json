{"abi":[{"type":"function","name":"executeSwap","inputs":[{"name":"params","type":"tuple","internalType":"struct ISwapRouterBase.ExactInputParams","components":[{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"minAmountOut","type":"uint256","internalType":"uint256"},{"name":"recipient","type":"address","internalType":"address"}]},{"name":"routerParams","type":"tuple","internalType":"struct ISwapRouterBase.RouterParams","components":[{"name":"router","type":"address","internalType":"address"},{"name":"approveTarget","type":"address","internalType":"address"},{"name":"swapData","type":"bytes","internalType":"bytes"}]},{"name":"poster","type":"address","internalType":"address"}],"outputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"},{"name":"protocolFee","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"getETHInputFees","inputs":[{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"caller","type":"address","internalType":"address"},{"name":"poster","type":"address","internalType":"address"}],"outputs":[{"name":"amountInAfterFees","type":"uint256","internalType":"uint256"},{"name":"protocolFee","type":"uint256","internalType":"uint256"},{"name":"posterFee","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"FeeDistribution","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"protocol","type":"address","indexed":true,"internalType":"address"},{"name":"poster","type":"address","indexed":true,"internalType":"address"},{"name":"protocolAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"posterAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Swap","inputs":[{"name":"router","type":"address","indexed":true,"internalType":"address"},{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"tokenIn","type":"address","indexed":false,"internalType":"address"},{"name":"tokenOut","type":"address","indexed":false,"internalType":"address"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"recipient","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SwapRouterInitialized","inputs":[{"name":"spaceFactory","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"SwapRouter__InsufficientOutput","inputs":[]},{"type":"error","name":"SwapRouter__InvalidAmount","inputs":[]},{"type":"error","name":"SwapRouter__InvalidBps","inputs":[]},{"type":"error","name":"SwapRouter__InvalidRouter","inputs":[]},{"type":"error","name":"SwapRouter__UnexpectedETH","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)":"e73dfd5d","getETHInputFees(uint256,address,address)":"83996c8b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SwapRouter__InsufficientOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__InvalidBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__InvalidRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapRouter__UnexpectedETH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"posterAmount\",\"type\":\"uint256\"}],\"name\":\"FeeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spaceFactory\",\"type\":\"address\"}],\"name\":\"SwapRouterInitialized\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ISwapRouterBase.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct ISwapRouterBase.RouterParams\",\"name\":\"routerParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"}],\"name\":\"executeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"}],\"name\":\"getETHInputFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInAfterFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"posterFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeDistribution(address,address,address,uint256,uint256)\":{\"params\":{\"poster\":\"The address receiving the poster fee (if any)\",\"posterAmount\":\"The amount of tokens sent to the poster\",\"protocol\":\"The address receiving the protocol fee\",\"protocolAmount\":\"The amount of tokens sent as protocol fee\",\"token\":\"The token in which fees are paid\"}},\"Swap(address,address,address,address,uint256,uint256,address)\":{\"params\":{\"amountIn\":\"The amount of input tokens sold\",\"amountOut\":\"The amount of output tokens received\",\"caller\":\"The address that initiated the swap\",\"recipient\":\"The address that received the output tokens\",\"router\":\"The address of the router used\",\"tokenIn\":\"The input token\",\"tokenOut\":\"The output token\"}},\"SwapRouterInitialized(address)\":{\"params\":{\"spaceFactory\":\"The address of the space factory\"}}},\"kind\":\"dev\",\"methods\":{\"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)\":{\"params\":{\"params\":\"The parameters for the swap tokenIn The token being sold tokenOut The token being bought amountIn The amount of tokenIn to swap minAmountOut The minimum amount of tokenOut to receive recipient The address to receive the output tokens\",\"poster\":\"The address that posted this swap opportunity\",\"routerParams\":\"The router parameters for the swap router The address of the router to use approveTarget The address to approve the token transfer swapData The calldata to execute on the router\"},\"returns\":{\"amountOut\":\"The amount of tokenOut received\",\"protocolFee\":\"The amount of protocol fee collected\"}},\"getETHInputFees(uint256,address,address)\":{\"details\":\"This function helps integrators determine the actual amount that will be sent to external routers after protocol and poster fees are deducted. Integration flow: 1. Call this function to get `amountInAfterFees` 2. Use `amountInAfterFees` to get quotes from aggregator 3. Construct RouterParams with the aggregator quote 4. Call executeSwap with original amountIn and the prepared RouterParams\",\"params\":{\"amountIn\":\"The original ETH amount before fees\",\"caller\":\"The address that will call executeSwap (to calculate correct fees based on space status)\",\"poster\":\"The address that posted this swap opportunity\"},\"returns\":{\"amountInAfterFees\":\"The ETH amount that will be sent to external router after fees\",\"posterFee\":\"The amount collected as poster fee\",\"protocolFee\":\"The amount collected as protocol fee\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SwapRouter__InsufficientOutput()\":[{\"notice\":\"Error thrown when the output amount is less than the minimum expected\"}],\"SwapRouter__InvalidAmount()\":[{\"notice\":\"Error thrown when an invalid amount is provided\"}],\"SwapRouter__InvalidBps()\":[{\"notice\":\"Error thrown when an invalid BPS value is provided\"}],\"SwapRouter__InvalidRouter()\":[{\"notice\":\"Error thrown when an invalid router is specified\"}],\"SwapRouter__UnexpectedETH()\":[{\"notice\":\"Error thrown when ETH is sent but not expected (tokenIn is not the native token)\"}]},\"events\":{\"FeeDistribution(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when fees are distributed after a swap\"},\"Swap(address,address,address,address,uint256,uint256,address)\":{\"notice\":\"Emitted when a swap is successfully executed\"},\"SwapRouterInitialized(address)\":{\"notice\":\"Emitted when the SwapRouter is initialized\"}},\"kind\":\"user\",\"methods\":{\"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)\":{\"notice\":\"Executes a swap through a whitelisted router\"},\"getETHInputFees(uint256,address,address)\":{\"notice\":\"Calculate fees for ETH input swaps before execution\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/router/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":4194303},\"remappings\":[\":@erc6900/reference-implementation/=node_modules/@erc6900/reference-implementation/src/\",\":@eth-infinitism/account-abstraction/=node_modules/account-abstraction/contracts/\",\":@ethereum-attestation-service/eas-contracts/=node_modules/@ethereum-attestation-service/eas-contracts/contracts/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/math/=node_modules/@prb/math/src/\",\":@prb/test/=node_modules/@prb/test/src/\",\":@solidity/=node_modules/crypto-lib/src/\",\":@towns-protocol/diamond/=node_modules/@towns-protocol/diamond/\",\":account-abstraction/=node_modules/account-abstraction/contracts/\",\":crypto-lib/=node_modules/crypto-lib/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/account-abstraction/node_modules/hardhat-deploy/\",\":hardhat/=node_modules/@ethereum-attestation-service/eas-contracts/node_modules/hardhat/\",\":solady/=node_modules/solady/src/\"]},\"sources\":{\"src/router/ISwapRouter.sol\":{\"keccak256\":\"0xe0615eda34ea374020c67211933bc78b94b70aeed1f57ca755bfe89b7a4e2d53\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61a816f3566c4b51e8a18f19589ddecd124f4909f4f124a1a2b7eb8e7222e630\",\"dweb:/ipfs/QmTJ7i9vaGCfrVKhzZ7moQxxLFihLYUCQ9Ex2TBJkgSsTa\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.29+commit.ab55807c"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"SwapRouter__InsufficientOutput"},{"inputs":[],"type":"error","name":"SwapRouter__InvalidAmount"},{"inputs":[],"type":"error","name":"SwapRouter__InvalidBps"},{"inputs":[],"type":"error","name":"SwapRouter__InvalidRouter"},{"inputs":[],"type":"error","name":"SwapRouter__UnexpectedETH"},{"inputs":[{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"address","name":"protocol","type":"address","indexed":true},{"internalType":"address","name":"poster","type":"address","indexed":true},{"internalType":"uint256","name":"protocolAmount","type":"uint256","indexed":false},{"internalType":"uint256","name":"posterAmount","type":"uint256","indexed":false}],"type":"event","name":"FeeDistribution","anonymous":false},{"inputs":[{"internalType":"address","name":"router","type":"address","indexed":true},{"internalType":"address","name":"caller","type":"address","indexed":true},{"internalType":"address","name":"tokenIn","type":"address","indexed":false},{"internalType":"address","name":"tokenOut","type":"address","indexed":false},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false},{"internalType":"address","name":"recipient","type":"address","indexed":false}],"type":"event","name":"Swap","anonymous":false},{"inputs":[{"internalType":"address","name":"spaceFactory","type":"address","indexed":false}],"type":"event","name":"SwapRouterInitialized","anonymous":false},{"inputs":[{"internalType":"struct ISwapRouterBase.ExactInputParams","name":"params","type":"tuple","components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}]},{"internalType":"struct ISwapRouterBase.RouterParams","name":"routerParams","type":"tuple","components":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"approveTarget","type":"address"},{"internalType":"bytes","name":"swapData","type":"bytes"}]},{"internalType":"address","name":"poster","type":"address"}],"stateMutability":"payable","type":"function","name":"executeSwap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"poster","type":"address"}],"stateMutability":"view","type":"function","name":"getETHInputFees","outputs":[{"internalType":"uint256","name":"amountInAfterFees","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"},{"internalType":"uint256","name":"posterFee","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)":{"params":{"params":"The parameters for the swap tokenIn The token being sold tokenOut The token being bought amountIn The amount of tokenIn to swap minAmountOut The minimum amount of tokenOut to receive recipient The address to receive the output tokens","poster":"The address that posted this swap opportunity","routerParams":"The router parameters for the swap router The address of the router to use approveTarget The address to approve the token transfer swapData The calldata to execute on the router"},"returns":{"amountOut":"The amount of tokenOut received","protocolFee":"The amount of protocol fee collected"}},"getETHInputFees(uint256,address,address)":{"details":"This function helps integrators determine the actual amount that will be sent to external routers after protocol and poster fees are deducted. Integration flow: 1. Call this function to get `amountInAfterFees` 2. Use `amountInAfterFees` to get quotes from aggregator 3. Construct RouterParams with the aggregator quote 4. Call executeSwap with original amountIn and the prepared RouterParams","params":{"amountIn":"The original ETH amount before fees","caller":"The address that will call executeSwap (to calculate correct fees based on space status)","poster":"The address that posted this swap opportunity"},"returns":{"amountInAfterFees":"The ETH amount that will be sent to external router after fees","posterFee":"The amount collected as poster fee","protocolFee":"The amount collected as protocol fee"}}},"version":1},"userdoc":{"kind":"user","methods":{"executeSwap((address,address,uint256,uint256,address),(address,address,bytes),address)":{"notice":"Executes a swap through a whitelisted router"},"getETHInputFees(uint256,address,address)":{"notice":"Calculate fees for ETH input swaps before execution"}},"version":1}},"settings":{"remappings":["@erc6900/reference-implementation/=node_modules/@erc6900/reference-implementation/src/","@eth-infinitism/account-abstraction/=node_modules/account-abstraction/contracts/","@ethereum-attestation-service/eas-contracts/=node_modules/@ethereum-attestation-service/eas-contracts/contracts/","@openzeppelin/=node_modules/@openzeppelin/","@prb/math/=node_modules/@prb/math/src/","@prb/test/=node_modules/@prb/test/src/","@solidity/=node_modules/crypto-lib/src/","@towns-protocol/diamond/=node_modules/@towns-protocol/diamond/","account-abstraction/=node_modules/account-abstraction/contracts/","crypto-lib/=node_modules/crypto-lib/src/","forge-std/=node_modules/forge-std/src/","hardhat-deploy/=node_modules/account-abstraction/node_modules/hardhat-deploy/","hardhat/=node_modules/@ethereum-attestation-service/eas-contracts/node_modules/hardhat/","solady/=node_modules/solady/src/"],"optimizer":{"enabled":true,"runs":4194303},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/router/ISwapRouter.sol":"ISwapRouter"},"evmVersion":"cancun","libraries":{}},"sources":{"src/router/ISwapRouter.sol":{"keccak256":"0xe0615eda34ea374020c67211933bc78b94b70aeed1f57ca755bfe89b7a4e2d53","urls":["bzz-raw://61a816f3566c4b51e8a18f19589ddecd124f4909f4f124a1a2b7eb8e7222e630","dweb:/ipfs/QmTJ7i9vaGCfrVKhzZ7moQxxLFihLYUCQ9Ex2TBJkgSsTa"],"license":"MIT"}},"version":1},"id":418}