{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_InInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Initializable_NotInInitializingState"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_AlreadySupported"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Introspection_NotSupported"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "currentNonce",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "InvalidAccountNonce"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "Ownable__NotOwner"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Ownable__ZeroAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__AddressMismatch"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__CannotLinkToRootWallet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__CannotLinkToSelf"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__CannotRemoveDefaultWallet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__CannotRemoveRootWallet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__DefaultWalletAlreadySet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidMessage"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidNonEVMAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidSignature"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ],
        "type": "error",
        "name": "WalletLink__InvalidVMSpecificData"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__LinkAlreadyExists"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__LinkedToAnotherRootKey"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__MaxLinkedWalletsReached"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "wallet",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__NonEVMWalletAlreadyLinked"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "wallet",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__NonEVMWalletNotLinked"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__NotLinked"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callerRootKey",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__RootKeyMismatch"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__UnsupportedVMType"
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Initialized",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceAdded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "InterfaceRemoved",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "walletHash",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "LinkNonEVMWalletToRootWallet",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "LinkWalletToRootKey",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "secondWallet",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "RemoveLink",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "walletHash",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "RemoveNonEVMWalletLink",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "defaultWallet",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "SetDefaultWallet",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegateRegistry",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "sclEip6565",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "__WalletLink_init"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "checkIfLinked",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "walletHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "checkIfNonEVMWalletLinked",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "struct IWalletLinkBase.WalletQueryOptions",
            "name": "options",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "includeDelegations",
                "type": "bool"
              }
            ]
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "explicitWalletsByRootKey",
        "outputs": [
          {
            "internalType": "struct WalletLib.Wallet[]",
            "name": "wallets",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "string",
                "name": "addr",
                "type": "string"
              },
              {
                "internalType": "enum WalletLib.VirtualMachineType",
                "name": "vmType",
                "type": "uint8"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootWallet",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getDefaultWallet",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "dependency",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getDependency",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getLatestNonceForRootKey",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getRootKeyForWallet",
        "outputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getWalletsByRootKey",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "wallets",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getWalletsByRootKeyWithDelegations",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "wallets",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct IWalletLinkBase.LinkedWallet",
            "name": "rootWallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "linkCallerToRootKey"
      },
      {
        "inputs": [
          {
            "internalType": "struct IWalletLinkBase.NonEVMLinkedWallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "struct WalletLib.Wallet",
                "name": "wallet",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "string",
                    "name": "addr",
                    "type": "string"
                  },
                  {
                    "internalType": "enum WalletLib.VirtualMachineType",
                    "name": "vmType",
                    "type": "uint8"
                  }
                ]
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              },
              {
                "internalType": "struct IWalletLinkBase.VMSpecificData[]",
                "name": "extraData",
                "type": "tuple[]",
                "components": [
                  {
                    "internalType": "string",
                    "name": "key",
                    "type": "string"
                  },
                  {
                    "internalType": "bytes",
                    "name": "value",
                    "type": "bytes"
                  }
                ]
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "linkNonEVMWalletToRootKey"
      },
      {
        "inputs": [
          {
            "internalType": "struct IWalletLinkBase.LinkedWallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "struct IWalletLinkBase.LinkedWallet",
            "name": "rootWallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "linkWalletToRootKey"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeCallerLink"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "struct IWalletLinkBase.LinkedWallet",
            "name": "rootWallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeLink"
      },
      {
        "inputs": [
          {
            "internalType": "struct WalletLib.Wallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "string",
                "name": "addr",
                "type": "string"
              },
              {
                "internalType": "enum WalletLib.VirtualMachineType",
                "name": "vmType",
                "type": "uint8"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeNonEVMWalletLink"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "defaultWallet",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setDefaultWallet"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "dependency",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "dependencyAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setDependency"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "checkIfLinked(address,address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to check",
            "wallet": "the ethereum wallet to check"
          },
          "returns": {
            "_0": "areLinked boolean if they are linked together"
          }
        },
        "checkIfNonEVMWalletLinked(address,bytes32)": {
          "params": {
            "rootKey": "the public key of the users rootkey to check",
            "walletHash": "the hash of the non-EVM wallet to check"
          },
          "returns": {
            "_0": "areLinked boolean if they are linked together"
          }
        },
        "explicitWalletsByRootKey(address,(bool))": {
          "params": {
            "rootKey": "the public key of the users rootkey to find associated wallets for"
          },
          "returns": {
            "wallets": "an array of wallets with their metadata"
          }
        },
        "getDefaultWallet(address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to find associated wallets for"
          },
          "returns": {
            "_0": "defaultWallet the default wallet for the root key"
          }
        },
        "getDependency(bytes32)": {
          "params": {
            "dependency": "the dependency label to get"
          }
        },
        "getLatestNonceForRootKey(address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to check"
          }
        },
        "getRootKeyForWallet(address)": {
          "params": {
            "wallet": "the ethereum wallet to find associated root key for"
          },
          "returns": {
            "rootKey": "the rootkey that this wallet is linked to"
          }
        },
        "getWalletsByRootKey(address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to find associated wallets for"
          },
          "returns": {
            "wallets": "an array of ethereum wallets linked to this root key"
          }
        },
        "getWalletsByRootKeyWithDelegations(address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to find associated wallets for"
          },
          "returns": {
            "wallets": "an array of ethereum wallets linked to this root key"
          }
        },
        "linkCallerToRootKey((address,bytes,string),uint256)": {
          "params": {
            "nonce": "a nonce used to prevent replay attacks, nonce must always be higher than previous nonce",
            "rootWallet": "the root wallet that the caller is linking to"
          }
        },
        "linkNonEVMWalletToRootKey(((string,uint8),bytes,string,(string,bytes)[]),uint256)": {
          "details": "The function can only be called by an already linked wallet",
          "params": {
            "nonce": "a nonce used to prevent replay attacks, nonce must always be higher than previous nonce",
            "wallet": "the wallet being linked to the root wallet"
          }
        },
        "linkWalletToRootKey((address,bytes,string),(address,bytes,string),uint256)": {
          "params": {
            "nonce": "a nonce used to prevent replay attacks, nonce must always be higher than previous nonce",
            "rootWallet": "the root wallet that the caller is linking to",
            "wallet": "the wallet being linked to the root wallet"
          }
        },
        "removeLink(address,(address,bytes,string),uint256)": {
          "params": {
            "wallet": "the wallet being unlinked from the sending wallet"
          }
        },
        "removeNonEVMWalletLink((string,uint8),uint256)": {
          "details": "The function can only be called by an already linked wallet",
          "params": {
            "nonce": "a nonce used to prevent replay attacks, nonce must always be higher than previous nonce",
            "wallet": "the wallet being removed from the root wallet"
          }
        },
        "setDefaultWallet(address)": {
          "details": "A wallet can only be set as the default wallet if it is already linked to the root walletThe default wallet can only be an EVM wallet for now",
          "params": {
            "defaultWallet": "the wallet being set as the default wallet"
          }
        },
        "setDependency(bytes32,address)": {
          "params": {
            "dependency": "the dependency label to set",
            "dependencyAddress": "the dependency address to set"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "checkIfLinked(address,address)": {
          "notice": "checks if a root key and wallet are linked"
        },
        "checkIfNonEVMWalletLinked(address,bytes32)": {
          "notice": "checks if a root key and non-EVM wallet are linked"
        },
        "explicitWalletsByRootKey(address,(bool))": {
          "notice": "Returns all wallets linked to a root key with their metadata"
        },
        "getDefaultWallet(address)": {
          "notice": "Returns the default wallet for a root key"
        },
        "getDependency(bytes32)": {
          "notice": "gets the dependency address for a given dependency label"
        },
        "getLatestNonceForRootKey(address)": {
          "notice": "gets the latest nonce for a rootkey to use a higher one for next link action"
        },
        "getRootKeyForWallet(address)": {
          "notice": "Returns the root key for a given wallet"
        },
        "getWalletsByRootKey(address)": {
          "notice": "Returns all wallets linked to a root key"
        },
        "getWalletsByRootKeyWithDelegations(address)": {
          "notice": "Returns all wallets linked to a root key with their delegations"
        },
        "linkCallerToRootKey((address,bytes,string),uint256)": {
          "notice": "Link caller wallet to a root wallet"
        },
        "linkNonEVMWalletToRootKey(((string,uint8),bytes,string,(string,bytes)[]),uint256)": {
          "notice": "Link a non-EVM wallet to a root wallet"
        },
        "linkWalletToRootKey((address,bytes,string),(address,bytes,string),uint256)": {
          "notice": "Link a wallet to a root wallet"
        },
        "removeCallerLink()": {
          "notice": "Remove the caller's link to their root key"
        },
        "removeLink(address,(address,bytes,string),uint256)": {
          "notice": "Called via the rootkey signing a message to a remove a wallet from itself"
        },
        "removeNonEVMWalletLink((string,uint8),uint256)": {
          "notice": "Remove a non-EVM wallet link from a root wallet"
        },
        "setDefaultWallet(address)": {
          "notice": "Set the default wallet by the root wallet"
        },
        "setDependency(bytes32,address)": {
          "notice": "sets the dependency address for a given dependency label"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@prb/math/=node_modules/@prb/math/src/",
      "@prb/test/=node_modules/@prb/test/src/",
      "@river-build/diamond/=node_modules/@river-build/diamond/",
      "@solidity/=node_modules/crypto-lib/src/",
      "account-abstraction/=node_modules/account-abstraction/contracts/",
      "crypto-lib/=node_modules/crypto-lib/src/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat-deploy/=node_modules/hardhat-deploy/",
      "solady/=node_modules/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/src/factory/facets/wallet-link/WalletLink.sol": "WalletLink"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/factory/facets/wallet-link/IWalletLink.sol": {
      "keccak256": "0xb37a03936a2f15ce5c94fb9925594627cc65cfdd186c14eaff32d299ec569b5f",
      "urls": [
        "bzz-raw://085ef4945195eae38879c2d84e70a5a2f3cb02e6ad53e8ae37e6dd2591379327",
        "dweb:/ipfs/QmRP7RH7sX1MUXFDwacLABBcVdGDoyKm36JbSfDDwXy4EW"
      ],
      "license": "MIT"
    },
    "contracts/src/factory/facets/wallet-link/WalletLink.sol": {
      "keccak256": "0x57a8f7466025510e737d4b54ef4eaff2bcd8f48e758a62ac8f90a5ff13272acf",
      "urls": [
        "bzz-raw://3f15e657bf76e543627b2f75992a89d84b801da6053b96e6fb0b622e1f3b9482",
        "dweb:/ipfs/QmfQSpKDRYczvZKxJFWJnbAJxra5cY2sMxgLBzdfHzJ2h4"
      ],
      "license": "MIT"
    },
    "contracts/src/factory/facets/wallet-link/WalletLinkBase.sol": {
      "keccak256": "0xa7d358aa0e4ad0641f44b4c9609b86f16063bd4e493366ab440a1ecfaa8b02b7",
      "urls": [
        "bzz-raw://214853837f028da0881a284e5b16bbc8083f197e69b382046499ef4d58392953",
        "dweb:/ipfs/QmbFpUpo7yQhh5EZTCb4L6c7ZPam3CXhdMLYVQQCWGAZX4"
      ],
      "license": "MIT"
    },
    "contracts/src/factory/facets/wallet-link/WalletLinkStorage.sol": {
      "keccak256": "0x87cc50e8ebbe14e78a1f0d137f29207160c28587b56ca82ea3ef958471aadb62",
      "urls": [
        "bzz-raw://1fc30176be6b3d721297d9c4a11778c111f115d76d47cd50ee74b86138284f9d",
        "dweb:/ipfs/QmTt22T3M4BtnUbi83aySpY8Byhd2vbAViMbqbxHysyp1p"
      ],
      "license": "MIT"
    },
    "contracts/src/factory/facets/wallet-link/interfaces/IDelegateRegistry.sol": {
      "keccak256": "0x080591ced5f07f2ac04e35a44ac0d67816a9d50f06cddb32707fe3e135ccb238",
      "urls": [
        "bzz-raw://5297646974474ccbbffd75993f685a397268dad9eaf28cb39f5e41d208e8bb8a",
        "dweb:/ipfs/QmVdNEto4EXUhrDpyfgiEGT79w6wQHYVWuf3sNHS9MYd1a"
      ],
      "license": "CC0-1.0"
    },
    "contracts/src/factory/facets/wallet-link/interfaces/ISCL_EIP6565.sol": {
      "keccak256": "0x16bdbe9300b2cefa7ea347b7263975306b8dd91dc77370640d874274f6de250a",
      "urls": [
        "bzz-raw://117e21cfc9dd129e94882fc522f18990655e30b1fe1e4f8bcc42719dd1619b43",
        "dweb:/ipfs/QmWYXo1rNXkvQx4ziP5pck4WGooMm5ud3eMsHj5izk9p8U"
      ],
      "license": "MIT"
    },
    "contracts/src/factory/facets/wallet-link/libraries/SolanaUtils.sol": {
      "keccak256": "0x0d705beaedcc5f0e6e192334f717de3574cd6b4ec497600cc6ca31d22fb58fa7",
      "urls": [
        "bzz-raw://e20097b082363350e1a4463dc09a641e37b23769d2c37b0120f405c2235ba277",
        "dweb:/ipfs/QmabmFmZTtcTjL2rSnNnuKX3vWbfiQ8ekYeyqqifSvPM1x"
      ],
      "license": "MIT"
    },
    "contracts/src/factory/facets/wallet-link/libraries/WalletLib.sol": {
      "keccak256": "0x7fb08e8176be055adf49a1ce35e17f4cedb78c248c46c96e0583377a4e89b40b",
      "urls": [
        "bzz-raw://334911ec72def284ac7a61e04d5de12d7018421a756e265e2d0e411e62c097c1",
        "dweb:/ipfs/QmbJzoE6Tv91psSSDz8RgcuQKtp7zxCKAhnD3TKWiyiqMP"
      ],
      "license": "MIT"
    },
    "contracts/src/utils/libraries/CustomRevert.sol": {
      "keccak256": "0xdf3d131cb19a367b2f2842caffe356e3b6437ff9e82f6519dd3b067630e0a059",
      "urls": [
        "bzz-raw://abaae9b8fa22a7b0f6fe0adafb4ec510f9b720ef281d98b900225c033c66f9b7",
        "dweb:/ipfs/QmNU1NRUCkXibWP7PzNyXvtrkgtpwcUEVP8uFzsWeDmBfK"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c",
      "urls": [
        "bzz-raw://cb2f27cd3952aa667e198fba0d9b7bcec52fbb12c16f013c25fe6fb52b29cc0e",
        "dweb:/ipfs/QmeuohBFoeyDPZA9JNCTEDz3VBfBD4EABWuWXVhHAuEpKR"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Errors.sol": {
      "keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
      "urls": [
        "bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
        "dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Panic.sol": {
      "keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
      "urls": [
        "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
        "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
      "keccak256": "0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c",
      "urls": [
        "bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251",
        "dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
      "urls": [
        "bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
        "dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "keccak256": "0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575",
      "urls": [
        "bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e",
        "dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
      "urls": [
        "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
        "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
      "keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
      "urls": [
        "bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
        "dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
      "urls": [
        "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
        "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
      "urls": [
        "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
        "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212",
      "urls": [
        "bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f",
        "dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/Facet.sol": {
      "keccak256": "0xca7529809751c8c40aebd904b776f9ff28074b5a8a2df99f5bd1b588cb4b297c",
      "urls": [
        "bzz-raw://74bf56c81fcb3064f372bf9fb5ae895fd976d1cf8fd535c4f03397bdfabeb25e",
        "dweb:/ipfs/QmRmNLBWakunagRHRLXsEZAq6b2CyWM4voFrEjQn2tRGYY"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/initializable/Initializable.sol": {
      "keccak256": "0xe02e99665b5acb22d5c508c3bda97c35acd2597ce0a58569a19cc12f0010da90",
      "urls": [
        "bzz-raw://b586a51dbe63e8763ae0b2b3dadd5c8559f47bc8cbaa0e9fe52aaec4c3677552",
        "dweb:/ipfs/QmRtaVikg6YDwzUAtY7WV793taZgT1ZxyMB4PLAEqGBeCC"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0xf8170e6977d685c218f65185478fbb9916e64f63aab1dcd195056438466f458a",
      "urls": [
        "bzz-raw://83ea3cf77f012eef93d10593e3beded36b449611063fd8dfbdb44e4346f87eb4",
        "dweb:/ipfs/QmVasL7QnxXEmiUsLJzpfig8717zLUhZfyQxiBbFGDEVVg"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/introspection/IIntrospectionBase.sol": {
      "keccak256": "0x51e706ab1184a3a5b353b87cfee07d471b9a5ef93897022bbcd1085b39a0c762",
      "urls": [
        "bzz-raw://3df386912c5cc759faee161b7825b2014040d04bf06528e74f4d759f06f2eb19",
        "dweb:/ipfs/QmP5AnGGNY4gsV1ABJ3WaueAsAwJVQ229ZfGjGxW8rSbEL"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x35f27aa0a4b64673a2648110422f31de0c5a71c68df562eccb9c4f2a27ee6647",
      "urls": [
        "bzz-raw://2eb1f2ff2e2d7222bf8fe2cf7558a2e47925e3d4557208362b1f50e63cb43006",
        "dweb:/ipfs/QmNcJZSAEPreUy66tt5brPrauVnUb4tqvcxej5Uc4SZZWz"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x306f41ef86bc5050a28c1dbf855d3f6f623be4aebc0a0f96474dae85979f7763",
      "urls": [
        "bzz-raw://dbad6f8e6685690ae75f6c9066972a45400b45307245feab8990af18a4c38e91",
        "dweb:/ipfs/QmcTUqiSL1z2nwokpNNsXQkjVTaFdFJiM2exguZpPDDXEM"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/ownable/IERC173.sol": {
      "keccak256": "0x187fcc652a498aa18be665689a8496daad50511e6d7d926be0a210469325cdd8",
      "urls": [
        "bzz-raw://00c489916ad6e3ef2bfeb1d5f0230022cf776caab4b1372f0bf79b839810f1a2",
        "dweb:/ipfs/QmV2h8sDoHeyZKvbKeJBk6WaS5F87QaDMCq3iEymsbrmVh"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/ownable/OwnableBase.sol": {
      "keccak256": "0x272abaecc104d5f23d77a623cf1548620d24b0f447eb2a12144e27561ff489f2",
      "urls": [
        "bzz-raw://fcb8c20ff7346bdc5dba82e6680cc0ea64087460a12153e3b6c3416f6addf875",
        "dweb:/ipfs/QmfEEufJBzudSDekQteQkb3CzmnzUPT3GDhNgVpHNC9xaf"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/facets/ownable/OwnableStorage.sol": {
      "keccak256": "0xda650482ce08c04110366cb01408aaabd01383d9c504b7cacfb2674aae688dcd",
      "urls": [
        "bzz-raw://694f42ffb353fccaa1eadf91dee3a3cee7253e3f357bcba2b175fd7be701e27e",
        "dweb:/ipfs/QmPxxVerATSYrNLp7snnSvNVsbLPm1wzHULhBbtR333eik"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/utils/Nonces.sol": {
      "keccak256": "0x9217eb7e1a632747cb0b01e6a43f968e61107161b774c47e3c23ec7b2d4f73ba",
      "urls": [
        "bzz-raw://f53415ba8c68ea88c9b14c5265ea1412b8ec30162f121ca10b5ad63226662747",
        "dweb:/ipfs/QmcJ1Moezv2R3RHAsprYWbJe6Pd9754RnEZPvUkiKLN4Eu"
      ],
      "license": "MIT"
    },
    "node_modules/@river-build/diamond/src/utils/cryptography/signature/EIP712Base.sol": {
      "keccak256": "0x3952f98ed8e38a9c4a75df2e11f9fb65ac29d6c2963753ac0ed98bb4ba7d8de4",
      "urls": [
        "bzz-raw://c8167058af0cd35f15d6e03c244eac13366d8098d12320dc67324fe8bd0daf83",
        "dweb:/ipfs/QmcFJFFjrm4ZRrxoGJhWNCivZZA4hnfFicfvVgUM4asjxK"
      ],
      "license": "Apache-2.0"
    },
    "node_modules/@river-build/diamond/src/utils/cryptography/signature/EIP712Storage.sol": {
      "keccak256": "0x49e82a68b9a9cfd426efbb27bed2d64d39db6d6dd51cb7b55fc881934c034044",
      "urls": [
        "bzz-raw://0435aa66310d37b856fb6244cb427bc7e93f163d4222105f6714ca9b1c2f8fdb",
        "dweb:/ipfs/QmcNdSVZ45s3BR76tMBcdnVN6qhEdjYbEPXPSH7EtbNonQ"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/ECDSA.sol": {
      "keccak256": "0x5a37fbc86ff99139e1cffad4ec05ffeeef17c1d1401113f107665d08a6abe7df",
      "urls": [
        "bzz-raw://4253a9d0cf4eab99f858fe798904f02ddaabfca3133c07a6314dc479ddd2e217",
        "dweb:/ipfs/QmXeK8yCQ8G4KsqkiP2Yewi2kPV9vdpUU9Qi1xcdX92p8v"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/LibBit.sol": {
      "keccak256": "0xca406ce28e3bcabdcb4e764156c040b242bfeb92bd495b54ec8e4defe0bf9aa6",
      "urls": [
        "bzz-raw://85cceae00b3d87d2227094552ff626919cb8f2b896ff625d4ba3250871e850b8",
        "dweb:/ipfs/QmbTeicVV4GsRKx1EKSJGSzVoZgSwNWK3RaZJpWYGoDfd2"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/LibBytes.sol": {
      "keccak256": "0x0ce2f2607e6408787d6f66d73f1b6d5726a96403f66e5c4edfc6d8451f96537c",
      "urls": [
        "bzz-raw://e40e21b56aca96c72bd257f3bed95a41a0450de054eae1565f3079bbd913a8b5",
        "dweb:/ipfs/QmcsCzJZn8zciFTxozK2aKjRT8egyD5fG71MBSXQVWbZ17"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/LibString.sol": {
      "keccak256": "0x6c922f48e2ecc1c8fd6581b3a1c16d24ca0f30e816e9a73d4e6a194b4df03e48",
      "urls": [
        "bzz-raw://e4e942ce2188a529e84b454ee78a657de9465dc8244da081dc706d01b30e4dae",
        "dweb:/ipfs/QmX6WPTUZwNkUNKyUmJUW1jjf8Eh51Y2i1BdWyD8S16Mty"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}