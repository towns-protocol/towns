{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__AddressMismatch"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__CannotLinkToRootWallet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__CannotLinkToSelf"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__CannotRemoveDefaultWallet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__CannotRemoveRootWallet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__DefaultWalletAlreadySet"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidMessage"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidNonEVMAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__InvalidSignature"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ],
        "type": "error",
        "name": "WalletLink__InvalidVMSpecificData"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__LinkAlreadyExists"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__LinkedToAnotherRootKey"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__MaxLinkedWalletsReached"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "wallet",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__NonEVMWalletAlreadyLinked"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "wallet",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__NonEVMWalletNotLinked"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__NotLinked"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callerRootKey",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "WalletLink__RootKeyMismatch"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "WalletLink__UnsupportedVMType"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "walletHash",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "LinkNonEVMWalletToRootWallet",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "LinkWalletToRootKey",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "secondWallet",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "RemoveLink",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "walletHash",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "RemoveNonEVMWalletLink",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "defaultWallet",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "SetDefaultWallet",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "checkIfLinked",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "walletHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "checkIfNonEVMWalletLinked",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "struct IWalletLinkBase.WalletQueryOptions",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "includeDelegations",
                "type": "bool"
              }
            ]
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "explicitWalletsByRootKey",
        "outputs": [
          {
            "internalType": "struct IWalletLinkBase.WalletData[]",
            "name": "walletData",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "string",
                "name": "addr",
                "type": "string"
              },
              {
                "internalType": "enum IWalletLinkBase.VirtualMachineType",
                "name": "vmType",
                "type": "uint8"
              },
              {
                "internalType": "struct IWalletLinkBase.WalletType",
                "name": "walletType",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "bool",
                    "name": "linked",
                    "type": "bool"
                  },
                  {
                    "internalType": "bool",
                    "name": "delegated",
                    "type": "bool"
                  },
                  {
                    "internalType": "bool",
                    "name": "defaultWallet",
                    "type": "bool"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getDefaultWallet",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "dependency",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getDependency",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "getLatestNonceForRootKey",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getRootKeyForWallet",
        "outputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getWalletsByRootKey",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "wallets",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getWalletsByRootKeyWithDelegations",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "wallets",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct IWalletLinkBase.LinkedWalletData",
            "name": "rootWallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "linkCallerToRootKey"
      },
      {
        "inputs": [
          {
            "internalType": "struct IWalletLinkBase.NonEVMLinkedWalletData",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "string",
                "name": "addr",
                "type": "string"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              },
              {
                "internalType": "enum IWalletLinkBase.VirtualMachineType",
                "name": "vmType",
                "type": "uint8"
              },
              {
                "internalType": "struct IWalletLinkBase.VMSpecificData[]",
                "name": "extraData",
                "type": "tuple[]",
                "components": [
                  {
                    "internalType": "string",
                    "name": "key",
                    "type": "string"
                  },
                  {
                    "internalType": "bytes",
                    "name": "value",
                    "type": "bytes"
                  }
                ]
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "linkNonEVMWalletToRootKey"
      },
      {
        "inputs": [
          {
            "internalType": "struct IWalletLinkBase.LinkedWalletData",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "struct IWalletLinkBase.LinkedWalletData",
            "name": "rootWallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "linkWalletToRootKey"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeCallerLink"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "struct IWalletLinkBase.LinkedWalletData",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeLink"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "addr",
            "type": "string"
          },
          {
            "internalType": "enum IWalletLinkBase.VirtualMachineType",
            "name": "vmType",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeNonEVMWalletLink"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "defaultWallet",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setDefaultWallet"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "dependency",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "dependencyAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setDependency"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "checkIfLinked(address,address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to check",
            "wallet": "the ethereum wallet to check"
          },
          "returns": {
            "_0": "areLinked boolean if they are linked together"
          }
        },
        "checkIfNonEVMWalletLinked(address,bytes32)": {
          "params": {
            "rootKey": "the public key of the users rootkey to check",
            "walletHash": "the hash of the non-EVM wallet to check"
          },
          "returns": {
            "_0": "areLinked boolean if they are linked together"
          }
        },
        "getDefaultWallet(address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to find associated wallets for"
          },
          "returns": {
            "_0": "defaultWallet the default wallet for the root key"
          }
        },
        "getDependency(bytes32)": {
          "params": {
            "dependency": "the dependency label to get"
          }
        },
        "getRootKeyForWallet(address)": {
          "params": {
            "wallet": "the ethereum wallet to find associated root key for"
          },
          "returns": {
            "rootKey": "the rootkey that this wallet is linked to"
          }
        },
        "getWalletsByRootKey(address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to find associated wallets for"
          },
          "returns": {
            "wallets": "an array of ethereum wallets linked to this root key"
          }
        },
        "getWalletsByRootKeyWithDelegations(address)": {
          "params": {
            "rootKey": "the public key of the users rootkey to find associated wallets for"
          },
          "returns": {
            "wallets": "an array of ethereum wallets linked to this root key"
          }
        },
        "setDefaultWallet(address)": {
          "details": "A wallet can only be set as the default wallet if it is already linked to the root walletThe default wallet can only be an EVM wallet for now",
          "params": {
            "defaultWallet": "the wallet being set as the default wallet"
          }
        },
        "setDependency(bytes32,address)": {
          "params": {
            "dependency": "the dependency label to set",
            "dependencyAddress": "the dependency address to set"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "checkIfLinked(address,address)": {
          "notice": "checks if a root key and wallet are linked"
        },
        "checkIfNonEVMWalletLinked(address,bytes32)": {
          "notice": "checks if a root key and non-EVM wallet are linked"
        },
        "getDefaultWallet(address)": {
          "notice": "Returns the default wallet for a root key"
        },
        "getDependency(bytes32)": {
          "notice": "gets the dependency address for a given dependency label"
        },
        "getRootKeyForWallet(address)": {
          "notice": "Returns the root key for a given wallet"
        },
        "getWalletsByRootKey(address)": {
          "notice": "Returns all wallets linked to a root key"
        },
        "getWalletsByRootKeyWithDelegations(address)": {
          "notice": "Returns all wallets linked to a root key with their delegations"
        },
        "removeCallerLink()": {
          "notice": "Remove the caller's link to their root key"
        },
        "setDefaultWallet(address)": {
          "notice": "Set the default wallet by the root wallet"
        },
        "setDependency(bytes32,address)": {
          "notice": "sets the dependency address for a given dependency label"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@prb/math/=node_modules/@prb/math/src/",
      "@prb/test/=node_modules/@prb/test/src/",
      "@river-build/diamond/=node_modules/@river-build/diamond/",
      "@solidity/=node_modules/crypto-lib/src/",
      "account-abstraction/=node_modules/account-abstraction/contracts/",
      "crypto-lib/=node_modules/crypto-lib/src/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat-deploy/=node_modules/hardhat-deploy/",
      "solady/=node_modules/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "appendCBOR": false
    },
    "compilationTarget": {
      "contracts/test/mocks/MockWalletLink.sol": "MockWalletLink"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "contracts/src/factory/facets/wallet-link/IWalletLink.sol": {
      "keccak256": "0x8997ff1c6472c76d6f0ee3affa6115913bf80f425d5aaa8f28d26b5289900f40",
      "urls": [
        "bzz-raw://26962e6be701b67b9ba7f34ece4574b3791924c8efd915a475e8f755f7fa33a9",
        "dweb:/ipfs/QmcUsFYi5yhPVwJ2LjyMjuwp3vCeMShi4zLVTAAzPHCasN"
      ],
      "license": "MIT"
    },
    "contracts/test/mocks/MockWalletLink.sol": {
      "keccak256": "0x4146305f8871932ced67ed34c5aafcf991b441310c739182d39887b6a8e7966b",
      "urls": [
        "bzz-raw://3be8e01362e31e7b26e3709c8758aed9cbf612fdbfdd94374fc485dd98966175",
        "dweb:/ipfs/QmTjdhVGduDfXYwiMqQa3o4oHovwXA2brqsHakEbbhRVqk"
      ],
      "license": "Apache-2.0"
    },
    "node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212",
      "urls": [
        "bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f",
        "dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/LibBytes.sol": {
      "keccak256": "0x0ce2f2607e6408787d6f66d73f1b6d5726a96403f66e5c4edfc6d8451f96537c",
      "urls": [
        "bzz-raw://e40e21b56aca96c72bd257f3bed95a41a0450de054eae1565f3079bbd913a8b5",
        "dweb:/ipfs/QmcsCzJZn8zciFTxozK2aKjRT8egyD5fG71MBSXQVWbZ17"
      ],
      "license": "MIT"
    },
    "node_modules/solady/src/utils/LibString.sol": {
      "keccak256": "0x6c922f48e2ecc1c8fd6581b3a1c16d24ca0f30e816e9a73d4e6a194b4df03e48",
      "urls": [
        "bzz-raw://e4e942ce2188a529e84b454ee78a657de9465dc8244da081dc706d01b30e4dae",
        "dweb:/ipfs/QmX6WPTUZwNkUNKyUmJUW1jjf8Eh51Y2i1BdWyD8S16Mty"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}