/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IRiverRegistryBase {
  export type NodeStruct = {
    nodeAddress: PromiseOrValue<string>;
    url: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type NodeStructOutput = [string, string, number] & {
    nodeAddress: string;
    url: string;
    status: number;
  };

  export type StreamStruct = {
    streamId: PromiseOrValue<BytesLike>;
    genesisMiniblockHash: PromiseOrValue<BytesLike>;
    lastMiniblockHash: PromiseOrValue<BytesLike>;
    lastMiniblockNum: PromiseOrValue<BigNumberish>;
    flags: PromiseOrValue<BigNumberish>;
    reserved0: PromiseOrValue<BigNumberish>;
    reserved1: PromiseOrValue<BigNumberish>;
    nodes: PromiseOrValue<string>[];
    genesisMiniblock: PromiseOrValue<BytesLike>;
  };

  export type StreamStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    string
  ] & {
    streamId: string;
    genesisMiniblockHash: string;
    lastMiniblockHash: string;
    lastMiniblockNum: BigNumber;
    flags: BigNumber;
    reserved0: BigNumber;
    reserved1: BigNumber;
    nodes: string[];
    genesisMiniblock: string;
  };
}

export interface IRiverRegistryInterface extends utils.Interface {
  functions: {
    "allocateStream(bytes32,address[],bytes32,bytes)": FunctionFragment;
    "approveOperator(address)": FunctionFragment;
    "getAllNodeAddresses()": FunctionFragment;
    "getAllNodes()": FunctionFragment;
    "getAllStreamIds()": FunctionFragment;
    "getAllStreams()": FunctionFragment;
    "getNode(address)": FunctionFragment;
    "getNodeCount()": FunctionFragment;
    "getStream(bytes32)": FunctionFragment;
    "getStreamCount()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "registerNode(address,string)": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "setStreamLastMiniblock(bytes32,bytes32,uint64,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allocateStream"
      | "approveOperator"
      | "getAllNodeAddresses"
      | "getAllNodes"
      | "getAllStreamIds"
      | "getAllStreams"
      | "getNode"
      | "getNodeCount"
      | "getStream"
      | "getStreamCount"
      | "isOperator"
      | "registerNode"
      | "removeOperator"
      | "setStreamLastMiniblock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocateStream",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNodeAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStreamIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStreams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStream",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStreamLastMiniblock",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNodeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStreamIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStreams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNodeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStreamCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStreamLastMiniblock",
    data: BytesLike
  ): Result;

  events: {
    "NodeAdded(address,string,uint8)": EventFragment;
    "NodeStatusUpdated(address,uint8)": EventFragment;
    "NodeUrlUpdated(address,string)": EventFragment;
    "OperatorAdded(address)": EventFragment;
    "OperatorRemoved(address)": EventFragment;
    "StreamAllocated(bytes32,address[],bytes32)": EventFragment;
    "StreamLastMiniblockUpdated(bytes32,bytes32,uint64,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NodeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeUrlUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamAllocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamLastMiniblockUpdated"): EventFragment;
}

export interface NodeAddedEventObject {
  nodeAddress: string;
  url: string;
  status: number;
}
export type NodeAddedEvent = TypedEvent<
  [string, string, number],
  NodeAddedEventObject
>;

export type NodeAddedEventFilter = TypedEventFilter<NodeAddedEvent>;

export interface NodeStatusUpdatedEventObject {
  nodeAddress: string;
  status: number;
}
export type NodeStatusUpdatedEvent = TypedEvent<
  [string, number],
  NodeStatusUpdatedEventObject
>;

export type NodeStatusUpdatedEventFilter =
  TypedEventFilter<NodeStatusUpdatedEvent>;

export interface NodeUrlUpdatedEventObject {
  nodeAddress: string;
  url: string;
}
export type NodeUrlUpdatedEvent = TypedEvent<
  [string, string],
  NodeUrlUpdatedEventObject
>;

export type NodeUrlUpdatedEventFilter = TypedEventFilter<NodeUrlUpdatedEvent>;

export interface OperatorAddedEventObject {
  operatorAddress: string;
}
export type OperatorAddedEvent = TypedEvent<[string], OperatorAddedEventObject>;

export type OperatorAddedEventFilter = TypedEventFilter<OperatorAddedEvent>;

export interface OperatorRemovedEventObject {
  operatorAddress: string;
}
export type OperatorRemovedEvent = TypedEvent<
  [string],
  OperatorRemovedEventObject
>;

export type OperatorRemovedEventFilter = TypedEventFilter<OperatorRemovedEvent>;

export interface StreamAllocatedEventObject {
  streamId: string;
  nodes: string[];
  genesisMiniblockHash: string;
}
export type StreamAllocatedEvent = TypedEvent<
  [string, string[], string],
  StreamAllocatedEventObject
>;

export type StreamAllocatedEventFilter = TypedEventFilter<StreamAllocatedEvent>;

export interface StreamLastMiniblockUpdatedEventObject {
  streamId: string;
  lastMiniblockHash: string;
  lastMiniblockNum: BigNumber;
  isSealed: boolean;
}
export type StreamLastMiniblockUpdatedEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  StreamLastMiniblockUpdatedEventObject
>;

export type StreamLastMiniblockUpdatedEventFilter =
  TypedEventFilter<StreamLastMiniblockUpdatedEvent>;

export interface IRiverRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRiverRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocateStream(
      streamId: PromiseOrValue<BytesLike>,
      nodes: PromiseOrValue<string>[],
      genesisMiniblockHash: PromiseOrValue<BytesLike>,
      genesisMiniblock: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllNodeAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getAllNodes(
      overrides?: CallOverrides
    ): Promise<[IRiverRegistryBase.NodeStructOutput[]]>;

    getAllStreamIds(overrides?: CallOverrides): Promise<[string[]]>;

    getAllStreams(
      overrides?: CallOverrides
    ): Promise<[IRiverRegistryBase.StreamStructOutput[]]>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IRiverRegistryBase.NodeStructOutput]>;

    getNodeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStream(
      streamId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IRiverRegistryBase.StreamStructOutput]>;

    getStreamCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStreamLastMiniblock(
      streamId: PromiseOrValue<BytesLike>,
      lastMiniblockHash: PromiseOrValue<BytesLike>,
      lastMiniblockNum: PromiseOrValue<BigNumberish>,
      isSealed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allocateStream(
    streamId: PromiseOrValue<BytesLike>,
    nodes: PromiseOrValue<string>[],
    genesisMiniblockHash: PromiseOrValue<BytesLike>,
    genesisMiniblock: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllNodeAddresses(overrides?: CallOverrides): Promise<string[]>;

  getAllNodes(
    overrides?: CallOverrides
  ): Promise<IRiverRegistryBase.NodeStructOutput[]>;

  getAllStreamIds(overrides?: CallOverrides): Promise<string[]>;

  getAllStreams(
    overrides?: CallOverrides
  ): Promise<IRiverRegistryBase.StreamStructOutput[]>;

  getNode(
    nodeAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IRiverRegistryBase.NodeStructOutput>;

  getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

  getStream(
    streamId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IRiverRegistryBase.StreamStructOutput>;

  getStreamCount(overrides?: CallOverrides): Promise<BigNumber>;

  isOperator(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerNode(
    nodeAddress: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStreamLastMiniblock(
    streamId: PromiseOrValue<BytesLike>,
    lastMiniblockHash: PromiseOrValue<BytesLike>,
    lastMiniblockNum: PromiseOrValue<BigNumberish>,
    isSealed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocateStream(
      streamId: PromiseOrValue<BytesLike>,
      nodes: PromiseOrValue<string>[],
      genesisMiniblockHash: PromiseOrValue<BytesLike>,
      genesisMiniblock: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllNodeAddresses(overrides?: CallOverrides): Promise<string[]>;

    getAllNodes(
      overrides?: CallOverrides
    ): Promise<IRiverRegistryBase.NodeStructOutput[]>;

    getAllStreamIds(overrides?: CallOverrides): Promise<string[]>;

    getAllStreams(
      overrides?: CallOverrides
    ): Promise<IRiverRegistryBase.StreamStructOutput[]>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IRiverRegistryBase.NodeStructOutput>;

    getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStream(
      streamId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IRiverRegistryBase.StreamStructOutput>;

    getStreamCount(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStreamLastMiniblock(
      streamId: PromiseOrValue<BytesLike>,
      lastMiniblockHash: PromiseOrValue<BytesLike>,
      lastMiniblockNum: PromiseOrValue<BigNumberish>,
      isSealed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NodeAdded(address,string,uint8)"(
      nodeAddress?: PromiseOrValue<string> | null,
      url?: null,
      status?: null
    ): NodeAddedEventFilter;
    NodeAdded(
      nodeAddress?: PromiseOrValue<string> | null,
      url?: null,
      status?: null
    ): NodeAddedEventFilter;

    "NodeStatusUpdated(address,uint8)"(
      nodeAddress?: PromiseOrValue<string> | null,
      status?: null
    ): NodeStatusUpdatedEventFilter;
    NodeStatusUpdated(
      nodeAddress?: PromiseOrValue<string> | null,
      status?: null
    ): NodeStatusUpdatedEventFilter;

    "NodeUrlUpdated(address,string)"(
      nodeAddress?: PromiseOrValue<string> | null,
      url?: null
    ): NodeUrlUpdatedEventFilter;
    NodeUrlUpdated(
      nodeAddress?: PromiseOrValue<string> | null,
      url?: null
    ): NodeUrlUpdatedEventFilter;

    "OperatorAdded(address)"(
      operatorAddress?: PromiseOrValue<string> | null
    ): OperatorAddedEventFilter;
    OperatorAdded(
      operatorAddress?: PromiseOrValue<string> | null
    ): OperatorAddedEventFilter;

    "OperatorRemoved(address)"(
      operatorAddress?: PromiseOrValue<string> | null
    ): OperatorRemovedEventFilter;
    OperatorRemoved(
      operatorAddress?: PromiseOrValue<string> | null
    ): OperatorRemovedEventFilter;

    "StreamAllocated(bytes32,address[],bytes32)"(
      streamId?: null,
      nodes?: null,
      genesisMiniblockHash?: null
    ): StreamAllocatedEventFilter;
    StreamAllocated(
      streamId?: null,
      nodes?: null,
      genesisMiniblockHash?: null
    ): StreamAllocatedEventFilter;

    "StreamLastMiniblockUpdated(bytes32,bytes32,uint64,bool)"(
      streamId?: null,
      lastMiniblockHash?: null,
      lastMiniblockNum?: null,
      isSealed?: null
    ): StreamLastMiniblockUpdatedEventFilter;
    StreamLastMiniblockUpdated(
      streamId?: null,
      lastMiniblockHash?: null,
      lastMiniblockNum?: null,
      isSealed?: null
    ): StreamLastMiniblockUpdatedEventFilter;
  };

  estimateGas: {
    allocateStream(
      streamId: PromiseOrValue<BytesLike>,
      nodes: PromiseOrValue<string>[],
      genesisMiniblockHash: PromiseOrValue<BytesLike>,
      genesisMiniblock: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllNodeAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getAllNodes(overrides?: CallOverrides): Promise<BigNumber>;

    getAllStreamIds(overrides?: CallOverrides): Promise<BigNumber>;

    getAllStreams(overrides?: CallOverrides): Promise<BigNumber>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStream(
      streamId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreamCount(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStreamLastMiniblock(
      streamId: PromiseOrValue<BytesLike>,
      lastMiniblockHash: PromiseOrValue<BytesLike>,
      lastMiniblockNum: PromiseOrValue<BigNumberish>,
      isSealed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateStream(
      streamId: PromiseOrValue<BytesLike>,
      nodes: PromiseOrValue<string>[],
      genesisMiniblockHash: PromiseOrValue<BytesLike>,
      genesisMiniblock: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllNodeAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllNodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllStreamIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllStreams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNode(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStream(
      streamId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStreamCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerNode(
      nodeAddress: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStreamLastMiniblock(
      streamId: PromiseOrValue<BytesLike>,
      lastMiniblockHash: PromiseOrValue<BytesLike>,
      lastMiniblockNum: PromiseOrValue<BigNumberish>,
      isSealed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
