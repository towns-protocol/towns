/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IAppAccountInterface extends utils.Interface {
  functions: {
    "disableApp(address)": FunctionFragment;
    "enableApp(address)": FunctionFragment;
    "getAppExpiration(address)": FunctionFragment;
    "getAppId(address)": FunctionFragment;
    "getInstalledApps()": FunctionFragment;
    "isAppEntitled(address,address,bytes32)": FunctionFragment;
    "isAppInstalled(address)": FunctionFragment;
    "onInstallApp(bytes32,bytes)": FunctionFragment;
    "onRenewApp(bytes32,bytes)": FunctionFragment;
    "onUninstallApp(bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "disableApp"
      | "enableApp"
      | "getAppExpiration"
      | "getAppId"
      | "getInstalledApps"
      | "isAppEntitled"
      | "isAppInstalled"
      | "onInstallApp"
      | "onRenewApp"
      | "onUninstallApp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "disableApp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableApp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppExpiration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstalledApps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAppEntitled",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAppInstalled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onInstallApp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "onRenewApp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstallApp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "disableApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enableApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAppId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInstalledApps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAppEntitled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAppInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onInstallApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onRenewApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstallApp",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAppAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAppAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disableApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAppExpiration(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInstalledApps(overrides?: CallOverrides): Promise<[string[]]>;

    isAppEntitled(
      app: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAppInstalled(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onInstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onRenewApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onUninstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  disableApp(
    app: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableApp(
    app: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAppExpiration(
    app: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getAppId(
    app: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInstalledApps(overrides?: CallOverrides): Promise<string[]>;

  isAppEntitled(
    app: PromiseOrValue<string>,
    publicKey: PromiseOrValue<string>,
    permission: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAppInstalled(
    app: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onInstallApp(
    appId: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onRenewApp(
    appId: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onUninstallApp(
    appId: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    disableApp(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableApp(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAppExpiration(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInstalledApps(overrides?: CallOverrides): Promise<string[]>;

    isAppEntitled(
      app: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAppInstalled(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onInstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onRenewApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onUninstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    disableApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAppExpiration(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstalledApps(overrides?: CallOverrides): Promise<BigNumber>;

    isAppEntitled(
      app: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAppInstalled(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onInstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onRenewApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onUninstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disableApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAppExpiration(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstalledApps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAppEntitled(
      app: PromiseOrValue<string>,
      publicKey: PromiseOrValue<string>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAppInstalled(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onInstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onRenewApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onUninstallApp(
      appId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
