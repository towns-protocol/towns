/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMembershipBase {
  export type MembershipStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    maxSupply: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    feeRecipient: PromiseOrValue<string>;
    freeAllocation: PromiseOrValue<BigNumberish>;
    pricingModule: PromiseOrValue<string>;
  };

  export type MembershipStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    string
  ] & {
    name: string;
    symbol: string;
    price: BigNumber;
    maxSupply: BigNumber;
    duration: BigNumber;
    currency: string;
    feeRecipient: string;
    freeAllocation: BigNumber;
    pricingModule: string;
  };
}

export declare namespace IRuleEntitlementBase {
  export type OperationStruct = {
    opType: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
  };

  export type OperationStructOutput = [number, number] & {
    opType: number;
    index: number;
  };

  export type CheckOperationStruct = {
    opType: PromiseOrValue<BigNumberish>;
    chainId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    threshold: PromiseOrValue<BigNumberish>;
  };

  export type CheckOperationStructOutput = [
    number,
    BigNumber,
    string,
    BigNumber
  ] & {
    opType: number;
    chainId: BigNumber;
    contractAddress: string;
    threshold: BigNumber;
  };

  export type LogicalOperationStruct = {
    logOpType: PromiseOrValue<BigNumberish>;
    leftOperationIndex: PromiseOrValue<BigNumberish>;
    rightOperationIndex: PromiseOrValue<BigNumberish>;
  };

  export type LogicalOperationStructOutput = [number, number, number] & {
    logOpType: number;
    leftOperationIndex: number;
    rightOperationIndex: number;
  };

  export type RuleDataStruct = {
    operations: IRuleEntitlementBase.OperationStruct[];
    checkOperations: IRuleEntitlementBase.CheckOperationStruct[];
    logicalOperations: IRuleEntitlementBase.LogicalOperationStruct[];
  };

  export type RuleDataStructOutput = [
    IRuleEntitlementBase.OperationStructOutput[],
    IRuleEntitlementBase.CheckOperationStructOutput[],
    IRuleEntitlementBase.LogicalOperationStructOutput[]
  ] & {
    operations: IRuleEntitlementBase.OperationStructOutput[];
    checkOperations: IRuleEntitlementBase.CheckOperationStructOutput[];
    logicalOperations: IRuleEntitlementBase.LogicalOperationStructOutput[];
  };
}

export declare namespace ILegacyArchitectBase {
  export type MembershipRequirementsStruct = {
    everyone: PromiseOrValue<boolean>;
    users: PromiseOrValue<string>[];
    ruleData: IRuleEntitlementBase.RuleDataStruct;
    syncEntitlements: PromiseOrValue<boolean>;
  };

  export type MembershipRequirementsStructOutput = [
    boolean,
    string[],
    IRuleEntitlementBase.RuleDataStructOutput,
    boolean
  ] & {
    everyone: boolean;
    users: string[];
    ruleData: IRuleEntitlementBase.RuleDataStructOutput;
    syncEntitlements: boolean;
  };

  export type MembershipStruct = {
    settings: IMembershipBase.MembershipStruct;
    requirements: ILegacyArchitectBase.MembershipRequirementsStruct;
    permissions: PromiseOrValue<string>[];
  };

  export type MembershipStructOutput = [
    IMembershipBase.MembershipStructOutput,
    ILegacyArchitectBase.MembershipRequirementsStructOutput,
    string[]
  ] & {
    settings: IMembershipBase.MembershipStructOutput;
    requirements: ILegacyArchitectBase.MembershipRequirementsStructOutput;
    permissions: string[];
  };

  export type ChannelInfoStruct = { metadata: PromiseOrValue<string> };

  export type ChannelInfoStructOutput = [string] & { metadata: string };

  export type SpaceInfoStruct = {
    name: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
    shortDescription: PromiseOrValue<string>;
    longDescription: PromiseOrValue<string>;
    membership: ILegacyArchitectBase.MembershipStruct;
    channel: ILegacyArchitectBase.ChannelInfoStruct;
  };

  export type SpaceInfoStructOutput = [
    string,
    string,
    string,
    string,
    ILegacyArchitectBase.MembershipStructOutput,
    ILegacyArchitectBase.ChannelInfoStructOutput
  ] & {
    name: string;
    uri: string;
    shortDescription: string;
    longDescription: string;
    membership: ILegacyArchitectBase.MembershipStructOutput;
    channel: ILegacyArchitectBase.ChannelInfoStructOutput;
  };
}

export interface MockLegacyArchitectInterface extends utils.Interface {
  functions: {
    "__Architect_init()": FunctionFragment;
    "createSpace((string,string,string,string,((string,string,uint256,uint256,uint64,address,address,uint256,address),(bool,address[],((uint8,uint8)[],(uint8,uint256,address,uint256)[],(uint8,uint8,uint8)[]),bool),string[]),(string)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "__Architect_init" | "createSpace"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Architect_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSpace",
    values: [ILegacyArchitectBase.SpaceInfoStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Architect_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSpace",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint32)": EventFragment;
    "InterfaceAdded(bytes4)": EventFragment;
    "InterfaceRemoved(bytes4)": EventFragment;
    "Paused(address)": EventFragment;
    "SpaceCreated(address,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InterfaceAddedEventObject {
  interfaceId: string;
}
export type InterfaceAddedEvent = TypedEvent<
  [string],
  InterfaceAddedEventObject
>;

export type InterfaceAddedEventFilter = TypedEventFilter<InterfaceAddedEvent>;

export interface InterfaceRemovedEventObject {
  interfaceId: string;
}
export type InterfaceRemovedEvent = TypedEvent<
  [string],
  InterfaceRemovedEventObject
>;

export type InterfaceRemovedEventFilter =
  TypedEventFilter<InterfaceRemovedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SpaceCreatedEventObject {
  owner: string;
  tokenId: BigNumber;
  space: string;
}
export type SpaceCreatedEvent = TypedEvent<
  [string, BigNumber, string],
  SpaceCreatedEventObject
>;

export type SpaceCreatedEventFilter = TypedEventFilter<SpaceCreatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MockLegacyArchitect extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLegacyArchitectInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Architect_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSpace(
      spaceInfo: ILegacyArchitectBase.SpaceInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __Architect_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSpace(
    spaceInfo: ILegacyArchitectBase.SpaceInfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __Architect_init(overrides?: CallOverrides): Promise<void>;

    createSpace(
      spaceInfo: ILegacyArchitectBase.SpaceInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Initialized(uint32)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InterfaceAdded(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;
    InterfaceAdded(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;

    "InterfaceRemoved(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;
    InterfaceRemoved(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SpaceCreated(address,uint256,address)"(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      space?: PromiseOrValue<string> | null
    ): SpaceCreatedEventFilter;
    SpaceCreated(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      space?: PromiseOrValue<string> | null
    ): SpaceCreatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    __Architect_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSpace(
      spaceInfo: ILegacyArchitectBase.SpaceInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Architect_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSpace(
      spaceInfo: ILegacyArchitectBase.SpaceInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
