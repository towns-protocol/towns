/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ManifestExecutionFunctionStruct = {
  executionSelector: PromiseOrValue<BytesLike>;
  skipRuntimeValidation: PromiseOrValue<boolean>;
  allowGlobalValidation: PromiseOrValue<boolean>;
};

export type ManifestExecutionFunctionStructOutput = [
  string,
  boolean,
  boolean
] & {
  executionSelector: string;
  skipRuntimeValidation: boolean;
  allowGlobalValidation: boolean;
};

export type ManifestExecutionHookStruct = {
  executionSelector: PromiseOrValue<BytesLike>;
  entityId: PromiseOrValue<BigNumberish>;
  isPreHook: PromiseOrValue<boolean>;
  isPostHook: PromiseOrValue<boolean>;
};

export type ManifestExecutionHookStructOutput = [
  string,
  number,
  boolean,
  boolean
] & {
  executionSelector: string;
  entityId: number;
  isPreHook: boolean;
  isPostHook: boolean;
};

export type ExecutionManifestStruct = {
  executionFunctions: ManifestExecutionFunctionStruct[];
  executionHooks: ManifestExecutionHookStruct[];
  interfaceIds: PromiseOrValue<BytesLike>[];
};

export type ExecutionManifestStructOutput = [
  ManifestExecutionFunctionStructOutput[],
  ManifestExecutionHookStructOutput[],
  string[]
] & {
  executionFunctions: ManifestExecutionFunctionStructOutput[];
  executionHooks: ManifestExecutionHookStructOutput[];
  interfaceIds: string[];
};

export declare namespace IAppRegistryBase {
  export type AppParamsStruct = {
    name: PromiseOrValue<string>;
    permissions: PromiseOrValue<BytesLike>[];
    client: PromiseOrValue<string>;
    installPrice: PromiseOrValue<BigNumberish>;
    accessDuration: PromiseOrValue<BigNumberish>;
  };

  export type AppParamsStructOutput = [
    string,
    string[],
    string,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    permissions: string[];
    client: string;
    installPrice: BigNumber;
    accessDuration: BigNumber;
  };

  export type AppStruct = {
    appId: PromiseOrValue<BytesLike>;
    module: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    client: PromiseOrValue<string>;
    permissions: PromiseOrValue<BytesLike>[];
    manifest: ExecutionManifestStruct;
  };

  export type AppStructOutput = [
    string,
    string,
    string,
    string,
    string[],
    ExecutionManifestStructOutput
  ] & {
    appId: string;
    module: string;
    owner: string;
    client: string;
    permissions: string[];
    manifest: ExecutionManifestStructOutput;
  };
}

export interface IAppRegistryInterface extends utils.Interface {
  functions: {
    "adminBanApp(address)": FunctionFragment;
    "adminRegisterAppSchema(string,address,bool)": FunctionFragment;
    "createApp((string,bytes32[],address,uint256,uint64))": FunctionFragment;
    "getAppByClient(address)": FunctionFragment;
    "getAppById(bytes32)": FunctionFragment;
    "getAppSchema()": FunctionFragment;
    "getAppSchemaId()": FunctionFragment;
    "getLatestAppId(address)": FunctionFragment;
    "installApp(address,address,bytes)": FunctionFragment;
    "isAppBanned(address)": FunctionFragment;
    "registerApp(address,address)": FunctionFragment;
    "removeApp(bytes32)": FunctionFragment;
    "uninstallApp(address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminBanApp"
      | "adminRegisterAppSchema"
      | "createApp"
      | "getAppByClient"
      | "getAppById"
      | "getAppSchema"
      | "getAppSchemaId"
      | "getLatestAppId"
      | "installApp"
      | "isAppBanned"
      | "registerApp"
      | "removeApp"
      | "uninstallApp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminBanApp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRegisterAppSchema",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createApp",
    values: [IAppRegistryBase.AppParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppByClient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppById",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppSchema",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAppSchemaId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAppId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "installApp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAppBanned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerApp",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeApp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallApp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminBanApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRegisterAppSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppByClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAppById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppSchemaId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAppId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "installApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAppBanned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uninstallApp",
    data: BytesLike
  ): Result;

  events: {
    "AppBanned(address,bytes32)": EventFragment;
    "AppCreated(address,bytes32)": EventFragment;
    "AppInstalled(address,address,bytes32)": EventFragment;
    "AppRegistered(address,bytes32)": EventFragment;
    "AppSchemaSet(bytes32)": EventFragment;
    "AppUninstalled(address,address,bytes32)": EventFragment;
    "AppUnregistered(address,bytes32)": EventFragment;
    "AppUpdated(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppBanned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppInstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppSchemaSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppUninstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppUpdated"): EventFragment;
}

export interface AppBannedEventObject {
  app: string;
  uid: string;
}
export type AppBannedEvent = TypedEvent<[string, string], AppBannedEventObject>;

export type AppBannedEventFilter = TypedEventFilter<AppBannedEvent>;

export interface AppCreatedEventObject {
  app: string;
  uid: string;
}
export type AppCreatedEvent = TypedEvent<
  [string, string],
  AppCreatedEventObject
>;

export type AppCreatedEventFilter = TypedEventFilter<AppCreatedEvent>;

export interface AppInstalledEventObject {
  app: string;
  account: string;
  appId: string;
}
export type AppInstalledEvent = TypedEvent<
  [string, string, string],
  AppInstalledEventObject
>;

export type AppInstalledEventFilter = TypedEventFilter<AppInstalledEvent>;

export interface AppRegisteredEventObject {
  app: string;
  uid: string;
}
export type AppRegisteredEvent = TypedEvent<
  [string, string],
  AppRegisteredEventObject
>;

export type AppRegisteredEventFilter = TypedEventFilter<AppRegisteredEvent>;

export interface AppSchemaSetEventObject {
  uid: string;
}
export type AppSchemaSetEvent = TypedEvent<[string], AppSchemaSetEventObject>;

export type AppSchemaSetEventFilter = TypedEventFilter<AppSchemaSetEvent>;

export interface AppUninstalledEventObject {
  app: string;
  account: string;
  appId: string;
}
export type AppUninstalledEvent = TypedEvent<
  [string, string, string],
  AppUninstalledEventObject
>;

export type AppUninstalledEventFilter = TypedEventFilter<AppUninstalledEvent>;

export interface AppUnregisteredEventObject {
  app: string;
  uid: string;
}
export type AppUnregisteredEvent = TypedEvent<
  [string, string],
  AppUnregisteredEventObject
>;

export type AppUnregisteredEventFilter = TypedEventFilter<AppUnregisteredEvent>;

export interface AppUpdatedEventObject {
  app: string;
  uid: string;
}
export type AppUpdatedEvent = TypedEvent<
  [string, string],
  AppUpdatedEventObject
>;

export type AppUpdatedEventFilter = TypedEventFilter<AppUpdatedEvent>;

export interface IAppRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAppRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminBanApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminRegisterAppSchema(
      schema: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      revocable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createApp(
      params: IAppRegistryBase.AppParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAppByClient(
      client: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAppById(
      appId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IAppRegistryBase.AppStructOutput]>;

    getAppSchema(overrides?: CallOverrides): Promise<[string]>;

    getAppSchemaId(overrides?: CallOverrides): Promise<[string]>;

    getLatestAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    installApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAppBanned(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerApp(
      app: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeApp(
      appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uninstallApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adminBanApp(
    app: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminRegisterAppSchema(
    schema: PromiseOrValue<string>,
    resolver: PromiseOrValue<string>,
    revocable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createApp(
    params: IAppRegistryBase.AppParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAppByClient(
    client: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAppById(
    appId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IAppRegistryBase.AppStructOutput>;

  getAppSchema(overrides?: CallOverrides): Promise<string>;

  getAppSchemaId(overrides?: CallOverrides): Promise<string>;

  getLatestAppId(
    app: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  installApp(
    app: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAppBanned(
    app: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerApp(
    app: PromiseOrValue<string>,
    client: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeApp(
    appId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uninstallApp(
    app: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adminBanApp(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    adminRegisterAppSchema(
      schema: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      revocable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    createApp(
      params: IAppRegistryBase.AppParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string, string] & { app: string; appId: string }>;

    getAppByClient(
      client: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAppById(
      appId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IAppRegistryBase.AppStructOutput>;

    getAppSchema(overrides?: CallOverrides): Promise<string>;

    getAppSchemaId(overrides?: CallOverrides): Promise<string>;

    getLatestAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    installApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAppBanned(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerApp(
      app: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeApp(
      appId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    uninstallApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AppBanned(address,bytes32)"(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppBannedEventFilter;
    AppBanned(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppBannedEventFilter;

    "AppCreated(address,bytes32)"(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppCreatedEventFilter;
    AppCreated(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppCreatedEventFilter;

    "AppInstalled(address,address,bytes32)"(
      app?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      appId?: PromiseOrValue<BytesLike> | null
    ): AppInstalledEventFilter;
    AppInstalled(
      app?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      appId?: PromiseOrValue<BytesLike> | null
    ): AppInstalledEventFilter;

    "AppRegistered(address,bytes32)"(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppRegisteredEventFilter;
    AppRegistered(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppRegisteredEventFilter;

    "AppSchemaSet(bytes32)"(uid?: null): AppSchemaSetEventFilter;
    AppSchemaSet(uid?: null): AppSchemaSetEventFilter;

    "AppUninstalled(address,address,bytes32)"(
      app?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      appId?: PromiseOrValue<BytesLike> | null
    ): AppUninstalledEventFilter;
    AppUninstalled(
      app?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      appId?: PromiseOrValue<BytesLike> | null
    ): AppUninstalledEventFilter;

    "AppUnregistered(address,bytes32)"(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppUnregisteredEventFilter;
    AppUnregistered(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppUnregisteredEventFilter;

    "AppUpdated(address,bytes32)"(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppUpdatedEventFilter;
    AppUpdated(
      app?: PromiseOrValue<string> | null,
      uid?: null
    ): AppUpdatedEventFilter;
  };

  estimateGas: {
    adminBanApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminRegisterAppSchema(
      schema: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      revocable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createApp(
      params: IAppRegistryBase.AppParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAppByClient(
      client: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppById(
      appId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppSchema(overrides?: CallOverrides): Promise<BigNumber>;

    getAppSchemaId(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    installApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAppBanned(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerApp(
      app: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeApp(
      appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uninstallApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminBanApp(
      app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminRegisterAppSchema(
      schema: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      revocable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createApp(
      params: IAppRegistryBase.AppParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAppByClient(
      client: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppById(
      appId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppSchema(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAppSchemaId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestAppId(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    installApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAppBanned(
      app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerApp(
      app: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeApp(
      appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uninstallApp(
      app: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
