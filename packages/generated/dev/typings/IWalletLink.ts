/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IWalletLinkBase {
  export type LinkedWalletStruct = {
    addr: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<string>;
  };

  export type LinkedWalletStructOutput = [string, string, string] & {
    addr: string;
    signature: string;
    message: string;
  };
}

export interface IWalletLinkInterface extends utils.Interface {
  functions: {
    "checkIfLinked(address,address)": FunctionFragment;
    "getDefaultWallet(address)": FunctionFragment;
    "getDelegateByVersion(uint256)": FunctionFragment;
    "getLatestNonceForRootKey(address)": FunctionFragment;
    "getRootKeyForWallet(address)": FunctionFragment;
    "getWalletsByRootKey(address)": FunctionFragment;
    "getWalletsByRootKeyWithDelegations(address)": FunctionFragment;
    "linkCallerToRootKey((address,bytes,string),uint256)": FunctionFragment;
    "linkWalletToRootKey((address,bytes,string),(address,bytes,string),uint256)": FunctionFragment;
    "removeCallerLink()": FunctionFragment;
    "removeLink(address,(address,bytes,string),uint256)": FunctionFragment;
    "setDefaultWallet(address)": FunctionFragment;
    "setDelegateByVersion(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkIfLinked"
      | "getDefaultWallet"
      | "getDelegateByVersion"
      | "getLatestNonceForRootKey"
      | "getRootKeyForWallet"
      | "getWalletsByRootKey"
      | "getWalletsByRootKeyWithDelegations"
      | "linkCallerToRootKey"
      | "linkWalletToRootKey"
      | "removeCallerLink"
      | "removeLink"
      | "setDefaultWallet"
      | "setDelegateByVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkIfLinked",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateByVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestNonceForRootKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRootKeyForWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletsByRootKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletsByRootKeyWithDelegations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkCallerToRootKey",
    values: [IWalletLinkBase.LinkedWalletStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWalletToRootKey",
    values: [
      IWalletLinkBase.LinkedWalletStruct,
      IWalletLinkBase.LinkedWalletStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCallerLink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLink",
    values: [
      PromiseOrValue<string>,
      IWalletLinkBase.LinkedWalletStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegateByVersion",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkIfLinked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateByVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestNonceForRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootKeyForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletsByRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletsByRootKeyWithDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkCallerToRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkWalletToRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCallerLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeLink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegateByVersion",
    data: BytesLike
  ): Result;

  events: {
    "LinkThirdPartyDelegation(address,address)": EventFragment;
    "LinkWalletToRootKey(address,address)": EventFragment;
    "RemoveLink(address,address)": EventFragment;
    "SetDefaultWallet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LinkThirdPartyDelegation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkWalletToRootKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultWallet"): EventFragment;
}

export interface LinkThirdPartyDelegationEventObject {
  delegator: string;
  delegatedWallet: string;
}
export type LinkThirdPartyDelegationEvent = TypedEvent<
  [string, string],
  LinkThirdPartyDelegationEventObject
>;

export type LinkThirdPartyDelegationEventFilter =
  TypedEventFilter<LinkThirdPartyDelegationEvent>;

export interface LinkWalletToRootKeyEventObject {
  wallet: string;
  rootKey: string;
}
export type LinkWalletToRootKeyEvent = TypedEvent<
  [string, string],
  LinkWalletToRootKeyEventObject
>;

export type LinkWalletToRootKeyEventFilter =
  TypedEventFilter<LinkWalletToRootKeyEvent>;

export interface RemoveLinkEventObject {
  wallet: string;
  secondWallet: string;
}
export type RemoveLinkEvent = TypedEvent<
  [string, string],
  RemoveLinkEventObject
>;

export type RemoveLinkEventFilter = TypedEventFilter<RemoveLinkEvent>;

export interface SetDefaultWalletEventObject {
  rootKey: string;
  defaultWallet: string;
}
export type SetDefaultWalletEvent = TypedEvent<
  [string, string],
  SetDefaultWalletEventObject
>;

export type SetDefaultWalletEventFilter =
  TypedEventFilter<SetDefaultWalletEvent>;

export interface IWalletLink extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWalletLinkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDefaultWallet(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { rootKey: string }>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { wallets: string[] }>;

    getWalletsByRootKeyWithDelegations(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { wallets: string[] }>;

    linkCallerToRootKey(
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    linkWalletToRootKey(
      wallet: IWalletLinkBase.LinkedWalletStruct,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCallerLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLink(
      wallet: PromiseOrValue<string>,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultWallet(
      defaultWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkIfLinked(
    rootKey: PromiseOrValue<string>,
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDefaultWallet(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegateByVersion(
    version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLatestNonceForRootKey(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRootKeyForWallet(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWalletsByRootKey(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getWalletsByRootKeyWithDelegations(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  linkCallerToRootKey(
    rootWallet: IWalletLinkBase.LinkedWalletStruct,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  linkWalletToRootKey(
    wallet: IWalletLinkBase.LinkedWalletStruct,
    rootWallet: IWalletLinkBase.LinkedWalletStruct,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCallerLink(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLink(
    wallet: PromiseOrValue<string>,
    rootWallet: IWalletLinkBase.LinkedWalletStruct,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultWallet(
    defaultWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegateByVersion(
    version: PromiseOrValue<BigNumberish>,
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDefaultWallet(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getWalletsByRootKeyWithDelegations(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    linkCallerToRootKey(
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    linkWalletToRootKey(
      wallet: IWalletLinkBase.LinkedWalletStruct,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCallerLink(overrides?: CallOverrides): Promise<void>;

    removeLink(
      wallet: PromiseOrValue<string>,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultWallet(
      defaultWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LinkThirdPartyDelegation(address,address)"(
      delegator?: PromiseOrValue<string> | null,
      delegatedWallet?: PromiseOrValue<string> | null
    ): LinkThirdPartyDelegationEventFilter;
    LinkThirdPartyDelegation(
      delegator?: PromiseOrValue<string> | null,
      delegatedWallet?: PromiseOrValue<string> | null
    ): LinkThirdPartyDelegationEventFilter;

    "LinkWalletToRootKey(address,address)"(
      wallet?: PromiseOrValue<string> | null,
      rootKey?: PromiseOrValue<string> | null
    ): LinkWalletToRootKeyEventFilter;
    LinkWalletToRootKey(
      wallet?: PromiseOrValue<string> | null,
      rootKey?: PromiseOrValue<string> | null
    ): LinkWalletToRootKeyEventFilter;

    "RemoveLink(address,address)"(
      wallet?: PromiseOrValue<string> | null,
      secondWallet?: PromiseOrValue<string> | null
    ): RemoveLinkEventFilter;
    RemoveLink(
      wallet?: PromiseOrValue<string> | null,
      secondWallet?: PromiseOrValue<string> | null
    ): RemoveLinkEventFilter;

    "SetDefaultWallet(address,address)"(
      rootKey?: PromiseOrValue<string> | null,
      defaultWallet?: PromiseOrValue<string> | null
    ): SetDefaultWalletEventFilter;
    SetDefaultWallet(
      rootKey?: PromiseOrValue<string> | null,
      defaultWallet?: PromiseOrValue<string> | null
    ): SetDefaultWalletEventFilter;
  };

  estimateGas: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultWallet(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWalletsByRootKeyWithDelegations(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkCallerToRootKey(
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    linkWalletToRootKey(
      wallet: IWalletLinkBase.LinkedWalletStruct,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCallerLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLink(
      wallet: PromiseOrValue<string>,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultWallet(
      defaultWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultWallet(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletsByRootKeyWithDelegations(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkCallerToRootKey(
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    linkWalletToRootKey(
      wallet: IWalletLinkBase.LinkedWalletStruct,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCallerLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLink(
      wallet: PromiseOrValue<string>,
      rootWallet: IWalletLinkBase.LinkedWalletStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultWallet(
      defaultWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegateByVersion(
      version: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
