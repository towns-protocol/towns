/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ISwapRouter, ISwapRouterInterface } from "../ISwapRouter";

const _abi = [
  {
    type: "function",
    name: "executeSwap",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct ISwapRouterBase.ExactInputParams",
        components: [
          {
            name: "tokenIn",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenOut",
            type: "address",
            internalType: "address",
          },
          {
            name: "amountIn",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "routerParams",
        type: "tuple",
        internalType: "struct ISwapRouterBase.RouterParams",
        components: [
          {
            name: "router",
            type: "address",
            internalType: "address",
          },
          {
            name: "approveTarget",
            type: "address",
            internalType: "address",
          },
          {
            name: "swapData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "poster",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "FeeDistribution",
    inputs: [
      {
        name: "token",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "treasury",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "poster",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "treasuryAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "posterAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Swap",
    inputs: [
      {
        name: "router",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "tokenOut",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "amountOut",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "recipient",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SwapRouterInitialized",
    inputs: [
      {
        name: "spaceFactory",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "SwapRouter__InsufficientOutput",
    inputs: [],
  },
  {
    type: "error",
    name: "SwapRouter__InvalidAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "SwapRouter__InvalidRouter",
    inputs: [],
  },
  {
    type: "error",
    name: "SwapRouter__UnexpectedETH",
    inputs: [],
  },
] as const;

export class ISwapRouter__factory {
  static readonly abi = _abi;
  static createInterface(): ISwapRouterInterface {
    return new utils.Interface(_abi) as ISwapRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISwapRouter {
    return new Contract(address, _abi, signerOrProvider) as ISwapRouter;
  }
}
