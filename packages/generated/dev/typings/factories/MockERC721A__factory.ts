/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockERC721A, MockERC721AInterface } from "../MockERC721A";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "__ERC721A_init",
    inputs: [
      {
        name: "name_",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol_",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "burn",
    inputs: [
      {
        name: "token",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getApproved",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isApprovedForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mintTo",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ownerOf",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "setApprovalForAll",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenURI",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ApprovalForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ConsecutiveTransfer",
    inputs: [
      {
        name: "fromTokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "toTokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint32",
        indexed: false,
        internalType: "uint32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InterfaceAdded",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InterfaceRemoved",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ApprovalCallerNotOwnerNorApproved",
    inputs: [],
  },
  {
    type: "error",
    name: "ApprovalQueryForNonexistentToken",
    inputs: [],
  },
  {
    type: "error",
    name: "BalanceQueryForZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "Initializable_InInitializingState",
    inputs: [],
  },
  {
    type: "error",
    name: "Initializable_NotInInitializingState",
    inputs: [],
  },
  {
    type: "error",
    name: "Introspection_AlreadySupported",
    inputs: [],
  },
  {
    type: "error",
    name: "Introspection_NotSupported",
    inputs: [],
  },
  {
    type: "error",
    name: "MintERC2309QuantityExceedsLimit",
    inputs: [],
  },
  {
    type: "error",
    name: "MintToZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "MintZeroQuantity",
    inputs: [],
  },
  {
    type: "error",
    name: "OwnerQueryForNonexistentToken",
    inputs: [],
  },
  {
    type: "error",
    name: "OwnershipNotInitializedForExtraData",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferCallerNotOwnerNorApproved",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferFromIncorrectOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferToNonERC721ReceiverImplementer",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferToZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "URIQueryForNonexistentToken",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b5061001861006a565b61006560405180604001604052806009815260200168151bdddb9cd5195cdd60ba1b815250604051806040016040528060048152602001631513919560e21b81525061011060201b60201c565b6102c5565b7f59b501c3653afc186af7d48dda36cf6732bd21629a6295693664240a6ef520008054640100000000900460ff16156100b6576040516366008a2d60e01b815260040160405180910390fd5b805463ffffffff908116101561010d57805463ffffffff191663ffffffff90811782556040519081527fe9c9b456cb2994b80aeef036cf59d26e9617df80f816a6ee5a5b4166e07e2f5c9060200160405180910390a15b50565b7f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df007f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df0261015c848261020b565b506003810161016b838261020b565b505f90555050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061019b57607f821691505b6020821081036101b957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561020657805f5260205f20601f840160051c810160208510156101e45750805b601f840160051c820191505b81811015610203575f81556001016101f0565b50505b505050565b81516001600160401b0381111561022457610224610173565b610238816102328454610187565b846101bf565b6020601f82116001811461026a575f83156102535750848201515b5f19600385901b1c1916600184901b178455610203565b5f84815260208120601f198516915b828110156102995787850151825560209485019460019092019101610279565b50848210156102b657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b611c91806102d25f395ff3fe608060405260043610610109575f3560e01c80636352211e116100a1578063a22cb46511610071578063c87b56dd11610057578063c87b56dd146102b9578063d2f01f19146102d8578063e985e9c5146102f7575f5ffd5b8063a22cb46514610287578063b88d4fde146102a6575f5ffd5b80636352211e1461021657806370a0823114610235578063755edd171461025457806395d89b4114610273575f5ffd5b806323b872dd116100dc57806323b872dd146101b257806340c10f19146101c557806342842e0e146101e457806342966c68146101f7575f5ffd5b806306fdde031461010d578063081812fc14610137578063095ea7b31461017b57806318160ddd14610190575b5f5ffd5b348015610118575f5ffd5b50610121610326565b60405161012e919061172d565b60405180910390f35b348015610142575f5ffd5b5061015661015136600461173f565b6103d8565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012e565b61018e610189366004611779565b6103e8565b005b34801561019b575f5ffd5b506101a46103f8565b60405190815260200161012e565b61018e6101c03660046117a1565b610449565b3480156101d0575f5ffd5b5061018e6101df366004611779565b610742565b61018e6101f23660046117a1565b61074c565b348015610202575f5ffd5b5061018e61021136600461173f565b61076b565b348015610221575f5ffd5b5061015661023036600461173f565b610777565b348015610240575f5ffd5b506101a461024f3660046117db565b610781565b34801561025f575f5ffd5b506101a461026e3660046117db565b61078b565b34801561027e575f5ffd5b506101216107c6565b348015610292575f5ffd5b5061018e6102a13660046117f4565b6107f7565b61018e6102b43660046118ef565b6108ac565b3480156102c4575f5ffd5b506101216102d336600461173f565b61091c565b3480156102e3575f5ffd5b5061018e6102f2366004611984565b6109c2565b348015610302575f5ffd5b506103166103113660046119e9565b610a2f565b604051901515815260200161012e565b60607f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df00600201805461035790611a1a565b80601f016020809104026020016040519081016040528092919081815260200182805461038390611a1a565b80156103ce5780601f106103a5576101008083540402835291602001916103ce565b820191905f5260205f20905b8154815290600101906020018083116103b157829003601f168201915b5050505050905090565b5f6103e282610a8a565b92915050565b6103f482826001610b11565b5050565b5f6104447f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df01547f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df00540390565b905090565b5f6104548183610c68565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104bb576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df066020526040902080546105128187335b73ffffffffffffffffffffffffffffffffffffffff9081169116811491141790565b610556576105208633610a2f565b610556576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff85166105a3576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156105ad575f82555b73ffffffffffffffffffffffffffffffffffffffff8681165f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df05602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055918716808252919020805460010190557f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df00904260a01b177c0200000000000000000000000000000000000000000000000000000000175f8681526004830160205260408120919091557c0200000000000000000000000000000000000000000000000000000000851690036106de57600185015f81815260048301602052604081205490036106dc57815481146106dc575f81815260048301602052604090208590555b505b848673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050505050565b6103f48282610da3565b61076683838360405180602001604052805f8152506108ac565b505050565b61077481610f58565b50565b5f6103e282610f62565b5f6103e282610f6d565b5f6107b47f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df005490565b90506107c1826001610da3565b919050565b60607f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df00600301805461035790611a1a565b335f8181527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df076020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108b7848484610449565b73ffffffffffffffffffffffffffffffffffffffff83163b15610916576108e084848484610f77565b610916576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6060610927826110ed565b61095d576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61097260408051602081019091525f815290565b905080515f036109905760405180602001604052805f8152506109bb565b8061099a8461116a565b6040516020016109ab929190611a82565b6040516020818303038152906040525b9392505050565b7f59b501c3653afc186af7d48dda36cf6732bd21629a6295693664240a6ef5200054640100000000900460ff16610a25576040517f77a399b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103f482826111cb565b73ffffffffffffffffffffffffffffffffffffffff8083165f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df076020908152604080832093851683529290529081205460ff166109bb565b5f610a94826110ed565b610aca576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df06602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b5f610b1b83610f62565b90508115610bc8573373ffffffffffffffffffffffffffffffffffffffff821614610bc85773ffffffffffffffffffffffffffffffffffffffff81165f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df076020908152604080832033845290915290205460ff16610bc8576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8381527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df06602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88811691821790925591518693918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a450505050565b5f818311610d7157505f8181527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df046020526040812054907f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df00907c010000000000000000000000000000000000000000000000000000000083169003610d6f57815f03610d695780548310610d28576040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092015f81815260048401602052604090205490929091508115610d29575b506103e2565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df00545f829003610dff576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83165f8181527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df056020908152604080832080546801000000000000000188020190558483527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df0490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114610ef65780835f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f5fa4600101610ec0565b50815f03610f30576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df005550505050565b610774815f611227565b5f6103e2818361147f565b5f6103e28261148a565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081525f9073ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290610fd1903390899088908890600401611a96565b6020604051808303815f875af1925050508015611029575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261102691810190611af0565b60015b61109e573d808015611056576040519150601f19603f3d011682016040523d82523d5f602084013e61105b565b606091505b5080515f03611096576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490505b949350505050565b5f7f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df0054821080156103e25750505f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df0460205260409020547c0100000000000000000000000000000000000000000000000000000000161590565b606060a06040510180604052602081039150505f815280825b600183039250600a81066030018353600a90048061118357508190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909101908152919050565b6111f47f80ac58cd00000000000000000000000000000000000000000000000000000000611529565b61121d7f5b5e139f00000000000000000000000000000000000000000000000000000000611529565b6103f4828261167e565b5f6112328184610c68565b9050805f8061126d865f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df066020526040902080549091565b91509150841561130e576112828184336104f0565b61130e5773ffffffffffffffffffffffffffffffffffffffff83165f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df076020908152604080832033845290915290205460ff1661130e576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015611318575f82555b73ffffffffffffffffffffffffffffffffffffffff83165f8181527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df056020526040902080546fffffffffffffffffffffffffffffffff0190557f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df00904260a01b177c0300000000000000000000000000000000000000000000000000000000175f8881526004830160205260408120919091557c02000000000000000000000000000000000000000000000000000000008616900361142757600187015f81815260048301602052604081205490036114255781548114611425575f81815260048301602052604090208690555b505b60405187905f9073ffffffffffffffffffffffffffffffffffffffff8716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4600190810180549091019055505050505050565b5f6109bb8383610c68565b5f73ffffffffffffffffffffffffffffffffffffffff82166114d8576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff165f9081527f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df05602052604090205467ffffffffffffffff1690565b7fffffffff0000000000000000000000000000000000000000000000000000000081165f9081527f81088bbc801e045ea3e7620779ab349988f58afbdfba10dff983df3f33522b00602052604090205460ff166115fd577fffffffff0000000000000000000000000000000000000000000000000000000081165f9081527f81088bbc801e045ea3e7620779ab349988f58afbdfba10dff983df3f33522b006020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561162f565b6040517ff2cfeefa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fffffffff000000000000000000000000000000000000000000000000000000008216907f78f84e5b1c5c05be2b5ad3800781dd404d6d6c6302bc755c0fe20f58a33a7f22905f90a250565b7f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df007f6569bde4a160c636ea8b8d11acb83a60d7fec0b8f2e09389306cba0e1340df026116ca8482611b7a565b50600381016116d98382611b7a565b505f90555050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081525f6109bb60208301846116e1565b5f6020828403121561174f575f5ffd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146107c1575f5ffd5b5f5f6040838503121561178a575f5ffd5b61179383611756565b946020939093013593505050565b5f5f5f606084860312156117b3575f5ffd5b6117bc84611756565b92506117ca60208501611756565b929592945050506040919091013590565b5f602082840312156117eb575f5ffd5b6109bb82611756565b5f5f60408385031215611805575f5ffd5b61180e83611756565b915060208301358015158114611822575f5ffd5b809150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f5f67ffffffffffffffff8411156118745761187461182d565b506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85018116603f0116810181811067ffffffffffffffff821117156118c1576118c161182d565b6040528381529050808284018510156118d8575f5ffd5b838360208301375f60208583010152509392505050565b5f5f5f5f60808587031215611902575f5ffd5b61190b85611756565b935061191960208601611756565b925060408501359150606085013567ffffffffffffffff81111561193b575f5ffd5b8501601f8101871361194b575f5ffd5b61195a8782356020840161185a565b91505092959194509250565b5f82601f830112611975575f5ffd5b6109bb8383356020850161185a565b5f5f60408385031215611995575f5ffd5b823567ffffffffffffffff8111156119ab575f5ffd5b6119b785828601611966565b925050602083013567ffffffffffffffff8111156119d3575f5ffd5b6119df85828601611966565b9150509250929050565b5f5f604083850312156119fa575f5ffd5b611a0383611756565b9150611a1160208401611756565b90509250929050565b600181811c90821680611a2e57607f821691505b602082108103611a65577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f6110e5611a908386611a6b565b84611a6b565b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152826040820152608060608201525f611ae660808301846116e1565b9695505050505050565b5f60208284031215611b00575f5ffd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146109bb575f5ffd5b601f82111561076657805f5260205f20601f840160051c81016020851015611b545750805b601f840160051c820191505b81811015611b73575f8155600101611b60565b5050505050565b815167ffffffffffffffff811115611b9457611b9461182d565b611ba881611ba28454611a1a565b84611b2f565b6020601f821160018114611bf9575f8315611bc35750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455611b73565b5f848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b82811015611c465787850151825560209485019460019092019101611c26565b5084821015611c8257868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b0190555056";

type MockERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC721A__factory extends ContractFactory {
  constructor(...args: MockERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC721A> {
    return super.deploy(overrides || {}) as Promise<MockERC721A>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC721A {
    return super.attach(address) as MockERC721A;
  }
  override connect(signer: Signer): MockERC721A__factory {
    return super.connect(signer) as MockERC721A__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721AInterface {
    return new utils.Interface(_abi) as MockERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC721A {
    return new Contract(address, _abi, signerOrProvider) as MockERC721A;
  }
}
