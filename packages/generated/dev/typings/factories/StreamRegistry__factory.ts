/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  StreamRegistry,
  StreamRegistryInterface,
} from "../StreamRegistry";

const _abi = [
  {
    type: "function",
    name: "addStream",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "genesisMiniblockHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "stream",
        type: "tuple",
        internalType: "struct Stream",
        components: [
          {
            name: "lastMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastMiniblockNum",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "reserved0",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "flags",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "allocateStream",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "nodes",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "genesisMiniblockHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "genesisMiniblock",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getPaginatedStreams",
    inputs: [
      {
        name: "start",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "stop",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct StreamWithId[]",
        components: [
          {
            name: "id",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "stream",
            type: "tuple",
            internalType: "struct Stream",
            components: [
              {
                name: "lastMiniblockHash",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "lastMiniblockNum",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "reserved0",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "flags",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "nodes",
                type: "address[]",
                internalType: "address[]",
              },
            ],
          },
        ],
      },
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPaginatedStreamsOnNode",
    inputs: [
      {
        name: "nodeAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "start",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "stop",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "streams",
        type: "tuple[]",
        internalType: "struct StreamWithId[]",
        components: [
          {
            name: "id",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "stream",
            type: "tuple",
            internalType: "struct Stream",
            components: [
              {
                name: "lastMiniblockHash",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "lastMiniblockNum",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "reserved0",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "flags",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "nodes",
                type: "address[]",
                internalType: "address[]",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStream",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "stream",
        type: "tuple",
        internalType: "struct Stream",
        components: [
          {
            name: "lastMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastMiniblockNum",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "reserved0",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "flags",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStreamCount",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStreamCountOnNode",
    inputs: [
      {
        name: "nodeAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "count",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStreamWithGenesis",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "stream",
        type: "tuple",
        internalType: "struct Stream",
        components: [
          {
            name: "lastMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastMiniblockNum",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "reserved0",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "flags",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
        ],
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isStream",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "placeStreamOnNode",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "nodeAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "removeStreamFromNode",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "nodeAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setStreamLastMiniblockBatch",
    inputs: [
      {
        name: "miniblocks",
        type: "tuple[]",
        internalType: "struct SetMiniblock[]",
        components: [
          {
            name: "streamId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "prevMiniBlockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastMiniblockHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "lastMiniblockNum",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "isSealed",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setStreamReplicationFactor",
    inputs: [
      {
        name: "requests",
        type: "tuple[]",
        internalType: "struct SetStreamReplicationFactor[]",
        components: [
          {
            name: "streamId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "replicationFactor",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "syncNodesOnStreams",
    inputs: [
      {
        name: "start",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "stop",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateStreams",
    inputs: [
      {
        name: "requests",
        type: "tuple[]",
        internalType: "struct UpdateStream[]",
        components: [
          {
            name: "streamId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "nodes",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "replicationFactor",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "checksum",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "StreamLastMiniblockUpdateFailed",
    inputs: [
      {
        name: "streamId",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "lastMiniblockHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "lastMiniblockNum",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
      {
        name: "reason",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StreamUpdated",
    inputs: [
      {
        name: "eventType",
        type: "uint8",
        indexed: true,
        internalType: "enum IStreamRegistryBase.StreamEventType",
      },
      {
        name: "data",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50612d418061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106100f0575f3560e01c80639ee86d3811610093578063ca78c41a11610063578063ca78c41a146101fc578063d0c27c4f1461021d578063ee885b1214610240578063ff3a14ab14610253575f5ffd5b80639ee86d38146101ad578063b2e76b8e146101c0578063c0f22084146101d3578063c87d1324146101e9575f5ffd5b806333b86ab2116100ce57806333b86ab2146101525780633c2544d1146101655780635c665ce9146101875780636b883c391461019a575f5ffd5b806303cc8793146100f45780631290abe81461010957806322bbda6414610132575b5f5ffd5b610107610102366004611f7f565b610266565b005b61011c610117366004611f9f565b6102cd565b6040516101299190612060565b60405180910390f35b610145610140366004612093565b6103f6565b6040516101299190612154565b6101076101603660046121a7565b6105b0565b610178610173366004611f9f565b6107a0565b60405161012993929190612232565b6101076101953660046121a7565b610975565b6101076101a8366004612266565b610a89565b6101076101bb366004612316565b610c10565b6101076101ce366004612344565b610e4f565b6101db610f3e565b604051908152602001610129565b6101db6101f7366004612396565b610f4d565b61020f61020a366004611f7f565b610f80565b6040516101299291906123b1565b61023061022b366004611f9f565b611118565b6040519015158152602001610129565b61010761024e366004612316565b611123565b6101076102613660046123d4565b6113fe565b5f806102718161189d565b838118908411028318848111908590030284019150505b808310156102c8575f61029b81856118a6565b5f8181526002602081905260409091209192506102bb90839083016118b8565b5050826001019250610288565b505050565b6103196040518060a001604052805f81526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff168152602001606081525090565b806040526103268261191e565b5f82815260026020818152604092839020835160a08101855281548152600182015467ffffffffffffffff8082168386015268010000000000000000820481168388015270010000000000000000000000000000000090910416606082015292810180548551818502810185019096528086529394919360808601938301828280156103e657602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116103bb575b5050505050815250509050919050565b73ffffffffffffffffffffffffffffffffffffffff83165f9081526010602052604081206060916104268261189d565b9050838118818511028418858111868203028067ffffffffffffffff81111561045157610451612445565b60405190808252806020026020018201604052801561048a57816020015b610477611e50565b81526020019060019003908161046f5790505b5094505f5b818110156105a4575f8682815181106104aa576104aa612472565b602002602001015190506104c9828a01876118a690919063ffffffff16565b8082525f90815260026020818152604092839020835160a08101855281548152600182015467ffffffffffffffff80821683860152680100000000000000008204811683880152700100000000000000000000000000000000909104166060820152928101805485518185028101850190965280865293949193608086019383018282801561058c57602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610561575b5050509190925250505060209091015260010161048f565b50505050509392505050565b805f8190036105f7576105f76040518060400160405280600781526020017f4241445f4152470000000000000000000000000000000000000000000000000081525061196d565b5f5b8181101561079a573684848381811061061457610614612472565b9050602002810190610626919061249f565b9050610632813561191e565b80355f90815260026020526040902061064a81611990565b826060013514610692576106926040518060400160405280600781526020017f4241445f4152470000000000000000000000000000000000000000000000000081525061196d565b5f806106a160208501856124db565b905090505f5b8181101561070e57336106bd60208701876124db565b838181106106cd576106cd612472565b90506020020160208101906106e29190612396565b73ffffffffffffffffffffffffffffffffffffffff1603610706576001925061070e565b6001016106a7565b5081610752576107526040518060400160405280600881526020017f4241445f4155544800000000000000000000000000000000000000000000000081525061196d565b83355f81815260026020908152604090912061078b929091610776908801886124db565b61078660608a0160408b0161253f565b6119bf565b505050508060010190506105f9565b50505050565b6107ec6040518060a001604052805f81526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff168152602001606081525090565b5f6060826040526107fc8461191e565b5f84815260026020818152604080842060048352818520546003845294829020825160a08101845282548152600183015467ffffffffffffffff80821683880152680100000000000000008204811683870152700100000000000000000000000000000000909104166060820152948201805484518187028101870190955280855292969591949193879360808601939192918301828280156108d357602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116108a8575b50505050508152505092508080546108ea9061255f565b80601f01602080910402602001604051908101604052809291908181526020018280546109169061255f565b80156109615780601f1061093857610100808354040283529160200191610961565b820191905f5260205f20905b81548152906001019060200180831161094457829003601f168201915b505050505090509250925092509193909250565b33610981600d82611abc565b6109c3576109c36040518060400160405280600881526020017f4241445f4155544800000000000000000000000000000000000000000000000081525061196d565b815f819003610a0a57610a0a6040518060400160405280600781526020017f4241445f4152470000000000000000000000000000000000000000000000000081525061196d565b5f5b81811015610a825736858583818110610a2757610a27612472565b9050602002810190610a3991906125b0565b9050610a45813561191e565b80355f818152600260209081526040909120610a79929091610a69908501856124db565b610786606087016040880161253f565b50600101610a0c565b5050505050565b335f8181526007602052604090206002015473ffffffffffffffffffffffffffffffffffffffff16610af357610af36040518060400160405280600e81526020017f4e4f44455f4e4f545f464f554e4400000000000000000000000000000000000081525061196d565b86610afd81611aea565b8686610b098282611b37565b5f8a8152600260205260409020600181015488908b908b9067ffffffffffffff00680100000000000000009091041660ff8216176001850180547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff841602179055845f610b8e600283018686611eb2565b50509390935550610ba391505f90508c611bbe565b505f8b8152600360205260409020610bbc878983612631565b505f8b8152600460205260409020889055610bd88b8b8b611bc9565b610c035f8c83604051602001610bef9291906127e9565b604051602081830303815290604052611c35565b5050505050505050505050565b81610c1a8161191e565b335f8181526007602052604090206002015473ffffffffffffffffffffffffffffffffffffffff16610c8457610c846040518060400160405280600e81526020017f4e4f44455f4e4f545f464f554e4400000000000000000000000000000000000081525061196d565b5f84815260026020818152604080842073ffffffffffffffffffffffffffffffffffffffff88168552601090925290922090820190610cc39087611bbe565b5080545f5b81811015610d65578673ffffffffffffffffffffffffffffffffffffffff16838281548110610cf957610cf9612472565b5f9182526020909120015473ffffffffffffffffffffffffffffffffffffffff1603610d5d57610d5d6040518060400160405280600e81526020017f414c52454144595f45584953545300000000000000000000000000000000000081525061196d565b600101610cc8565b508154600180820184555f8481526020902090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff89161790558301548254610e049168010000000000000000900467ffffffffffffffff169060ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00919091161790565b8360010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610e4660028885604051602001610bef9291906127e9565b50505050505050565b335f8181526007602052604090206002015473ffffffffffffffffffffffffffffffffffffffff16610eb957610eb96040518060400160405280600e81526020017f4e4f44455f4e4f545f464f554e4400000000000000000000000000000000000081525061196d565b83610ec381611aea565b610ed060808401846124db565b610eda8282611b37565b610ee45f88611bbe565b505f8781526002602052604090208590610efe82826128d1565b50505f878152600460205260409020869055610f2687610f2160808801886124db565b611bc9565b610e4660018887604051602001610bef929190612a64565b5f610f488161189d565b905090565b73ffffffffffffffffffffffffffffffffffffffff81165f908152601060205260408120610f7a9061189d565b92915050565b60605f80610f8d8161189d565b9050838118818511028418858111868203025f8167ffffffffffffffff811115610fb957610fb9612445565b604051908082528060200260200182016040528015610ff257816020015b610fdf611e50565b815260200190600190039081610fd75790505b5090505f5b82811015611106575f82828151811061101257611012612472565b6020908102919091010151905061102b5f8b84016118a6565b8082525f90815260026020818152604092839020835160a08101855281548152600182015467ffffffffffffffff8082168386015268010000000000000000820481168388015270010000000000000000000000000000000090910416606082015292810180548551818502810185019096528086529394919360808601938301828280156110ee57602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116110c3575b50505091909252505050602090910152600101610ff7565b509450505083101590505b9250929050565b5f610f7a8183611c73565b8161112d8161191e565b335f8181526007602052604090206002015473ffffffffffffffffffffffffffffffffffffffff16611197576111976040518060400160405280600e81526020017f4e4f44455f4e4f545f464f554e4400000000000000000000000000000000000081525061196d565b5f84815260026020818152604080842073ffffffffffffffffffffffffffffffffffffffff881685526010909252909220908201906111d69087611c8a565b5080545f90815b81811015611347578773ffffffffffffffffffffffffffffffffffffffff1684828154811061120e5761120e612472565b5f9182526020909120015473ffffffffffffffffffffffffffffffffffffffff160361133f5783611240600184612b49565b8154811061125057611250612472565b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828154811061128a5761128a612472565b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838054806112df576112df612b5c565b5f8281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905560019250611347565b6001016111dd565b508161138b5761138b6040518060400160405280600e81526020017f4e4f44455f4e4f545f464f554e4400000000000000000000000000000000000081525061196d565b60018401805484547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff821660ff909116680100000000000000009283900467ffffffffffffff0016179091021790556040516113f490600290610bef908b9088906020016127e9565b5050505050505050565b335f8181526007602052604090206002015473ffffffffffffffffffffffffffffffffffffffff16611468576114686040518060400160405280600e81526020017f4e4f44455f4e4f545f464f554e4400000000000000000000000000000000000081525061196d565b815f8190036114af576114af6040518060400160405280600781526020017f4241445f4152470000000000000000000000000000000000000000000000000081525061196d565b5f8167ffffffffffffffff8111156114c9576114c9612445565b60405190808252806020026020018201604052801561153357816020015b6115206040518060a001604052805f81526020015f81526020015f81526020015f67ffffffffffffffff1681526020015f151581525090565b8152602001906001900390816114e75790505b5090505f805b8381101561187b573687878381811061155457611554612472565b60a00291909101915061156a90505f8235611c73565b6115f6577f75460fe319331413a18a82d99b07735cec53fa0c4061ada38c2141e331082afa813560408301356115a66080850160608601612b89565b604080518082018252600981527f4e4f545f464f554e440000000000000000000000000000000000000000000000602082015290516115e89493929190612ba4565b60405180910390a150611873565b80355f908152600260205260409020600180820154700100000000000000000000000000000000900416156116ae577f75460fe319331413a18a82d99b07735cec53fa0c4061ada38c2141e331082afa8235604084013561165d6080860160608701612b89565b604080518082018252600d81527f53545245414d5f5345414c4544000000000000000000000000000000000000006020820152905161169f9493929190612ba4565b60405180910390a15050611873565b6116be6080830160608401612b89565b600182015467ffffffffffffffff918216911610611750577f75460fe319331413a18a82d99b07735cec53fa0c4061ada38c2141e331082afa8235604084013561170e6080860160608701612b89565b604080518082018252600781527f4241445f415247000000000000000000000000000000000000000000000000006020820152905161169f9493929190612ba4565b600181015467ffffffffffffffff165f0361177d5781355f90815260036020526040812061177d91611f38565b604082013581556117946080830160608401612b89565b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169190911790556117df60a0830160808401612be6565b1561183957600181810180547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff81167001000000000000000000000000000000009182900467ffffffffffffffff16909317029190911790555b61184836839003830183612bff565b858561185381612c7a565b96508151811061186557611865612472565b602002602001018190525050505b600101611539565b50808252611895600383604051602001610bef9190612cb1565b505050505050565b5f610f7a825490565b5f6118b18383611c95565b9392505050565b80545f5b8181101561079a57611915845f6010015f8685815481106118df576118df612472565b5f91825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902090611bbe565b506001016118bc565b6119285f82611c73565b61196a5761196a6040518060400160405280600981526020017f4e4f545f464f554e44000000000000000000000000000000000000000000000081525061196d565b50565b6308c379a06040820352602080820352601f19601f825101166044810160248303fd5b5f816040516020016119a29190612d2f565b604051602081830303815290604052805190602001209050919050565b60ff811615806119d1575060ff811682105b15611a1457611a146040518060400160405280600781526020017f4241445f4152470000000000000000000000000000000000000000000000000081525061196d565b611a218486600201611cbb565b611a2c848484611bc9565b60018501548390839067ffffffffffffff00680100000000000000009091041660ff8416176001880180547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff841602179055611aa0600289018484611eb2565b50505050610a8260028587604051602001610bef9291906127e9565b73ffffffffffffffffffffffffffffffffffffffff81165f90815260018301602052604081205415156118b1565b611af45f82611c73565b1561196a5761196a6040518060400160405280600e81526020017f414c52454144595f45584953545300000000000000000000000000000000000081525061196d565b805f5b8181101561079a57611b74848483818110611b5757611b57612472565b9050602002016020810190611b6c9190612396565b600590611abc565b611bb657611bb66040518060400160405280600e81526020017f4e4f44455f4e4f545f464f554e4400000000000000000000000000000000000081525061196d565b600101611b3a565b5f6118b18383611d21565b5f5b8181101561079a57611c2c8460105f868686818110611bec57611bec612472565b9050602002016020810190611c019190612396565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040015f2090611bbe565b50600101611bcb565b5f7f378ece20ebca29c2f887798617154658265a73d80c84fad8c9c49639ffdb29bb9050602082038051602082528483604086510184a29052505050565b5f81815260018301602052604081205415156118b1565b5f6118b18383611d6d565b5f825f018281548110611caa57611caa612472565b905f5260205f200154905092915050565b80545f5b8181101561079a57611d18845f6010015f868581548110611ce257611ce2612472565b5f91825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902090611c8a565b50600101611cbf565b5f818152600183016020526040812054611d6657508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610f7a565b505f610f7a565b5f8181526001830160205260408120548015611e47575f611d8f600183612b49565b85549091505f90611da290600190612b49565b9050808214611e01575f865f018281548110611dc057611dc0612472565b905f5260205f200154905080875f018481548110611de057611de0612472565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080611e1257611e12612b5c565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610f7a565b5f915050610f7a565b60405180604001604052805f8152602001611ead6040518060a001604052805f81526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff168152602001606081525090565b905290565b828054828255905f5260205f20908101928215611f28579160200282015b82811115611f285781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190611ed0565b50611f34929150611f6b565b5090565b508054611f449061255f565b5f825580601f10611f53575050565b601f0160209004905f5260205f209081019061196a91905b5b80821115611f34575f8155600101611f6c565b5f5f60408385031215611f90575f5ffd5b50508035926020909101359150565b5f60208284031215611faf575f5ffd5b5035919050565b5f60a083018251845267ffffffffffffffff602084015116602085015267ffffffffffffffff604084015116604085015267ffffffffffffffff6060840151166060850152608083015160a0608086015281815180845260c0870191506020830193505f92505b808310156120565773ffffffffffffffffffffffffffffffffffffffff845116825260208201915060208401935060018301925061201d565b5095945050505050565b602081525f6118b16020830184611fb6565b73ffffffffffffffffffffffffffffffffffffffff8116811461196a575f5ffd5b5f5f5f606084860312156120a5575f5ffd5b83356120b081612072565b95602085013595506040909401359392505050565b5f82825180855260208501945060208160051b830101602085015f5b83811015612148577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301885281518051845260208101519050604060208501526121316040850182611fb6565b6020998a01999094509290920191506001016120e1565b50909695505050505050565b602081525f6118b160208301846120c5565b5f5f83601f840112612176575f5ffd5b50813567ffffffffffffffff81111561218d575f5ffd5b6020830191508360208260051b8501011115611111575f5ffd5b5f5f602083850312156121b8575f5ffd5b823567ffffffffffffffff8111156121ce575f5ffd5b6121da85828601612166565b90969095509350505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b606081525f6122446060830186611fb6565b846020840152828103604084015261225c81856121e6565b9695505050505050565b5f5f5f5f5f5f6080878903121561227b575f5ffd5b86359550602087013567ffffffffffffffff811115612298575f5ffd5b6122a489828a01612166565b90965094505060408701359250606087013567ffffffffffffffff8111156122ca575f5ffd5b8701601f810189136122da575f5ffd5b803567ffffffffffffffff8111156122f0575f5ffd5b896020828401011115612301575f5ffd5b60208201935080925050509295509295509295565b5f5f60408385031215612327575f5ffd5b82359150602083013561233981612072565b809150509250929050565b5f5f5f60608486031215612356575f5ffd5b8335925060208401359150604084013567ffffffffffffffff81111561237a575f5ffd5b840160a0818703121561238b575f5ffd5b809150509250925092565b5f602082840312156123a6575f5ffd5b81356118b181612072565b604081525f6123c360408301856120c5565b905082151560208301529392505050565b5f5f602083850312156123e5575f5ffd5b823567ffffffffffffffff8111156123fb575f5ffd5b8301601f8101851361240b575f5ffd5b803567ffffffffffffffff811115612421575f5ffd5b85602060a083028401011115612435575f5ffd5b6020919091019590945092505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126124d1575f5ffd5b9190910192915050565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261250e575f5ffd5b83018035915067ffffffffffffffff821115612528575f5ffd5b6020019150600581901b3603821315611111575f5ffd5b5f6020828403121561254f575f5ffd5b813560ff811681146118b1575f5ffd5b600181811c9082168061257357607f821691505b6020821081036125aa577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126124d1575f5ffd5b5b818110156125f6575f81556001016125e3565b5050565b601f8211156102c857805f5260205f20601f840160051c8101602085101561261f5750805b610a82601f850160051c8301826125e2565b67ffffffffffffffff83111561264957612649612445565b61265d83612657835461255f565b836125fa565b5f601f8411600181146126ad575f85156126775750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610a82565b5f838152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08716915b828110156126fa57868501358255602094850194600190920191016126da565b5086821015612735577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b5f60a0830182548452600183015467ffffffffffffffff8116602086015267ffffffffffffffff8160401c16604086015267ffffffffffffffff8160801c166060860152506002830160a0608086015281815480845260c087019150825f5260205f2093505f92505b808310156120565773ffffffffffffffffffffffffffffffffffffffff84541682526020820191506001840193506001830192506127b0565b828152604060208201525f6128016040830184612747565b949350505050565b67ffffffffffffffff8116811461196a575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b67ffffffffffffffff83111561286357612863612445565b6801000000000000000083111561287c5761287c612445565b8054838255808410156128a057815f5260205f2061289e8282018683016125e2565b505b5081815f5260205f205f5b858110156118955782356128be81612072565b82820155602092909201916001016128ab565b813581556001810160208301356128e781612809565b815460408501356128f781612809565b6fffffffffffffffff00000000000000008160401b1667ffffffffffffffff84167fffffffffffffffffffffffffffffffff000000000000000000000000000000008416171784555050505f606084013561295181612809565b82547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16608091821b77ffffffffffffffff000000000000000000000000000000001617909255505f908190840135368590037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe10181126129d0575f5ffd5b84018035915067ffffffffffffffff8211156129ea575f5ffd5b6020019150600581901b3603821315612a01575f5ffd5b61079a81836002860161284b565b8183526020830192505f815f5b84811015612a5a578135612a2f81612072565b73ffffffffffffffffffffffffffffffffffffffff1686526020958601959190910190600101612a1c565b5093949350505050565b828152604060208201525f5f83359050806040840152506020830135612a8981612809565b67ffffffffffffffff1660608301526040830135612aa681612809565b67ffffffffffffffff1660808301526060830135612ac381612809565b67ffffffffffffffff1660a08301526080830135368490037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112612b07575f5ffd5b830160208101903567ffffffffffffffff811115612b23575f5ffd5b8060051b3603821315612b34575f5ffd5b60a060c085015261225c60e085018284612a0f565b81810381811115610f7a57610f7a61281e565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f60208284031215612b99575f5ffd5b81356118b181612809565b84815283602082015267ffffffffffffffff83166040820152608060608201525f61225c60808301846121e6565b80358015158114612be1575f5ffd5b919050565b5f60208284031215612bf6575f5ffd5b6118b182612bd2565b5f60a0828403128015612c10575f5ffd5b5060405160a0810167ffffffffffffffff81118282101715612c3457612c34612445565b6040908152833582526020808501359083015283810135908201526060830135612c5d81612809565b6060820152612c6e60808401612bd2565b60808201529392505050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612caa57612caa61281e565b5060010190565b602080825282518282018190525f918401906040840190835b81811015612d2457835180518452602081015160208501526040810151604085015267ffffffffffffffff60608201511660608501526080810151151560808501525060a083019250602084019350600181019050612cca565b509095945050505050565b602081525f6118b1602083018461274756";

type StreamRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StreamRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StreamRegistry__factory extends ContractFactory {
  constructor(...args: StreamRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StreamRegistry> {
    return super.deploy(overrides || {}) as Promise<StreamRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StreamRegistry {
    return super.attach(address) as StreamRegistry;
  }
  override connect(signer: Signer): StreamRegistry__factory {
    return super.connect(signer) as StreamRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StreamRegistryInterface {
    return new utils.Interface(_abi) as StreamRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StreamRegistry {
    return new Contract(address, _abi, signerOrProvider) as StreamRegistry;
  }
}
