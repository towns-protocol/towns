/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IEntitlementsManagerBase {
  export type EntitlementStruct = {
    name: PromiseOrValue<string>;
    moduleAddress: PromiseOrValue<string>;
    moduleType: PromiseOrValue<string>;
    isImmutable: PromiseOrValue<boolean>;
  };

  export type EntitlementStructOutput = [string, string, string, boolean] & {
    name: string;
    moduleAddress: string;
    moduleType: string;
    isImmutable: boolean;
  };
}

export interface EntitlementsManagerInterface extends utils.Interface {
  functions: {
    "addEntitlementModule(address)": FunctionFragment;
    "addImmutableEntitlements(address[])": FunctionFragment;
    "getEntitlement(address)": FunctionFragment;
    "getEntitlements()": FunctionFragment;
    "isEntitledToChannel(bytes32,address,string)": FunctionFragment;
    "isEntitledToSpace(address,string)": FunctionFragment;
    "removeEntitlementModule(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addEntitlementModule"
      | "addImmutableEntitlements"
      | "getEntitlement"
      | "getEntitlements"
      | "isEntitledToChannel"
      | "isEntitledToSpace"
      | "removeEntitlementModule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEntitlementModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addImmutableEntitlements",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlement",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEntitledToChannel",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntitledToSpace",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEntitlementModule",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEntitlementModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addImmutableEntitlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEntitledToChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEntitledToSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEntitlementModule",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Banned(address,uint256)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "EntitlementModuleAdded(address,address)": EventFragment;
    "EntitlementModuleRemoved(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unbanned(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Banned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntitlementModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntitlementModuleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbanned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BannedEventObject {
  moderator: string;
  tokenId: BigNumber;
}
export type BannedEvent = TypedEvent<[string, BigNumber], BannedEventObject>;

export type BannedEventFilter = TypedEventFilter<BannedEvent>;

export interface ConsecutiveTransferEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  from: string;
  to: string;
}
export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ConsecutiveTransferEventObject
>;

export type ConsecutiveTransferEventFilter =
  TypedEventFilter<ConsecutiveTransferEvent>;

export interface EntitlementModuleAddedEventObject {
  caller: string;
  entitlement: string;
}
export type EntitlementModuleAddedEvent = TypedEvent<
  [string, string],
  EntitlementModuleAddedEventObject
>;

export type EntitlementModuleAddedEventFilter =
  TypedEventFilter<EntitlementModuleAddedEvent>;

export interface EntitlementModuleRemovedEventObject {
  caller: string;
  entitlement: string;
}
export type EntitlementModuleRemovedEvent = TypedEvent<
  [string, string],
  EntitlementModuleRemovedEventObject
>;

export type EntitlementModuleRemovedEventFilter =
  TypedEventFilter<EntitlementModuleRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnbannedEventObject {
  moderator: string;
  tokenId: BigNumber;
}
export type UnbannedEvent = TypedEvent<
  [string, BigNumber],
  UnbannedEventObject
>;

export type UnbannedEventFilter = TypedEventFilter<UnbannedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface EntitlementsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EntitlementsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addImmutableEntitlements(
      entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEntitlement(
      entitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IEntitlementsManagerBase.EntitlementStructOutput]>;

    getEntitlements(
      overrides?: CallOverrides
    ): Promise<[IEntitlementsManagerBase.EntitlementStructOutput[]]>;

    isEntitledToChannel(
      channelId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEntitledToSpace(
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addEntitlementModule(
    entitlement: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addImmutableEntitlements(
    entitlements: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEntitlement(
    entitlement: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IEntitlementsManagerBase.EntitlementStructOutput>;

  getEntitlements(
    overrides?: CallOverrides
  ): Promise<IEntitlementsManagerBase.EntitlementStructOutput[]>;

  isEntitledToChannel(
    channelId: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    permission: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEntitledToSpace(
    user: PromiseOrValue<string>,
    permission: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeEntitlementModule(
    entitlement: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addImmutableEntitlements(
      entitlements: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getEntitlement(
      entitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IEntitlementsManagerBase.EntitlementStructOutput>;

    getEntitlements(
      overrides?: CallOverrides
    ): Promise<IEntitlementsManagerBase.EntitlementStructOutput[]>;

    isEntitledToChannel(
      channelId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEntitledToSpace(
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Banned(address,uint256)"(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BannedEventFilter;
    Banned(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BannedEventFilter;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;
    ConsecutiveTransfer(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;

    "EntitlementModuleAdded(address,address)"(
      caller?: PromiseOrValue<string> | null,
      entitlement?: null
    ): EntitlementModuleAddedEventFilter;
    EntitlementModuleAdded(
      caller?: PromiseOrValue<string> | null,
      entitlement?: null
    ): EntitlementModuleAddedEventFilter;

    "EntitlementModuleRemoved(address,address)"(
      caller?: PromiseOrValue<string> | null,
      entitlement?: null
    ): EntitlementModuleRemovedEventFilter;
    EntitlementModuleRemoved(
      caller?: PromiseOrValue<string> | null,
      entitlement?: null
    ): EntitlementModuleRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "Unbanned(address,uint256)"(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnbannedEventFilter;
    Unbanned(
      moderator?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnbannedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addImmutableEntitlements(
      entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEntitlement(
      entitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntitlements(overrides?: CallOverrides): Promise<BigNumber>;

    isEntitledToChannel(
      channelId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEntitledToSpace(
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addImmutableEntitlements(
      entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEntitlement(
      entitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntitlements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEntitledToChannel(
      channelId: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEntitledToSpace(
      user: PromiseOrValue<string>,
      permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeEntitlementModule(
      entitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
