/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMainnetDelegationBase {
  export type DelegationStruct = {
    operator: PromiseOrValue<string>;
    quantity: PromiseOrValue<BigNumberish>;
    delegator: PromiseOrValue<string>;
    delegationTime: PromiseOrValue<BigNumberish>;
  };

  export type DelegationStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    operator: string;
    quantity: BigNumber;
    delegator: string;
    delegationTime: BigNumber;
  };
}

export interface MainnetDelegationInterface extends utils.Interface {
  functions: {
    "__MainnetDelegation_init(address)": FunctionFragment;
    "getAuthorizedClaimer(address)": FunctionFragment;
    "getDelegatedStakeByOperator(address)": FunctionFragment;
    "getDelegationByDelegator(address)": FunctionFragment;
    "getDelegatorsByAuthorizedClaimer(address)": FunctionFragment;
    "getDepositIdByDelegator(address)": FunctionFragment;
    "getMainnetDelegationsByOperator(address)": FunctionFragment;
    "getMainnetDelegators()": FunctionFragment;
    "getMessenger()": FunctionFragment;
    "getProxyDelegation()": FunctionFragment;
    "relayDelegations(bytes)": FunctionFragment;
    "setDelegationDigest(bytes32)": FunctionFragment;
    "setProxyDelegation(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__MainnetDelegation_init"
      | "getAuthorizedClaimer"
      | "getDelegatedStakeByOperator"
      | "getDelegationByDelegator"
      | "getDelegatorsByAuthorizedClaimer"
      | "getDepositIdByDelegator"
      | "getMainnetDelegationsByOperator"
      | "getMainnetDelegators"
      | "getMessenger"
      | "getProxyDelegation"
      | "relayDelegations"
      | "setDelegationDigest"
      | "setProxyDelegation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__MainnetDelegation_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedClaimer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedStakeByOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationByDelegator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorsByAuthorizedClaimer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositIdByDelegator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainnetDelegationsByOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainnetDelegators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayDelegations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegationDigest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyDelegation",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__MainnetDelegation_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedClaimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedStakeByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationByDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorsByAuthorizedClaimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositIdByDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainnetDelegationsByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainnetDelegators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegationDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyDelegation",
    data: BytesLike
  ): Result;

  events: {
    "ClaimerSet(address,address)": EventFragment;
    "CrossDomainMessengerSet(address)": EventFragment;
    "DelegationDigestSet(bytes32)": EventFragment;
    "DelegationRemoved(address)": EventFragment;
    "DelegationSet(address,address,uint256)": EventFragment;
    "Initialized(uint32)": EventFragment;
    "InterfaceAdded(bytes4)": EventFragment;
    "InterfaceRemoved(bytes4)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProxyDelegationSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossDomainMessengerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationDigestSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyDelegationSet"): EventFragment;
}

export interface ClaimerSetEventObject {
  delegator: string;
  claimer: string;
}
export type ClaimerSetEvent = TypedEvent<
  [string, string],
  ClaimerSetEventObject
>;

export type ClaimerSetEventFilter = TypedEventFilter<ClaimerSetEvent>;

export interface CrossDomainMessengerSetEventObject {
  messenger: string;
}
export type CrossDomainMessengerSetEvent = TypedEvent<
  [string],
  CrossDomainMessengerSetEventObject
>;

export type CrossDomainMessengerSetEventFilter =
  TypedEventFilter<CrossDomainMessengerSetEvent>;

export interface DelegationDigestSetEventObject {
  digest: string;
}
export type DelegationDigestSetEvent = TypedEvent<
  [string],
  DelegationDigestSetEventObject
>;

export type DelegationDigestSetEventFilter =
  TypedEventFilter<DelegationDigestSetEvent>;

export interface DelegationRemovedEventObject {
  delegator: string;
}
export type DelegationRemovedEvent = TypedEvent<
  [string],
  DelegationRemovedEventObject
>;

export type DelegationRemovedEventFilter =
  TypedEventFilter<DelegationRemovedEvent>;

export interface DelegationSetEventObject {
  delegator: string;
  operator: string;
  quantity: BigNumber;
}
export type DelegationSetEvent = TypedEvent<
  [string, string, BigNumber],
  DelegationSetEventObject
>;

export type DelegationSetEventFilter = TypedEventFilter<DelegationSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InterfaceAddedEventObject {
  interfaceId: string;
}
export type InterfaceAddedEvent = TypedEvent<
  [string],
  InterfaceAddedEventObject
>;

export type InterfaceAddedEventFilter = TypedEventFilter<InterfaceAddedEvent>;

export interface InterfaceRemovedEventObject {
  interfaceId: string;
}
export type InterfaceRemovedEvent = TypedEvent<
  [string],
  InterfaceRemovedEventObject
>;

export type InterfaceRemovedEventFilter =
  TypedEventFilter<InterfaceRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProxyDelegationSetEventObject {
  proxyDelegation: string;
}
export type ProxyDelegationSetEvent = TypedEvent<
  [string],
  ProxyDelegationSetEventObject
>;

export type ProxyDelegationSetEventFilter =
  TypedEventFilter<ProxyDelegationSetEvent>;

export interface MainnetDelegation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainnetDelegationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __MainnetDelegation_init(
      messenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuthorizedClaimer(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedStakeByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDelegationByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMainnetDelegationBase.DelegationStructOutput]>;

    getDelegatorsByAuthorizedClaimer(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getDepositIdByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMainnetDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMainnetDelegationBase.DelegationStructOutput[]]>;

    getMainnetDelegators(overrides?: CallOverrides): Promise<[string[]]>;

    getMessenger(overrides?: CallOverrides): Promise<[string]>;

    getProxyDelegation(overrides?: CallOverrides): Promise<[string]>;

    relayDelegations(
      encodedMsgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegationDigest(
      digest: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProxyDelegation(
      proxyDelegation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __MainnetDelegation_init(
    messenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuthorizedClaimer(
    delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedStakeByOperator(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDelegationByDelegator(
    delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMainnetDelegationBase.DelegationStructOutput>;

  getDelegatorsByAuthorizedClaimer(
    claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getDepositIdByDelegator(
    delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMainnetDelegationsByOperator(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMainnetDelegationBase.DelegationStructOutput[]>;

  getMainnetDelegators(overrides?: CallOverrides): Promise<string[]>;

  getMessenger(overrides?: CallOverrides): Promise<string>;

  getProxyDelegation(overrides?: CallOverrides): Promise<string>;

  relayDelegations(
    encodedMsgs: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegationDigest(
    digest: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProxyDelegation(
    proxyDelegation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __MainnetDelegation_init(
      messenger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuthorizedClaimer(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedStakeByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegationByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMainnetDelegationBase.DelegationStructOutput>;

    getDelegatorsByAuthorizedClaimer(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getDepositIdByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainnetDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMainnetDelegationBase.DelegationStructOutput[]>;

    getMainnetDelegators(overrides?: CallOverrides): Promise<string[]>;

    getMessenger(overrides?: CallOverrides): Promise<string>;

    getProxyDelegation(overrides?: CallOverrides): Promise<string>;

    relayDelegations(
      encodedMsgs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegationDigest(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxyDelegation(
      proxyDelegation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimerSet(address,address)"(
      delegator?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): ClaimerSetEventFilter;
    ClaimerSet(
      delegator?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): ClaimerSetEventFilter;

    "CrossDomainMessengerSet(address)"(
      messenger?: null
    ): CrossDomainMessengerSetEventFilter;
    CrossDomainMessengerSet(
      messenger?: null
    ): CrossDomainMessengerSetEventFilter;

    "DelegationDigestSet(bytes32)"(
      digest?: null
    ): DelegationDigestSetEventFilter;
    DelegationDigestSet(digest?: null): DelegationDigestSetEventFilter;

    "DelegationRemoved(address)"(
      delegator?: PromiseOrValue<string> | null
    ): DelegationRemovedEventFilter;
    DelegationRemoved(
      delegator?: PromiseOrValue<string> | null
    ): DelegationRemovedEventFilter;

    "DelegationSet(address,address,uint256)"(
      delegator?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      quantity?: null
    ): DelegationSetEventFilter;
    DelegationSet(
      delegator?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      quantity?: null
    ): DelegationSetEventFilter;

    "Initialized(uint32)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InterfaceAdded(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;
    InterfaceAdded(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceAddedEventFilter;

    "InterfaceRemoved(bytes4)"(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;
    InterfaceRemoved(
      interfaceId?: PromiseOrValue<BytesLike> | null
    ): InterfaceRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProxyDelegationSet(address)"(
      proxyDelegation?: null
    ): ProxyDelegationSetEventFilter;
    ProxyDelegationSet(proxyDelegation?: null): ProxyDelegationSetEventFilter;
  };

  estimateGas: {
    __MainnetDelegation_init(
      messenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuthorizedClaimer(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedStakeByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegationByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorsByAuthorizedClaimer(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositIdByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainnetDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainnetDelegators(overrides?: CallOverrides): Promise<BigNumber>;

    getMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyDelegation(overrides?: CallOverrides): Promise<BigNumber>;

    relayDelegations(
      encodedMsgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegationDigest(
      digest: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProxyDelegation(
      proxyDelegation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __MainnetDelegation_init(
      messenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuthorizedClaimer(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedStakeByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegationByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorsByAuthorizedClaimer(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositIdByDelegator(
      delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainnetDelegationsByOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainnetDelegators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyDelegation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayDelegations(
      encodedMsgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegationDigest(
      digest: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProxyDelegation(
      proxyDelegation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
