/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IWalletLinkBase {
  export type WalletDataStruct = {
    addr: PromiseOrValue<string>;
    vmType: PromiseOrValue<BigNumberish>;
    walletType: PromiseOrValue<BigNumberish>;
  };

  export type WalletDataStructOutput = [string, number, number] & {
    addr: string;
    vmType: number;
    walletType: number;
  };
}

export interface IWalletLinkQueryableInterface extends utils.Interface {
  functions: {
    "explicitWalletsByRootKey(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "explicitWalletsByRootKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "explicitWalletsByRootKey",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "explicitWalletsByRootKey",
    data: BytesLike
  ): Result;

  events: {
    "LinkNonEVMWalletToRootWallet(bytes32,address)": EventFragment;
    "LinkWalletToRootKey(address,address)": EventFragment;
    "RemoveLink(address,address)": EventFragment;
    "RemoveNonEVMWalletLink(bytes32,address)": EventFragment;
    "SetDefaultWallet(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "LinkNonEVMWalletToRootWallet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkWalletToRootKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveNonEVMWalletLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultWallet"): EventFragment;
}

export interface LinkNonEVMWalletToRootWalletEventObject {
  walletHash: string;
  rootKey: string;
}
export type LinkNonEVMWalletToRootWalletEvent = TypedEvent<
  [string, string],
  LinkNonEVMWalletToRootWalletEventObject
>;

export type LinkNonEVMWalletToRootWalletEventFilter =
  TypedEventFilter<LinkNonEVMWalletToRootWalletEvent>;

export interface LinkWalletToRootKeyEventObject {
  wallet: string;
  rootKey: string;
}
export type LinkWalletToRootKeyEvent = TypedEvent<
  [string, string],
  LinkWalletToRootKeyEventObject
>;

export type LinkWalletToRootKeyEventFilter =
  TypedEventFilter<LinkWalletToRootKeyEvent>;

export interface RemoveLinkEventObject {
  wallet: string;
  secondWallet: string;
}
export type RemoveLinkEvent = TypedEvent<
  [string, string],
  RemoveLinkEventObject
>;

export type RemoveLinkEventFilter = TypedEventFilter<RemoveLinkEvent>;

export interface RemoveNonEVMWalletLinkEventObject {
  walletHash: string;
  rootKey: string;
}
export type RemoveNonEVMWalletLinkEvent = TypedEvent<
  [string, string],
  RemoveNonEVMWalletLinkEventObject
>;

export type RemoveNonEVMWalletLinkEventFilter =
  TypedEventFilter<RemoveNonEVMWalletLinkEvent>;

export interface SetDefaultWalletEventObject {
  rootKey: string;
  defaultWallet: string;
}
export type SetDefaultWalletEvent = TypedEvent<
  [string, string],
  SetDefaultWalletEventObject
>;

export type SetDefaultWalletEventFilter =
  TypedEventFilter<SetDefaultWalletEvent>;

export interface IWalletLinkQueryable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWalletLinkQueryableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    explicitWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IWalletLinkBase.WalletDataStructOutput[]] & {
        wallets: IWalletLinkBase.WalletDataStructOutput[];
      }
    >;
  };

  explicitWalletsByRootKey(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IWalletLinkBase.WalletDataStructOutput[]>;

  callStatic: {
    explicitWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IWalletLinkBase.WalletDataStructOutput[]>;
  };

  filters: {
    "LinkNonEVMWalletToRootWallet(bytes32,address)"(
      walletHash?: PromiseOrValue<BytesLike> | null,
      rootKey?: PromiseOrValue<string> | null
    ): LinkNonEVMWalletToRootWalletEventFilter;
    LinkNonEVMWalletToRootWallet(
      walletHash?: PromiseOrValue<BytesLike> | null,
      rootKey?: PromiseOrValue<string> | null
    ): LinkNonEVMWalletToRootWalletEventFilter;

    "LinkWalletToRootKey(address,address)"(
      wallet?: PromiseOrValue<string> | null,
      rootKey?: PromiseOrValue<string> | null
    ): LinkWalletToRootKeyEventFilter;
    LinkWalletToRootKey(
      wallet?: PromiseOrValue<string> | null,
      rootKey?: PromiseOrValue<string> | null
    ): LinkWalletToRootKeyEventFilter;

    "RemoveLink(address,address)"(
      wallet?: PromiseOrValue<string> | null,
      secondWallet?: PromiseOrValue<string> | null
    ): RemoveLinkEventFilter;
    RemoveLink(
      wallet?: PromiseOrValue<string> | null,
      secondWallet?: PromiseOrValue<string> | null
    ): RemoveLinkEventFilter;

    "RemoveNonEVMWalletLink(bytes32,address)"(
      walletHash?: PromiseOrValue<BytesLike> | null,
      rootKey?: PromiseOrValue<string> | null
    ): RemoveNonEVMWalletLinkEventFilter;
    RemoveNonEVMWalletLink(
      walletHash?: PromiseOrValue<BytesLike> | null,
      rootKey?: PromiseOrValue<string> | null
    ): RemoveNonEVMWalletLinkEventFilter;

    "SetDefaultWallet(address,address)"(
      rootKey?: PromiseOrValue<string> | null,
      defaultWallet?: PromiseOrValue<string> | null
    ): SetDefaultWalletEventFilter;
    SetDefaultWallet(
      rootKey?: PromiseOrValue<string> | null,
      defaultWallet?: PromiseOrValue<string> | null
    ): SetDefaultWalletEventFilter;
  };

  estimateGas: {
    explicitWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    explicitWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
