{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "InvalidParameters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NameLengthInvalid",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "PermissionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SpaceAlreadyRegistered",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "previousAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "beacon",
            "type": "address"
          }
        ],
        "name": "BeaconUpgraded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint8",
            "name": "version",
            "type": "uint8"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Paused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "spaceAddress",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "ownerAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "networkId",
            "type": "string"
          }
        ],
        "name": "SpaceCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Unpaused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "implementation",
            "type": "address"
          }
        ],
        "name": "Upgraded",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "GATE_TOKEN_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "SPACE_IMPLEMENTATION_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "SPACE_TOKEN_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "SPACE_UPGRADES_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "TOKEN_IMPLEMENTATION_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "USER_IMPLEMENTATION_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string[]",
            "name": "_permissions",
            "type": "string[]"
          }
        ],
        "name": "addOwnerPermissions",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "spaceName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceId",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "spaceMetadata",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelName",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelId",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceData",
            "name": "_spaceData",
            "type": "tuple"
          },
          {
            "internalType": "string[]",
            "name": "_everyonePermissions",
            "type": "string[]"
          },
          {
            "components": [
              {
                "internalType": "string",
                "name": "roleName",
                "type": "string"
              },
              {
                "internalType": "string[]",
                "name": "permissions",
                "type": "string[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "contractAddress",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "quantity",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bool",
                    "name": "isSingleToken",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "tokenIds",
                    "type": "uint256[]"
                  }
                ],
                "internalType": "struct DataTypes.ExternalToken[]",
                "name": "tokens",
                "type": "tuple[]"
              },
              {
                "internalType": "address[]",
                "name": "users",
                "type": "address[]"
              }
            ],
            "internalType": "struct DataTypes.CreateSpaceExtraEntitlements",
            "name": "_extraEntitlements",
            "type": "tuple"
          }
        ],
        "name": "createSpace",
        "outputs": [
          {
            "internalType": "address",
            "name": "_spaceAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "gatingEnabled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getOwnerPermissions",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getSpaceAddressByNetworkId",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "spaceId",
            "type": "string"
          }
        ],
        "name": "getTokenIdByNetworkId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_space",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_tokenEntitlement",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_userEntitlement",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_spaceToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_gateToken",
            "type": "address"
          },
          {
            "internalType": "string[]",
            "name": "_permissions",
            "type": "string[]"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "name": "onERC721Received",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "ownerPermissions",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "paused",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "proxiableUUID",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_gatingEnabled",
            "type": "bool"
          }
        ],
        "name": "setGatingEnabled",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_paused",
            "type": "bool"
          }
        ],
        "name": "setPaused",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_spaceToken",
            "type": "address"
          }
        ],
        "name": "setSpaceToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "spaceByHash",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "tokenByHash",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_space",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_tokenEntitlement",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_userEntitlement",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_gateToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_spaceUpgrades",
            "type": "address"
          }
        ],
        "name": "updateImplementations",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          }
        ],
        "name": "upgradeTo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "upgradeToAndCall",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "devdoc": {
      "events": {
        "AdminChanged(address,address)": {
          "details": "Emitted when the admin account has changed."
        },
        "BeaconUpgraded(address)": {
          "details": "Emitted when the beacon is upgraded."
        },
        "Initialized(uint8)": {
          "details": "Triggered when the contract has been initialized or reinitialized."
        },
        "Paused(address)": {
          "details": "Emitted when the pause is triggered by `account`."
        },
        "Unpaused(address)": {
          "details": "Emitted when the pause is lifted by `account`."
        },
        "Upgraded(address)": {
          "details": "Emitted when the implementation is upgraded."
        }
      },
      "kind": "dev",
      "methods": {
        "addOwnerPermissions(string[])": {
          "params": {
            "_permissions": "The permissions to add"
          }
        },
        "constructor": {
          "custom:oz-upgrades-unsafe-allow": "constructor"
        },
        "createSpace((string,string,string,string,string),string[],(string,string[],(address,uint256,bool,uint256[])[],address[]))": {
          "details": "The space network id must be unique",
          "params": {
            "_createSpaceData": "The data required to create a space",
            "_everyonePermissions": "The permissions of the everyone role",
            "_extraEntitlements": "The extra entitlements of the space"
          },
          "returns": {
            "_spaceAddress": "The address of the new space"
          }
        },
        "onERC721Received(address,address,uint256,bytes)": {
          "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "paused()": {
          "details": "Returns true if the contract is paused, and false otherwise."
        },
        "proxiableUUID()": {
          "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "upgradeTo(address)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        },
        "upgradeToAndCall(address,bytes)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        }
      },
      "stateVariables": {
        "__gap": {
          "details": "Added to allow future versions to add new variables in case this contract becomes      inherited. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addOwnerPermissions(string[])": {
          "notice": "Adds permissions to the owner role at space creation"
        },
        "createSpace((string,string,string,string,string),string[],(string,string[],(address,uint256,bool,uint256[])[],address[]))": {
          "notice": "Creates a new space"
        },
        "getOwnerPermissions()": {
          "notice": "Returns the initial owner permissions at space creation"
        },
        "getSpaceAddressByNetworkId(string)": {
          "notice": "Returns space address by network id"
        },
        "getTokenIdByNetworkId(string)": {
          "notice": "Returns token id by network id"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "packages/contracts/src/spaces/SpaceFactory.sol": "SpaceFactory"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/test/=lib/prb-test/src/",
      ":@river/=node_modules/@river/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":contracts/=packages/contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "lib/ERC721A/contracts/ERC721A.sol": {
      "keccak256": "0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c",
      "license": "MIT",
      "urls": [
        "bzz-raw://b7874e48418b55b9d718680915454f2b0054d19d2a387e123b0c139294d0e809",
        "dweb:/ipfs/QmdryJHATT4R454JY8FXCE5qTxanYWfjGKGMv5U6YJntWy"
      ]
    },
    "lib/ERC721A/contracts/IERC721A.sol": {
      "keccak256": "0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad",
      "license": "MIT",
      "urls": [
        "bzz-raw://284680b4fdbf52b2aa888f7988447568ee82c5d1585c1535d985ff25153bc3b9",
        "dweb:/ipfs/QmTWfDch6XJMwVLA4CY2pMedzrLWoN8ZdgYZ1UbRzesysz"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "keccak256": "0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a",
        "dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
      "keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
      "license": "MIT",
      "urls": [
        "bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
        "dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
      "license": "MIT",
      "urls": [
        "bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
        "dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
      "keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
      "license": "MIT",
      "urls": [
        "bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
        "dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "keccak256": "0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271",
      "license": "MIT",
      "urls": [
        "bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618",
        "dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "keccak256": "0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778",
      "license": "MIT",
      "urls": [
        "bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1",
        "dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol": {
      "keccak256": "0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250",
      "license": "MIT",
      "urls": [
        "bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad",
        "dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol": {
      "keccak256": "0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790",
      "license": "MIT",
      "urls": [
        "bzz-raw://622c3eb87563e71585c9f538d1a196fe2d154dcc5b8f335e8770a8acc95e1f3a",
        "dweb:/ipfs/QmSnDqJJLzv3mirjGB1vrk5X7hegFdS7BKpscpxyqj7sWu"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "keccak256": "0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5",
      "license": "MIT",
      "urls": [
        "bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a",
        "dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/utils/ERC721HolderUpgradeable.sol": {
      "keccak256": "0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90",
      "license": "MIT",
      "urls": [
        "bzz-raw://e980a0ad8d2f81f38d378994a80d46dbb0c46efed9799d6272f69b177e1f0f3c",
        "dweb:/ipfs/QmdgyvytrBV9RC6v8ojAnU9nFE1zPicdbGqHGskbopyHyn"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
      "license": "MIT",
      "urls": [
        "bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
        "dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
      "license": "MIT",
      "urls": [
        "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
        "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
      "keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
      "license": "MIT",
      "urls": [
        "bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
        "dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
      "keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
      "license": "MIT",
      "urls": [
        "bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
        "dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
      "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
      "license": "MIT",
      "urls": [
        "bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
        "dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
      "keccak256": "0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b",
      "license": "MIT",
      "urls": [
        "bzz-raw://f5522afc5c222c810d9ad67c45f37cb7169452fcf76692cad10ac8153c068daa",
        "dweb:/ipfs/QmX4XgnDp7pyvojQ6g5tacrUMCf7TED2qC2vERH9Xh9feZ"
      ]
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
      "keccak256": "0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff",
      "license": "MIT",
      "urls": [
        "bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688",
        "dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr"
      ]
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "keccak256": "0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d",
      "license": "MIT",
      "urls": [
        "bzz-raw://96b6d77a20bebd4eb06b801d3d020c7e82be13bd535cb0d0a6b7181c51dab5d5",
        "dweb:/ipfs/QmPUR9Cv9jNFdQX6PtBfaBW1ZCnKwiu65R2VD5kbdanDyn"
      ]
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "keccak256": "0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a",
      "license": "MIT",
      "urls": [
        "bzz-raw://89c2a0f70157c13845be5cb49b078a6374fee3a78fa950052a3af26190255da8",
        "dweb:/ipfs/QmUcvMEQH1oMM2pUyMuDiBUKdvvnTz1NRB8bmPHrVq8725"
      ]
    },
    "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
      "keccak256": "0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27",
      "license": "MIT",
      "urls": [
        "bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472",
        "dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN"
      ]
    },
    "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
      "keccak256": "0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61",
      "license": "MIT",
      "urls": [
        "bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354",
        "dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
      "keccak256": "0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941",
      "license": "MIT",
      "urls": [
        "bzz-raw://bd9c47a375639888e726a99da718890ba16d17d7ad9eacb0ccc892d46d1b3ee0",
        "dweb:/ipfs/Qmb41W5RUjy2sWg49A2rMnxekSeEk6SvGyJL5tyCCSr7un"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
      "license": "MIT",
      "urls": [
        "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
        "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
      "license": "MIT",
      "urls": [
        "bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
        "dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
      "license": "MIT",
      "urls": [
        "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
        "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "keccak256": "0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d",
      "license": "MIT",
      "urls": [
        "bzz-raw://39e096c60a6eb1c6a257122d515496bd92d0c6a693a8f07acb6aa4b1263e95d4",
        "dweb:/ipfs/QmPs5trJBacCiSkezP6tpevapuRYWNY6mqSFzsMCJj7e6B"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "keccak256": "0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a",
      "license": "MIT",
      "urls": [
        "bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634",
        "dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
      "license": "MIT",
      "urls": [
        "bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
        "dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
      ]
    },
    "lib/operator-filter-registry/src/DefaultOperatorFilterer.sol": {
      "keccak256": "0xf65af8e5c2d6a8719cdbc5aa0e6923e1701bdc59f77ff0101b38d9d03d76d65b",
      "license": "MIT",
      "urls": [
        "bzz-raw://8d3ea78dfa813244258d9192a05a3ae13f46880647da5a4c026c8231f38e2507",
        "dweb:/ipfs/QmeE4ycD8bw1uj7o33L48kiXT7YZ7RkegaNWb24nQ7MLgc"
      ]
    },
    "lib/operator-filter-registry/src/IOperatorFilterRegistry.sol": {
      "keccak256": "0x56ad8df389958dbf89cc30196e5f37779ee87d2e8b551d84a8d0a696e1c69937",
      "license": "MIT",
      "urls": [
        "bzz-raw://7ca12c8b2d8a6c0ef1ba2204be8628c1443d9371c37aa619a3cc485267b6a30c",
        "dweb:/ipfs/QmaKXZeCR6kPRXCYo6NZJFnbBEa4eWwBKRYAKyY87vBrtc"
      ]
    },
    "lib/operator-filter-registry/src/OperatorFilterer.sol": {
      "keccak256": "0xa09fc95700d92846d0809a2dc39ca36eb4fcf48642fc83c3d1b5ebe62f957256",
      "license": "MIT",
      "urls": [
        "bzz-raw://adf63229f1f5484c27ca8d86cf73af5244bf163c8e77cc193701f359c9bdb175",
        "dweb:/ipfs/QmVZPr3BM9CjwLyxHjdjbqBUUSS2Vzr1WRktadgV9UDqvq"
      ]
    },
    "lib/operator-filter-registry/src/lib/Constants.sol": {
      "keccak256": "0xd7972e1e9ed993e5084ba985a22ea7bd46d48eb247a39b4357ab59d1dc368584",
      "license": "MIT",
      "urls": [
        "bzz-raw://56b9b55dd1725b6b7debf91f8b83bf1441deb10269368e4898cb58109143e582",
        "dweb:/ipfs/QmT5s7qASkza5kXp4nsYixohghGy1RN3iGhFmAFGmQ4dad"
      ]
    },
    "packages/contracts/src/spaces/Space.sol": {
      "keccak256": "0x0a8e74a4b8b8ce9f283579884f1d2ba0750d22df9d95907922c571df6791f6b1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c334946102db130623f3c26b085e62b59c604ec6130adeb6778c7634298c3869",
        "dweb:/ipfs/QmZbzxDhb2ncrXdNpfcoc2RQVnEDc2oCVPDt7akVMv69jd"
      ]
    },
    "packages/contracts/src/spaces/SpaceFactory.sol": {
      "keccak256": "0xe6d5357086c75079a928b46169a0d6b6d44e689a08c4a338210effcbc70b9645",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1acfcfc74339474d62e2d9f458af226b5c5259a6d8ded29cff347d39e44046f5",
        "dweb:/ipfs/QmWGjtQ6RvrWTLYfuGVHvQg227QNqMYvhjsi6tTWTQ7oah"
      ]
    },
    "packages/contracts/src/spaces/entitlements/TokenEntitlement.sol": {
      "keccak256": "0x3a87578901e1669867fafb128f1cffb57eb3f11e9a7413bded550f9cbc383e36",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c7ffbdb20a2883cd84d6b96721acecf6ccd0caa8d3b5a62c95aa1e6549ec4009",
        "dweb:/ipfs/QmdtwuKPTgaC47c5fo5RKYrNCURtWWVxkc7tgW1rF9sKZZ"
      ]
    },
    "packages/contracts/src/spaces/entitlements/UserEntitlement.sol": {
      "keccak256": "0x4c2bb5013be004e8d17a7dbdec7f9d015c0c2d2bd7cbd14ad03321b0b4c69342",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://bcd0c68f0eb30506a58ad8e80cb7e170afba33e4b2f59b39f86526fb0d7aa9c5",
        "dweb:/ipfs/QmeNHweEXazhT3UFa71k7ybpjGMG6gM9e1vGcrA8cPZ6Sv"
      ]
    },
    "packages/contracts/src/spaces/interfaces/IEntitlement.sol": {
      "keccak256": "0xd117eda6a43363b673a45755af9d7670fca134aa6fc4cb8f4c12e03d55e4fbf3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a58ad45677f42ce7ab8ebf687f59ad7dce4c0986a9904d23b6b639955aaaa900",
        "dweb:/ipfs/QmZNosFfF6x2AM2hWwgoWL1NfM1mJTajkT6gc9wb76U4Dz"
      ]
    },
    "packages/contracts/src/spaces/interfaces/ISpace.sol": {
      "keccak256": "0xe2bc4de0bc95702a13d258b28db02b33f5c42021be14356956fcf7e6e360801b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://5850f8f96a04bf479a6c56c514375b9cac166ce9aa2b200d8db95921c38478d4",
        "dweb:/ipfs/QmR6jf1P26ZtZJHDae3kzZnFukFnx9W2wTT84LkRSoT9FN"
      ]
    },
    "packages/contracts/src/spaces/interfaces/ISpaceFactory.sol": {
      "keccak256": "0xe854955df1d29c8dae2d5c18551f53b0ee1ddaa96b2446b066bbae8b26e6ed9e",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6a3fe6f3e5dd028c03d8a364e07302e53d5abb2c9dbbda11d2b74ab477aa1924",
        "dweb:/ipfs/QmRtbzYJLTAg31pMFV1KpE1hTmSkDfef19DsAooNSKizoB"
      ]
    },
    "packages/contracts/src/spaces/interfaces/ISpaceUpgrades.sol": {
      "keccak256": "0x633c3337142315adab25a7b24a547a43c0378fb8a5bf7a924a86ce7cc728ea72",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f7a024f69efc4ec5dbd36336a47459cb2fd89dcab88d2bead546a95804aacbf7",
        "dweb:/ipfs/QmeRBSEFWbMZTe6XjeGwbu2xvpQmW5qn3ibgb9JDoWYk3S"
      ]
    },
    "packages/contracts/src/spaces/libraries/DataTypes.sol": {
      "keccak256": "0x9a6a567062168b76d863eb72f73019323b8298493fd17df28553801dbbbc3ff3",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://ccf7817629f02e35dc00593d05ce6318755d962c0790b20cb6da53c248fec93f",
        "dweb:/ipfs/QmddwD9Q4FKNPeKG9jXsFAgLjJUWuiZmBQDobT3vSK7wyy"
      ]
    },
    "packages/contracts/src/spaces/libraries/Errors.sol": {
      "keccak256": "0xb0a9a538c142afb52002a9ed67fe15f71263406b905ab854f58d0c4bbb168f79",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f9a27883f35eee16c86c768b5084a1552058f996f72457e7ef624a20e731f4f7",
        "dweb:/ipfs/QmWNJYmVeNmsbq8Q6DAfa5ciBzXg61ARKteprhxFsAF289"
      ]
    },
    "packages/contracts/src/spaces/libraries/Events.sol": {
      "keccak256": "0x99aaeab8cc78d73bf26c609378a89e6b826105d8bf528c6d2a0e0c2344788f33",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://7f8fce84a1480276eabd24fd18dc606d219852a56f577130d24b93a596d081c9",
        "dweb:/ipfs/QmVtoA5cYwvbU1eLqAbBwbH7mwmzieEpSp1k6bk1eSnqB5"
      ]
    },
    "packages/contracts/src/spaces/libraries/Permissions.sol": {
      "keccak256": "0xa5c44d5d9ffdd2edacd86eff2a9a1f75f54d7fd907135871331b1bfeb13dae00",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://7d55d07d1f4dd34458e949b3378c57c84cacb258047c2569fabeec6ae9e1258f",
        "dweb:/ipfs/QmRFUtyD1LWdtxvobZ1f6kF7DcaJVpPvafbzUVzv4grjtE"
      ]
    },
    "packages/contracts/src/spaces/libraries/Utils.sol": {
      "keccak256": "0x743458b93e2d6e0f6d2e312b1ed7bad86040e2562e6bcaf0cce376175b86b1f4",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://52b505a5d3665d2b5894647f63f701ae3ebf5cec3c7f29248e004e151ad0d7ab",
        "dweb:/ipfs/QmfVYPDdJ8GCZWS4XaRERMpdavVu5BEK3NooxLbQPCzidz"
      ]
    },
    "packages/contracts/src/tokens/TownOwner.sol": {
      "keccak256": "0xdad2bcdbb56c4064abf1f8d25b0d0e018cd83e0058b6358dabcb198dce79c55d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b420524490d15ff0e1fc2bceb045477992a46151bed7486708531b67f8f7057d",
        "dweb:/ipfs/QmbwM2GhgpKrMJv31wgSZ74PP3UunfQZgNfeZnDNmXRjEw"
      ]
    },
    "packages/contracts/src/tokens/base/ERC721Base.sol": {
      "keccak256": "0x1e33f8dd66864cbda9ee79a7798abdf6f9738a8e66b6ad9aab991295b8b0fe11",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://54fd5e7b5e212311a472b509d54999de1ea6bdf440a2fb9528f1143fcd0482df",
        "dweb:/ipfs/QmRKk54q1phkdkBYhwKPiLQGP4h8RHQghUtWERGsQBjSox"
      ]
    },
    "packages/contracts/src/utils/BatchMintMetadata.sol": {
      "keccak256": "0xd43d15a899357fcba0b3c657f5f3ecea5e844b131d56d70fa4b935735cca2f68",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://430f5a6d17f6fe84eea8d86e529fd0e5382fe64467629c67703bdd001a56faa7",
        "dweb:/ipfs/QmeCDnsh5qRG2ANshutfCMgaJCugeHhhTRGP6shFtWudHz"
      ]
    },
    "packages/contracts/src/utils/Metadata.sol": {
      "keccak256": "0x4faf39f498e7ca9b62508754c32397ba1a7926bf78f9f87fb79d9b58e463ba22",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0ce09573070d611fd78f5613ca3b258cf6905a745b053e47f4e7549b24b2f74f",
        "dweb:/ipfs/QmcsxQjy8r38Qbg3Wyapy5tsdC8r9r72WNCfuveezaUASS"
      ]
    },
    "packages/contracts/src/utils/MultiCaller.sol": {
      "keccak256": "0xcf45575c09499d9da9e443c37b8f210803bc4c04717f766aab39a3782111caf9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://347f380b9b5e64b45b99310e35cfa0b80814d41218ab0abc867e81c754d8d088",
        "dweb:/ipfs/QmeSmHWFJtofeMHow6W831HZPqhW4HALxjgQnMWKdHtBeM"
      ]
    },
    "packages/contracts/src/utils/Royalty.sol": {
      "keccak256": "0x924656c0e41fceeceebd24975b1126a598898cd8848f64d7b58874d449aa8df7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0b4a143062aa29dd9bddc9383142a8ccbcefcfbd3f0e6673da9bb3d2b50012fa",
        "dweb:/ipfs/QmbocnB136PRjh18wyCfctJbPMEdXM4d1KyFJDqqZVAcbb"
      ]
    },
    "packages/contracts/src/utils/interfaces/IMetadata.sol": {
      "keccak256": "0x5a98b8364c872bdc15721eb5fbd699cd5043d5afa11795409fa92dc16d3a8ea1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8991259d62d9992ef697b6c81a4ead754e13c8fa7e2f6a16f05f50a4123dd5bb",
        "dweb:/ipfs/QmS5smwNxGKTQKmuj5nT9JUMutnTWvFLjjdjxm8KMb9DLg"
      ]
    },
    "packages/contracts/src/utils/interfaces/IRoyalty.sol": {
      "keccak256": "0xf671a4e403739096c7f7972bddc597dc938db05fd46baf931794164cbbd3108c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1ff2f7eebc9f4f8679fde04300ecddc4a2dbe788ffa61343d92eb2d4f5269e88",
        "dweb:/ipfs/Qmdh5uJiGdbXBxbbMyL7qNJa3ZDPzMiY5ZiFoTRuKSbHwu"
      ]
    }
  },
  "version": 1
}