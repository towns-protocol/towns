{
  "compiler": {
    "version": "0.8.19+commit.7dd6d404"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "AddRoleFailed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ChannelAlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ChannelDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementAlreadyWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementModuleNotSupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementNotWhitelisted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidParameters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MissingOwnerPermission",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NameLengthInvalid",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "PermissionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "RoleDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "RoleIsAssignedToEntitlement",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "previousAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "beacon",
            "type": "address"
          }
        ],
        "name": "BeaconUpgraded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "prevURI",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "newURI",
            "type": "string"
          }
        ],
        "name": "ContractURIUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint8",
            "name": "version",
            "type": "uint8"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "implementation",
            "type": "address"
          }
        ],
        "name": "Upgraded",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "MODULE_TYPE",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MODULE_VERSION",
        "outputs": [
          {
            "internalType": "uint48",
            "name": "",
            "type": "uint48"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "internalType": "string[]",
            "name": "_permissions",
            "type": "string[]"
          }
        ],
        "name": "addPermissionsToRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_entitlement",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "addRoleToChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct DataTypes.Entitlement",
            "name": "_entitlement",
            "type": "tuple"
          }
        ],
        "name": "addRoleToEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "channels",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "channelsByHash",
        "outputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "channelHash",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "createdAt",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "disabled",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "contractURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelName",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "uint256[]",
            "name": "roleIds",
            "type": "uint256[]"
          }
        ],
        "name": "createChannel",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_roleName",
            "type": "string"
          },
          {
            "internalType": "string[]",
            "name": "_permissions",
            "type": "string[]"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct DataTypes.Entitlement[]",
            "name": "_entitlements",
            "type": "tuple[]"
          }
        ],
        "name": "createRole",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "defaultEntitlements",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "disabled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "entitlements",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_channelHash",
            "type": "bytes32"
          }
        ],
        "name": "getChannelByHash",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "channelId",
                "type": "string"
              },
              {
                "internalType": "bytes32",
                "name": "channelHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.Channel",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getChannels",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_moduleType",
            "type": "string"
          }
        ],
        "name": "getEntitlementByModuleType",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "getEntitlementIdsByRoleId",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getEntitlementModules",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "moduleAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "moduleType",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "enabled",
                "type": "bool"
              }
            ],
            "internalType": "struct DataTypes.EntitlementModule[]",
            "name": "_entitlementModules",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "getPermissionsByRoleId",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "getRoleById",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Role",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getRoles",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "roleId",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              }
            ],
            "internalType": "struct DataTypes.Role[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "hasEntitlement",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_networkId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "_entitlements",
            "type": "address[]"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToChannel",
        "outputs": [
          {
            "internalType": "bool",
            "name": "_entitled",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToSpace",
        "outputs": [
          {
            "internalType": "bool",
            "name": "_entitled",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes[]",
            "name": "data",
            "type": "bytes[]"
          }
        ],
        "name": "multicall",
        "outputs": [
          {
            "internalType": "bytes[]",
            "name": "results",
            "type": "bytes[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "networkId",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ownerRoleId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "proxiableUUID",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "internalType": "string[]",
            "name": "_permissions",
            "type": "string[]"
          }
        ],
        "name": "removePermissionsFromRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_entitlement",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRoleFromChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct DataTypes.Entitlement",
            "name": "_entitlement",
            "type": "tuple"
          }
        ],
        "name": "removeRoleFromEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "roleCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "rolesById",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "disableChannel",
            "type": "bool"
          }
        ],
        "name": "setChannelAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          }
        ],
        "name": "setContractURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_entitlementModule",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "_whitelist",
            "type": "bool"
          }
        ],
        "name": "setEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          }
        ],
        "name": "setOwnerRoleId",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_disabled",
            "type": "bool"
          }
        ],
        "name": "setSpaceAccess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "token",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "tokenId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "channelName",
            "type": "string"
          }
        ],
        "name": "updateChannel",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_roleId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_roleName",
            "type": "string"
          }
        ],
        "name": "updateRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_entitlement",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_newEntitlement",
            "type": "address"
          }
        ],
        "name": "upgradeEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          }
        ],
        "name": "upgradeTo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "upgradeToAndCall",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "devdoc": {
      "events": {
        "AdminChanged(address,address)": {
          "details": "Emitted when the admin account has changed."
        },
        "BeaconUpgraded(address)": {
          "details": "Emitted when the beacon is upgraded."
        },
        "ContractURIUpdated(string,string)": {
          "details": "Emitted when the contract URI is updated."
        },
        "Initialized(uint8)": {
          "details": "Triggered when the contract has been initialized or reinitialized."
        },
        "Upgraded(address)": {
          "details": "Emitted when the implementation is upgraded."
        }
      },
      "kind": "dev",
      "methods": {
        "addPermissionsToRole(uint256,string[])": {
          "params": {
            "permissions": "the permissions to add to the role",
            "roleId": "the roleId to add the permission to"
          }
        },
        "addRoleToChannel(string,address,uint256)": {
          "params": {
            "channelId": "the channelId to add the role to",
            "entitlement": "the address of the entitlement that we are adding the role to",
            "roleId": "the roleId to add to the channel"
          }
        },
        "addRoleToEntitlement(uint256,(address,bytes))": {
          "params": {
            "entitlement": "the address of the entitlement",
            "roleId": "the roleId to add to the entitlement"
          }
        },
        "constructor": {
          "custom:oz-upgrades-unsafe-allow": "constructor"
        },
        "createChannel(string,string,uint256[])": {
          "params": {
            "channelId": "the network id of the channel linking it to the dendrite/casablanca protocol",
            "channelName": "the name of the channel",
            "roleIds": "the roleIds to be set as the initial roles for the channel"
          },
          "returns": {
            "_0": "the channelId of the created channel"
          }
        },
        "createRole(string,string[],(address,bytes)[])": {
          "params": {
            "entitlements": "the initial entitlements to gate the role",
            "permissions": "the permissions to be set for the role",
            "roleName": "the name of the role"
          },
          "returns": {
            "_0": "the roleId of the created role"
          }
        },
        "getChannelByHash(bytes32)": {
          "params": {
            "channelHash": "the hashed channelId"
          },
          "returns": {
            "_0": "the Channel information"
          }
        },
        "getEntitlementByModuleType(string)": {
          "details": "if two entitlements have the same name it will return the last one in the array",
          "params": {
            "moduleType": "the module type to fetch the entitlement for"
          },
          "returns": {
            "_0": "the entitlement address"
          }
        },
        "getEntitlementIdsByRoleId(uint256)": {
          "params": {
            "roleId": "the roleId to fetch the entitlements for"
          },
          "returns": {
            "_0": "the entitlements for the role"
          }
        },
        "getEntitlementModules()": {
          "returns": {
            "_entitlementModules": "entitlement modules array"
          }
        },
        "getPermissionsByRoleId(uint256)": {
          "params": {
            "roleId": "the roleId to fetch the permissions for"
          },
          "returns": {
            "_0": "permissions array for the role"
          }
        },
        "getRoleById(uint256)": {
          "params": {
            "roleId": "the roleId to fetch the role information for"
          },
          "returns": {
            "_0": "the role information"
          }
        },
        "initialize(string,string,address,uint256,address[])": {
          "params": {
            "modules": "the initial modules to be used by the space for gating",
            "name": "the name of the space",
            "networkId": "the network id of the space linking it to the dendrite/casablanca protocol"
          }
        },
        "isEntitledToChannel(string,address,string)": {
          "params": {
            "channelId": "the channelId to check the permission for",
            "permission": "the permission to check",
            "user": "the user to check the permission for"
          },
          "returns": {
            "_entitled": "whether the user is entitled to the permission in the channel"
          }
        },
        "isEntitledToSpace(address,string)": {
          "params": {
            "permission": "the permission to check",
            "user": "the user to check the permission for"
          },
          "returns": {
            "_entitled": "whether the user is entitled to the permission in the space"
          }
        },
        "owner()": {
          "returns": {
            "_0": "the address of the Space owner"
          }
        },
        "proxiableUUID()": {
          "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
        },
        "removePermissionsFromRole(uint256,string[])": {
          "params": {
            "permissions": "the permissions to remove from the role",
            "roleId": "the roleId to remove the permission from"
          }
        },
        "removeRole(uint256)": {
          "params": {
            "roleId": "the roleId to remove"
          }
        },
        "removeRoleFromChannel(string,address,uint256)": {
          "params": {
            "channelId": "the channelId to remove the role from",
            "entitlement": "the address of the entitlement that we are removing the role from",
            "roleId": "the roleId to remove from the channel"
          }
        },
        "removeRoleFromEntitlement(uint256,(address,bytes))": {
          "params": {
            "entitlement": "the address of the entitlement to remove",
            "roleId": "the roleId to remove the entitlement from"
          }
        },
        "setChannelAccess(string,bool)": {
          "params": {
            "channelId": "the channelId to set the access for",
            "disabled": "whether to make the channel disabled or not"
          }
        },
        "setEntitlementModule(address,bool)": {
          "params": {
            "entitlementModule": "the address of the new entitlement",
            "whitelist": "whether to set the entitlement as activated or not"
          }
        },
        "setOwnerRoleId(uint256)": {
          "params": {
            "roleId": "the roleId to be set as the owner role id"
          }
        },
        "setSpaceAccess(bool)": {
          "params": {
            "disabled": "whether to make the space disabled or not"
          }
        },
        "supportsInterface(bytes4)": {
          "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
        },
        "updateChannel(string,string)": {
          "params": {
            "channelId": "the channelId to update",
            "channelName": "the new name of the channel"
          }
        },
        "updateRole(uint256,string)": {
          "params": {
            "roleId": "the roleId to update",
            "roleName": "the new name of the role"
          }
        },
        "upgradeTo(address)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        },
        "upgradeToAndCall(address,bytes)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        }
      },
      "stateVariables": {
        "__gap": {
          "details": "Added to allow future versions to add new variables in case this contract becomes      inherited. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addPermissionsToRole(uint256,string[])": {
          "notice": "***** Permission Management *****adds a permission to a role by roleId"
        },
        "addRoleToChannel(string,address,uint256)": {
          "notice": "adds a role to a channel"
        },
        "addRoleToEntitlement(uint256,(address,bytes))": {
          "notice": "adds a role to an entitlement"
        },
        "createChannel(string,string,uint256[])": {
          "notice": "creates a new channel for the space"
        },
        "createRole(string,string[],(address,bytes)[])": {
          "notice": "creates a new role for the space"
        },
        "getChannelByHash(bytes32)": {
          "notice": "fetches the Channel information by the hashed channelId"
        },
        "getChannels()": {
          "notice": "fetches all the channels for the space"
        },
        "getEntitlementByModuleType(string)": {
          "notice": "gets an entitlement address by its module type"
        },
        "getEntitlementIdsByRoleId(uint256)": {
          "notice": "***** Entitlement Management *****gets the entitlements for a given role"
        },
        "getEntitlementModules()": {
          "notice": "fetches all the entitlements for the space"
        },
        "getPermissionsByRoleId(uint256)": {
          "notice": "fetches the permissions for a role by roleId"
        },
        "getRoleById(uint256)": {
          "notice": "fetches the role information by roleId"
        },
        "getRoles()": {
          "notice": "***** Role Management *****fetches the all the created roles for the space"
        },
        "initialize(string,string,address,uint256,address[])": {
          "notice": "***** Space Management *****initializes a new Space"
        },
        "isEntitledToChannel(string,address,string)": {
          "notice": "checks if a user is entitled to a permission in a channel"
        },
        "isEntitledToSpace(address,string)": {
          "notice": "checks if a user is entitled to a permission in the space"
        },
        "owner()": {
          "notice": "fetches the Space owner"
        },
        "removePermissionsFromRole(uint256,string[])": {
          "notice": "removes a permission from a role by roleId"
        },
        "removeRole(uint256)": {
          "notice": "removes a role by roleId"
        },
        "removeRoleFromChannel(string,address,uint256)": {
          "notice": "removes a role from a channel"
        },
        "removeRoleFromEntitlement(uint256,(address,bytes))": {
          "notice": "removes an entitlement from the space"
        },
        "setChannelAccess(string,bool)": {
          "notice": "sets whether the channel is disabled or not"
        },
        "setContractURI(string)": {
          "notice": "inheritdoc IMetadata"
        },
        "setEntitlementModule(address,bool)": {
          "notice": "sets a new entitlement module for the space"
        },
        "setOwnerRoleId(uint256)": {
          "notice": "sets a created roleId to be the owner role id for the Space"
        },
        "setSpaceAccess(bool)": {
          "notice": "sets whether the space is disabled or not"
        },
        "updateChannel(string,string)": {
          "notice": "updates a channel name"
        },
        "updateRole(uint256,string)": {
          "notice": "updates a role name by roleId"
        },
        "upgradeEntitlement(address,address)": {
          "notice": "***** Entitlement Management *****"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "packages/contracts/src/spaces/Space.sol": "Space"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@towns/=node_modules/@towns/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":contracts/=packages/contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":murky/=lib/murky/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":solmate/=lib/solmate/src/",
      ":weird-erc20/=lib/solmate/lib/weird-erc20/src/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
      "keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
      "license": "MIT",
      "urls": [
        "bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
        "dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
      "license": "MIT",
      "urls": [
        "bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
        "dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
      "keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
      "license": "MIT",
      "urls": [
        "bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
        "dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "keccak256": "0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271",
      "license": "MIT",
      "urls": [
        "bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618",
        "dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "keccak256": "0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778",
      "license": "MIT",
      "urls": [
        "bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1",
        "dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
      "license": "MIT",
      "urls": [
        "bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
        "dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
      "license": "MIT",
      "urls": [
        "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
        "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
      "keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
      "license": "MIT",
      "urls": [
        "bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
        "dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
      "license": "MIT",
      "urls": [
        "bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
        "dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "packages/contracts/src/spaces/Space.sol": {
      "keccak256": "0xb1410bf6f46fbde619383f8272df2d6281c8dc63564c016c4c45d5bde5513671",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1be88778b3bad50858ec8f7571f324b58d94822916be2522dc5287b83449860b",
        "dweb:/ipfs/QmX5s2HsEX8X3ZNxxeADWNqekABomSA6FDFVbXFPgxAEJ6"
      ]
    },
    "packages/contracts/src/spaces/interfaces/IEntitlement.sol": {
      "keccak256": "0x5e07133041017bbb2a1bd594781c8050822980921581a1c22435dd97054cfc93",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a5b08462a94b5eba11746da38032f51b30c279b00f377c7e80d24fcdf4c23d73",
        "dweb:/ipfs/QmcchLJn2YRAPhnRCQx46LCqyvL6gUvaiJbeWvXbQyXZz6"
      ]
    },
    "packages/contracts/src/spaces/interfaces/ISpace.sol": {
      "keccak256": "0x977aa1fb9262fdafcbee07cda44c439176e7d29cd9101860297f6cb375b872e7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9a123fcbcd366a5155f1bf83a135abc0bf321a1179e34e8ab31ce771dd2196d1",
        "dweb:/ipfs/Qmdwp8n6aSeY845sErV7jFUhUTXZFpwfeyMe3Kc6HR488R"
      ]
    },
    "packages/contracts/src/spaces/libraries/DataTypes.sol": {
      "keccak256": "0x59127dc6905dcf95782e379c0cadabaaed7514799dc85c29b9db7d3faaa26fcc",
      "license": "Apache-20",
      "urls": [
        "bzz-raw://6d7c7aa13983d09bcec7aad416a5b1077c81765664386c519d3dad43a19cd5eb",
        "dweb:/ipfs/Qmbu3S4RVybAQPNU5f7jhMxG1eFZhBypgbYVLpPhGDpNen"
      ]
    },
    "packages/contracts/src/spaces/libraries/Errors.sol": {
      "keccak256": "0x2d478c9688870f6780a19ea34d73db957f194702cbc3c4f4707f9825ba502cf1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2d777ea8d3fa5ce20b9cc36fc5194d7d129dc7b2ece31d060087f797628566fa",
        "dweb:/ipfs/QmZ1KjfrYZ9A2FTUJkYs3rezxFrsUQWZySJRBL6RHQoyQF"
      ]
    },
    "packages/contracts/src/spaces/libraries/Events.sol": {
      "keccak256": "0xaab06310ec51a878125595216b6c1b72fa26096859c8297ed4d19cc91b6b4701",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a26b81e03bae742ca30dfa0af4d8b3c2017798829f6a75ecca3550bb2cc37c46",
        "dweb:/ipfs/QmWsUqtx3frKovXz9YQRSjxPVWUp8BzmRxY8s4u3hQbzzz"
      ]
    },
    "packages/contracts/src/spaces/libraries/Permissions.sol": {
      "keccak256": "0xf3c61d5c68e9d55d82c1d2b888881fc08211ee9c7b1ef579458f043965265399",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://4b5a2696f26adaa6f9e919ccbde2a2cfb4a17ae7c6000a9e965496b8602b5a1a",
        "dweb:/ipfs/QmTS1uQ82B5i9C1ZJjU8jHSMU6vrRKDDhvcyrENmc9JMU1"
      ]
    },
    "packages/contracts/src/spaces/libraries/Utils.sol": {
      "keccak256": "0xf97297476d7fb903873593803aa8d4be3e300c02b83bb707e5a99e07d60786f0",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://71a549a9281a0a60e37f221d4ae0fdb6da9a8994d9c5a274b343585c88916af9",
        "dweb:/ipfs/QmTr6J7qqkF8xiZkJSt8e812r4srdmXQetZk6jTgJbcasJ"
      ]
    },
    "packages/contracts/src/utils/Metadata.sol": {
      "keccak256": "0xc1530022c5ebb294986fc963c97e12edf7d3a83a6759e2f5942b61c09deaa775",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ce76d3926fa45d1a8e97400dbffa9f96803a6df18b58ca9062769cdf87762c73",
        "dweb:/ipfs/Qmcpz7ZEsZMcF4CwFooJnCjZx5nxiXdzTtkmaXdKnKVfds"
      ]
    },
    "packages/contracts/src/utils/MultiCaller.sol": {
      "keccak256": "0x3441542d90123c265e94b948a4215418c4a5f8a8e23bca3ba929671ef6bc8246",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://fab07fcf9c590926072868d314ccc453eece66a02a6fd5cba7aceed36b4ac33e",
        "dweb:/ipfs/QmR29MwNCevmsa13kVoLDUf5LFCJw1SnY6VuB4f54TC7Ly"
      ]
    },
    "packages/contracts/src/utils/interfaces/IMetadata.sol": {
      "keccak256": "0xd16cdbf4362883382409025e41760f2382470cabada7fe0ce5fe165855debf52",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0c3424b5243f243c7ea9d1760a99636ef8587beab81a161eae31ad65be66b702",
        "dweb:/ipfs/QmUMsXbkA667dBhTwjmPE8VtLQCWeFWHqcrTmeAuWqw5Dn"
      ]
    }
  },
  "version": 1
}