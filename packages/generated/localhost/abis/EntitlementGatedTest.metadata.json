{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "EntitlementChecker_InsufficientNumberOfNodes",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementChecker_NodeAlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementChecker_NodeNotRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_InvalidAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_NodeAlreadyVoted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_NodeNotFound",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionAlreadyCompleted",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionAlreadyRegistered",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementGated_TransactionNotRegistered",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "callerAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "selectedNodes",
            "type": "address[]"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "contractAddress",
            "type": "address"
          }
        ],
        "name": "EntitlementCheckRequested",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "enum IEntitlementGatedBase.NodeVoteStatus",
            "name": "result",
            "type": "uint8"
          }
        ],
        "name": "EntitlementCheckResultPosted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "err",
            "type": "string"
          }
        ],
        "name": "Log",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "value",
            "type": "address"
          }
        ],
        "name": "LogAddress",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "value",
            "type": "address[]"
          }
        ],
        "name": "LogArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bool[]",
            "name": "value",
            "type": "bool[]"
          }
        ],
        "name": "LogArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32[]",
            "name": "value",
            "type": "bytes32[]"
          }
        ],
        "name": "LogArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "int256[]",
            "name": "value",
            "type": "int256[]"
          }
        ],
        "name": "LogArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string[]",
            "name": "value",
            "type": "string[]"
          }
        ],
        "name": "LogArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "value",
            "type": "uint256[]"
          }
        ],
        "name": "LogArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ],
        "name": "LogBytes",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ],
        "name": "LogBytes32",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "int256",
            "name": "value",
            "type": "int256"
          }
        ],
        "name": "LogInt256",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "value",
            "type": "address"
          }
        ],
        "name": "LogNamedAddress",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "value",
            "type": "address[]"
          }
        ],
        "name": "LogNamedArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bool[]",
            "name": "value",
            "type": "bool[]"
          }
        ],
        "name": "LogNamedArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bytes32[]",
            "name": "value",
            "type": "bytes32[]"
          }
        ],
        "name": "LogNamedArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "int256[]",
            "name": "value",
            "type": "int256[]"
          }
        ],
        "name": "LogNamedArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string[]",
            "name": "value",
            "type": "string[]"
          }
        ],
        "name": "LogNamedArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "value",
            "type": "uint256[]"
          }
        ],
        "name": "LogNamedArray",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ],
        "name": "LogNamedBytes",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ],
        "name": "LogNamedBytes32",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "int256",
            "name": "value",
            "type": "int256"
          }
        ],
        "name": "LogNamedInt256",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "name": "LogNamedString",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "LogNamedUint256",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "name": "LogString",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "LogUint256",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "name": "NodeRegistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "nodeAddress",
            "type": "address"
          }
        ],
        "name": "NodeUnregistered",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "IS_TEST",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "NATIVE_TOKEN",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "s1",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "s2",
            "type": "string"
          }
        ],
        "name": "_isEqual",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "s1",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s2",
            "type": "bytes32"
          }
        ],
        "name": "_isEqual",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "checker",
        "outputs": [
          {
            "internalType": "contract IEntitlementChecker",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "failed",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "gated",
        "outputs": [
          {
            "internalType": "contract MockEntitlementGated",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "nodeKeys",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "setUp",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_deleteTransaction",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_postEntitlementCheckResult_failing",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_postEntitlementCheckResult_passing",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_postEntitlementCheckResult_revert_nodeAlreadyVoted",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_postEntitlementCheckResult_revert_nodeNotFound",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_postEntitlementCheckResult_revert_transactionNotRegistered",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_requestEntitlementCheck",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "test_requestEntitlementCheck_revert_alreadyRegistered",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "IS_TEST()": {
          "details": "A flag to indicate that this is a test contract."
        },
        "failed()": {
          "details": "Checks whether any test has failed so far. In addition to the local failure flag, we look for the global flag in the HEVM contract at storage slot \"failed\", because it is possible to run assertions between different instances of PRBTest. See https://github.com/dapphub/dapptools/issues/768."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/test/crosschain/EntitlementGated.t.sol": "EntitlementGatedTest"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/crosschain/EntitlementGated.sol": {
      "keccak256": "0xf9ed0348a36101b1fe81327f6a292391b4c2c8ebe36992d4df99acc1bae74289",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f608c7e6444ff77b10b2af1a1239e0822827a2977e8ff48fa08af8cc6fb4cfb8",
        "dweb:/ipfs/QmZ615rEPNWfMRQCwsQ29gEPrk8rmnj99SzxnC63njCQES"
      ]
    },
    "contracts/src/crosschain/EntitlementGatedBase.sol": {
      "keccak256": "0x53bd2d3598f709211eb057a3a2784c060a6e0dfb80c55d5bd5b8a8cc16678279",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0fa591144a88316a01e5152ea4eb4362cb62d6f884593722c01dfd43b5a13a16",
        "dweb:/ipfs/Qmdt5KF9RHmSov4ExqpneJ4j8jWWWbyUrjWzcZkvzktJDd"
      ]
    },
    "contracts/src/crosschain/EntitlementGatedStorage.sol": {
      "keccak256": "0x51b85ff651a75d749eb65e768428b25d158ef6ae9678655e65e8d2f1e9b638cb",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8f98bd3e02018d9c2620e8f94b3b212e25af4b23a2faf2b54c48121cd2042676",
        "dweb:/ipfs/QmNMGZBvqWDERgM2idJNGZs5J2D2qQszfJDeiaeG5k5kMK"
      ]
    },
    "contracts/src/crosschain/IEntitlementGated.sol": {
      "keccak256": "0xa6f6876226c72f9b1a58fed8f07824e01e5bae0bd998a358c98f111b97673b5b",
      "license": "MIT",
      "urls": [
        "bzz-raw://bcb111cd2c4756c6f8320bee975f69983ac5fb9661cdab4fc744f31e9fde5016",
        "dweb:/ipfs/QmVaei4ML3v2tCaUPiJGkCx4g5kkzNNTQ1XrgjUxzoy6vi"
      ]
    },
    "contracts/src/crosschain/checker/EntitlementChecker.sol": {
      "keccak256": "0x3786a42f409bbc6110b0fa0c8da2432da887aa69c5ca8467f8231d4e8b993c09",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ba796edab43ee7d751d55e67d91d842a0f1ecd39080278ee3c8bf348405423d0",
        "dweb:/ipfs/QmbznscDXHz5dE9rVBt67zNmME8FXbDsD7wg4ve7Xt3QW8"
      ]
    },
    "contracts/src/crosschain/checker/EntitlementCheckerBase.sol": {
      "keccak256": "0xa68eca83ddee09c7b614729189af87b9cf1c06b41e2e3b055514139e643da29d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://53df49fe76c010d592ba009030aa42dd92c0353e8d86b9d129074730a16a779d",
        "dweb:/ipfs/QmWHpC2Dpfjh5MkgF5vAQbNBpCy3wUkrXGS51BafvZgLXr"
      ]
    },
    "contracts/src/crosschain/checker/EntitlementCheckerStorage.sol": {
      "keccak256": "0x31800262b31c904ac1e7bd21b5ccbb2ef0d35dd9329a07828d4382bb1cf7896a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a58f0963f1c405771f2bbeceda8c7b41b7cbfa533b46db082cc6cb3c3d3e68a4",
        "dweb:/ipfs/QmUTti16QXFXK9rjCDJg3WBJTb4GTKPCYwuxXDv7f2UH3y"
      ]
    },
    "contracts/src/crosschain/checker/IEntitlementChecker.sol": {
      "keccak256": "0x409247398c6bfce94d86a3d7f12b6e86dc9c008546f95b9f511ddfffd9e2b222",
      "license": "MIT",
      "urls": [
        "bzz-raw://85d9b22629977cdc607ba80e2b3e9d4e0d8ffa125eb66d75ea0e920a0685e5a9",
        "dweb:/ipfs/Qmcn5V1iGQMVgvnFkQv8Qrz7oMdrxSsPu1txGwsHsUwHVR"
      ]
    },
    "contracts/test/crosschain/EntitlementGated.t.sol": {
      "keccak256": "0x6055d126d3cd028ddbe7f70fbb1de6be218e35c55a69284f63e19baf8e870331",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6295186f504b319eb92e77347dee513d9e7b7c42ff16fb51b0c286f03c8efd7f",
        "dweb:/ipfs/QmS4kUJCPxaTUr5YF4dZJVnwN1b2KD2ipr2U3bvzeiJpEK"
      ]
    },
    "contracts/test/mocks/MockEntitlementGated.sol": {
      "keccak256": "0x75b634bd6718d01c61910bbadcba39153952afed36f052bef4a33d9e562d6dd7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2a0c63a880753724bac694321b187063b78543c003971a6f2e63532d95806e11",
        "dweb:/ipfs/QmTzZExwDVGqht8ZKwafCVBrqS6AJhvmNhAoFZ5KuZPGKY"
      ]
    },
    "contracts/test/utils/TestUtils.sol": {
      "keccak256": "0xc9d1e208a42d002aceb99f2dd2e593fc3f7bf7c326eaef14e70f58c6c6c0a5cd",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://bbf728a738ef1f3d79d4798400c4d2c2ac6df7a4e6c7fc939db2b28cbb43125a",
        "dweb:/ipfs/QmV2nUeDrPHSHesN1dxaFPr8fWDH15vZQzEzoEen2rowvH"
      ]
    },
    "lib/forge-std/src/StdCheats.sol": {
      "keccak256": "0x3c536209b4d4e1879adc4d91b12e237985f0f8f91e71828dacd8fca3bdf2fa99",
      "license": "MIT",
      "urls": [
        "bzz-raw://65adfc61088d242dbab8faa738d104005531e3a52ed993329b54fa7ee45e53ab",
        "dweb:/ipfs/QmP1d4thtELTT2vup4XmrCSKXZ91Eq756pgKq1z5hq2NGP"
      ]
    },
    "lib/forge-std/src/StdStorage.sol": {
      "keccak256": "0xd1517df281f973dba8b7ba52c02d3df552b60d91b8f47e4669049da648778673",
      "license": "MIT",
      "urls": [
        "bzz-raw://52e43264f58a5dcfd985f3c99aa81064805aa8f1c2b4c6521fd63d45cdbba8d5",
        "dweb:/ipfs/QmUMTF6cRjt5tCQrrgQDXVRmHQLjevNsTvLFdaA1m9TBj9"
      ]
    },
    "lib/forge-std/src/Vm.sol": {
      "keccak256": "0xdd9f518aade851117d3ca3122cae6ed413a8b8355d43d69db336e94da3214a96",
      "license": "MIT",
      "urls": [
        "bzz-raw://939ede17edec5c78176379839f4c68851b1316e8f5789efb2f01cbdae09b88ef",
        "dweb:/ipfs/QmYiBBb7Nyuse7HoEFkCeauUwcpef9S33ozZYDqXCEXEtH"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    },
    "lib/prb-test/src/Helpers.sol": {
      "keccak256": "0x4ab5888920e97cb50dff6a7093fd01d830aa8b7f1e3d5313f73e46f812360705",
      "license": "MIT",
      "urls": [
        "bzz-raw://0ecaffd6d742a3c47c3785e9816d1d459d45cb6bf34a353884d333b87d52fa60",
        "dweb:/ipfs/QmYjsof64dPbxxw4i95S9bqDvTF4V2DA35bSwYAvXxxXYp"
      ]
    },
    "lib/prb-test/src/PRBTest.sol": {
      "keccak256": "0xed6d9f8c7fd5ca380a47a6de7c631d48a96cbc777632d030a52bf9216aea0bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://dcf663e0c2e2d3eabdaa1c9e7ff4df2a3b046e1279de1e0d2ce24a87a86e37fb",
        "dweb:/ipfs/QmRnar3CcN2JMYqrDYkUqEya6A3vBWUrD2HSL8aP7FC4vK"
      ]
    },
    "lib/prb-test/src/Vm.sol": {
      "keccak256": "0xecae57742478cd465460cc2ec5fd9174a41e5b93549c1d4456ff26cf97356fee",
      "license": "MIT",
      "urls": [
        "bzz-raw://fdf31f7f585bebfde82af93eb295e18196362704e69338e0626c2d8015d00e9d",
        "dweb:/ipfs/Qme1oLTN5CxRRiuVw48oN5buYotdaKNnio7a9W4hAus9Ry"
      ]
    }
  },
  "version": 1
}