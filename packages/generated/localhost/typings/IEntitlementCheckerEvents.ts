/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IEntitlementCheckerEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "EntitlementCheckRequested(address,bytes32,address[],address)": EventFragment;
    "EntitlementCheckResultPosted(bytes32,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntitlementCheckRequested"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EntitlementCheckResultPosted"
  ): EventFragment;
}

export interface EntitlementCheckRequestedEventObject {
  callerAddress: string;
  transactionId: string;
  selectedNodes: string[];
  contractAddress: string;
}
export type EntitlementCheckRequestedEvent = TypedEvent<
  [string, string, string[], string],
  EntitlementCheckRequestedEventObject
>;

export type EntitlementCheckRequestedEventFilter =
  TypedEventFilter<EntitlementCheckRequestedEvent>;

export interface EntitlementCheckResultPostedEventObject {
  transactionId: string;
  result: number;
}
export type EntitlementCheckResultPostedEvent = TypedEvent<
  [string, number],
  EntitlementCheckResultPostedEventObject
>;

export type EntitlementCheckResultPostedEventFilter =
  TypedEventFilter<EntitlementCheckResultPostedEvent>;

export interface IEntitlementCheckerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEntitlementCheckerEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "EntitlementCheckRequested(address,bytes32,address[],address)"(
      callerAddress?: PromiseOrValue<string> | null,
      transactionId?: null,
      selectedNodes?: null,
      contractAddress?: null
    ): EntitlementCheckRequestedEventFilter;
    EntitlementCheckRequested(
      callerAddress?: PromiseOrValue<string> | null,
      transactionId?: null,
      selectedNodes?: null,
      contractAddress?: null
    ): EntitlementCheckRequestedEventFilter;

    "EntitlementCheckResultPosted(bytes32,uint8)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;
    EntitlementCheckResultPosted(
      transactionId?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): EntitlementCheckResultPostedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
