/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type EntitlementStruct = {
    module: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type EntitlementStructOutput = [string, string] & {
    module: string;
    data: string;
  };

  export type ChannelStruct = {
    name: PromiseOrValue<string>;
    channelId: PromiseOrValue<string>;
    channelHash: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    disabled: PromiseOrValue<boolean>;
  };

  export type ChannelStructOutput = [
    string,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    name: string;
    channelId: string;
    channelHash: string;
    createdAt: BigNumber;
    disabled: boolean;
  };

  export type EntitlementModuleStruct = {
    name: PromiseOrValue<string>;
    moduleAddress: PromiseOrValue<string>;
    moduleType: PromiseOrValue<string>;
    enabled: PromiseOrValue<boolean>;
  };

  export type EntitlementModuleStructOutput = [
    string,
    string,
    string,
    boolean
  ] & {
    name: string;
    moduleAddress: string;
    moduleType: string;
    enabled: boolean;
  };

  export type RoleStruct = {
    roleId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type RoleStructOutput = [BigNumber, string] & {
    roleId: BigNumber;
    name: string;
  };
}

export declare namespace ISpace {
  export type ChannelInfoStruct = {
    channelHash: PromiseOrValue<BytesLike>;
    channelId: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type ChannelInfoStructOutput = [string, string, string, boolean] & {
    channelHash: string;
    channelId: string;
    name: string;
    disabled: boolean;
  };

  export type SpaceInfoStruct = {
    spaceAddress: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    spaceId: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type SpaceInfoStructOutput = [string, string, string, boolean] & {
    spaceAddress: string;
    owner: string;
    spaceId: string;
    disabled: boolean;
  };
}

export interface SpaceInterface extends utils.Interface {
  functions: {
    "MODULE_TYPE()": FunctionFragment;
    "MODULE_VERSION()": FunctionFragment;
    "addPermissionsToRole(uint256,string[])": FunctionFragment;
    "addRoleToChannel(string,address,uint256)": FunctionFragment;
    "addRoleToEntitlement(uint256,(address,bytes))": FunctionFragment;
    "channels(uint256)": FunctionFragment;
    "channelsByHash(bytes32)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "createChannel(string,string,uint256[])": FunctionFragment;
    "createRole(string,string[],(address,bytes)[])": FunctionFragment;
    "defaultEntitlements(address)": FunctionFragment;
    "disabled()": FunctionFragment;
    "entitlements(uint256)": FunctionFragment;
    "getChannelByHash(bytes32)": FunctionFragment;
    "getChannelInfo(string)": FunctionFragment;
    "getChannels()": FunctionFragment;
    "getEntitlementByModuleType(string)": FunctionFragment;
    "getEntitlementIdsByRoleId(uint256)": FunctionFragment;
    "getEntitlementModules()": FunctionFragment;
    "getPermissionsByRoleId(uint256)": FunctionFragment;
    "getRoleById(uint256)": FunctionFragment;
    "getRoles()": FunctionFragment;
    "getSpaceInfo()": FunctionFragment;
    "hasEntitlement(address)": FunctionFragment;
    "initialize(string,string,address,uint256,address[])": FunctionFragment;
    "isEntitledToChannel(string,address,string)": FunctionFragment;
    "isEntitledToSpace(address,string)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "networkId()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerRoleId()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removePermissionsFromRole(uint256,string[])": FunctionFragment;
    "removeRole(uint256)": FunctionFragment;
    "removeRoleFromChannel(string,address,uint256)": FunctionFragment;
    "removeRoleFromEntitlement(uint256,(address,bytes))": FunctionFragment;
    "roleCount()": FunctionFragment;
    "rolesById(uint256)": FunctionFragment;
    "setChannelAccess(string,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setEntitlementModule(address,bool)": FunctionFragment;
    "setOwnerRoleId(uint256)": FunctionFragment;
    "setSpaceAccess(bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenId()": FunctionFragment;
    "updateChannel(string,string)": FunctionFragment;
    "updateRole(uint256,string)": FunctionFragment;
    "upgradeEntitlement(address,address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MODULE_TYPE"
      | "MODULE_VERSION"
      | "addPermissionsToRole"
      | "addRoleToChannel"
      | "addRoleToEntitlement"
      | "channels"
      | "channelsByHash"
      | "contractURI"
      | "createChannel"
      | "createRole"
      | "defaultEntitlements"
      | "disabled"
      | "entitlements"
      | "getChannelByHash"
      | "getChannelInfo"
      | "getChannels"
      | "getEntitlementByModuleType"
      | "getEntitlementIdsByRoleId"
      | "getEntitlementModules"
      | "getPermissionsByRoleId"
      | "getRoleById"
      | "getRoles"
      | "getSpaceInfo"
      | "hasEntitlement"
      | "initialize"
      | "isEntitledToChannel"
      | "isEntitledToSpace"
      | "multicall"
      | "name"
      | "networkId"
      | "owner"
      | "ownerRoleId"
      | "proxiableUUID"
      | "removePermissionsFromRole"
      | "removeRole"
      | "removeRoleFromChannel"
      | "removeRoleFromEntitlement"
      | "roleCount"
      | "rolesById"
      | "setChannelAccess"
      | "setContractURI"
      | "setEntitlementModule"
      | "setOwnerRoleId"
      | "setSpaceAccess"
      | "supportsInterface"
      | "token"
      | "tokenId"
      | "updateChannel"
      | "updateRole"
      | "upgradeEntitlement"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MODULE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODULE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPermissionsToRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleToChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoleToEntitlement",
    values: [PromiseOrValue<BigNumberish>, DataTypes.EntitlementStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "channels",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "channelsByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      DataTypes.EntitlementStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultEntitlements",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "disabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "entitlements",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlementByModuleType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlementIdsByRoleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitlementModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionsByRoleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSpaceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasEntitlement",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntitledToChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntitledToSpace",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "networkId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerRoleId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionsFromRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoleFromChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoleFromEntitlement",
    values: [PromiseOrValue<BigNumberish>, DataTypes.EntitlementStruct]
  ): string;
  encodeFunctionData(functionFragment: "roleCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rolesById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntitlementModule",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerRoleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpaceAccess",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateChannel",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeEntitlement",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MODULE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODULE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPermissionsToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleToChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoleToEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "channels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "channelsByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultEntitlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entitlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlementByModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlementIdsByRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitlementModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionsByRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSpaceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEntitledToChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEntitledToSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "networkId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionsFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRoleFromChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRoleFromEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rolesById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChannelAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntitlementModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerRoleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpaceAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEntitlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractURIUpdated(string,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ContractURIUpdatedEventObject {
  prevURI: string;
  newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string, string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Space extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<[string]>;

    MODULE_VERSION(overrides?: CallOverrides): Promise<[number]>;

    addPermissionsToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoleToEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean] & {
        name: string;
        channelId: string;
        channelHash: string;
        createdAt: BigNumber;
        disabled: boolean;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    createChannel(
      channelName: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      _entitlements: DataTypes.EntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultEntitlements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disabled(overrides?: CallOverrides): Promise<[boolean]>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ChannelStructOutput]>;

    getChannelInfo(
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ISpace.ChannelInfoStructOutput] & {
        channelInfo: ISpace.ChannelInfoStructOutput;
      }
    >;

    getChannels(overrides?: CallOverrides): Promise<[string[]]>;

    getEntitlementByModuleType(
      _moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEntitlementIdsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getEntitlementModules(
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.EntitlementModuleStructOutput[]] & {
        _entitlementModules: DataTypes.EntitlementModuleStructOutput[];
      }
    >;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RoleStructOutput]>;

    getRoles(
      overrides?: CallOverrides
    ): Promise<[DataTypes.RoleStructOutput[]]>;

    getSpaceInfo(
      overrides?: CallOverrides
    ): Promise<
      [ISpace.SpaceInfoStructOutput] & {
        spaceInfo: ISpace.SpaceInfoStructOutput;
      }
    >;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEntitledToChannel(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _entitled: boolean }>;

    isEntitledToSpace(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _entitled: boolean }>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    networkId(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerRoleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removePermissionsFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRoleFromEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { roleId: BigNumber; name: string }>;

    setChannelAccess(
      channelId: PromiseOrValue<string>,
      disableChannel: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEntitlementModule(
      _entitlementModule: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpaceAccess(
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateChannel(
      channelId: PromiseOrValue<string>,
      channelName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeEntitlement(
      _entitlement: PromiseOrValue<string>,
      _newEntitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

  MODULE_VERSION(overrides?: CallOverrides): Promise<number>;

  addPermissionsToRole(
    _roleId: PromiseOrValue<BigNumberish>,
    _permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoleToChannel(
    _channelId: PromiseOrValue<string>,
    _entitlement: PromiseOrValue<string>,
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoleToEntitlement(
    _roleId: PromiseOrValue<BigNumberish>,
    _entitlement: DataTypes.EntitlementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  channels(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  channelsByHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean] & {
      name: string;
      channelId: string;
      channelHash: string;
      createdAt: BigNumber;
      disabled: boolean;
    }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  createChannel(
    channelName: PromiseOrValue<string>,
    channelId: PromiseOrValue<string>,
    roleIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRole(
    _roleName: PromiseOrValue<string>,
    _permissions: PromiseOrValue<string>[],
    _entitlements: DataTypes.EntitlementStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultEntitlements(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disabled(overrides?: CallOverrides): Promise<boolean>;

  entitlements(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChannelByHash(
    _channelHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ChannelStructOutput>;

  getChannelInfo(
    channelId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ISpace.ChannelInfoStructOutput>;

  getChannels(overrides?: CallOverrides): Promise<string[]>;

  getEntitlementByModuleType(
    _moduleType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEntitlementIdsByRoleId(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEntitlementModules(
    overrides?: CallOverrides
  ): Promise<DataTypes.EntitlementModuleStructOutput[]>;

  getPermissionsByRoleId(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoleById(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RoleStructOutput>;

  getRoles(overrides?: CallOverrides): Promise<DataTypes.RoleStructOutput[]>;

  getSpaceInfo(
    overrides?: CallOverrides
  ): Promise<ISpace.SpaceInfoStructOutput>;

  hasEntitlement(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _name: PromiseOrValue<string>,
    _networkId: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _entitlements: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEntitledToChannel(
    _channelId: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _permission: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEntitledToSpace(
    _user: PromiseOrValue<string>,
    _permission: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  networkId(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerRoleId(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removePermissionsFromRole(
    _roleId: PromiseOrValue<BigNumberish>,
    _permissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRole(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRoleFromChannel(
    _channelId: PromiseOrValue<string>,
    _entitlement: PromiseOrValue<string>,
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRoleFromEntitlement(
    _roleId: PromiseOrValue<BigNumberish>,
    _entitlement: DataTypes.EntitlementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleCount(overrides?: CallOverrides): Promise<BigNumber>;

  rolesById(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { roleId: BigNumber; name: string }>;

  setChannelAccess(
    channelId: PromiseOrValue<string>,
    disableChannel: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEntitlementModule(
    _entitlementModule: PromiseOrValue<string>,
    _whitelist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwnerRoleId(
    _roleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpaceAccess(
    _disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  updateChannel(
    channelId: PromiseOrValue<string>,
    channelName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRole(
    _roleId: PromiseOrValue<BigNumberish>,
    _roleName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeEntitlement(
    _entitlement: PromiseOrValue<string>,
    _newEntitlement: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

    MODULE_VERSION(overrides?: CallOverrides): Promise<number>;

    addPermissionsToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRoleToEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean] & {
        name: string;
        channelId: string;
        channelHash: string;
        createdAt: BigNumber;
        disabled: boolean;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    createChannel(
      channelName: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      _entitlements: DataTypes.EntitlementStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultEntitlements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disabled(overrides?: CallOverrides): Promise<boolean>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ChannelStructOutput>;

    getChannelInfo(
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ISpace.ChannelInfoStructOutput>;

    getChannels(overrides?: CallOverrides): Promise<string[]>;

    getEntitlementByModuleType(
      _moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEntitlementIdsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEntitlementModules(
      overrides?: CallOverrides
    ): Promise<DataTypes.EntitlementModuleStructOutput[]>;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RoleStructOutput>;

    getRoles(overrides?: CallOverrides): Promise<DataTypes.RoleStructOutput[]>;

    getSpaceInfo(
      overrides?: CallOverrides
    ): Promise<ISpace.SpaceInfoStructOutput>;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isEntitledToChannel(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEntitledToSpace(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    networkId(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerRoleId(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removePermissionsFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRoleFromEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    roleCount(overrides?: CallOverrides): Promise<BigNumber>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { roleId: BigNumber; name: string }>;

    setChannelAccess(
      channelId: PromiseOrValue<string>,
      disableChannel: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      _uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntitlementModule(
      _entitlementModule: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpaceAccess(
      _disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    updateChannel(
      channelId: PromiseOrValue<string>,
      channelName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _roleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeEntitlement(
      _entitlement: PromiseOrValue<string>,
      _newEntitlement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ContractURIUpdated(string,string)"(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    MODULE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addPermissionsToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoleToEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    createChannel(
      channelName: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      _entitlements: DataTypes.EntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultEntitlements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disabled(overrides?: CallOverrides): Promise<BigNumber>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelInfo(
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannels(overrides?: CallOverrides): Promise<BigNumber>;

    getEntitlementByModuleType(
      _moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntitlementIdsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntitlementModules(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    getSpaceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEntitledToChannel(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEntitledToSpace(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    networkId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerRoleId(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removePermissionsFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRoleFromEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleCount(overrides?: CallOverrides): Promise<BigNumber>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChannelAccess(
      channelId: PromiseOrValue<string>,
      disableChannel: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractURI(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEntitlementModule(
      _entitlementModule: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpaceAccess(
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    updateChannel(
      channelId: PromiseOrValue<string>,
      channelName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeEntitlement(
      _entitlement: PromiseOrValue<string>,
      _newEntitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MODULE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPermissionsToRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoleToChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoleToEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    channels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    channelsByHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createChannel(
      channelName: PromiseOrValue<string>,
      channelId: PromiseOrValue<string>,
      roleIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRole(
      _roleName: PromiseOrValue<string>,
      _permissions: PromiseOrValue<string>[],
      _entitlements: DataTypes.EntitlementStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultEntitlements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entitlements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannelByHash(
      _channelHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannelInfo(
      channelId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntitlementByModuleType(
      _moduleType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntitlementIdsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntitlementModules(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionsByRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleById(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSpaceInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasEntitlement(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _networkId: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _entitlements: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEntitledToChannel(
      _channelId: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEntitledToSpace(
      _user: PromiseOrValue<string>,
      _permission: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerRoleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePermissionsFromRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _permissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRole(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRoleFromChannel(
      _channelId: PromiseOrValue<string>,
      _entitlement: PromiseOrValue<string>,
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRoleFromEntitlement(
      _roleId: PromiseOrValue<BigNumberish>,
      _entitlement: DataTypes.EntitlementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rolesById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChannelAccess(
      channelId: PromiseOrValue<string>,
      disableChannel: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEntitlementModule(
      _entitlementModule: PromiseOrValue<string>,
      _whitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerRoleId(
      _roleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpaceAccess(
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateChannel(
      channelId: PromiseOrValue<string>,
      channelName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRole(
      _roleId: PromiseOrValue<BigNumberish>,
      _roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeEntitlement(
      _entitlement: PromiseOrValue<string>,
      _newEntitlement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
