/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IDelegationBase {
  export type DelegationInfoStruct = {
    vault: PromiseOrValue<string>;
    delegate: PromiseOrValue<string>;
  };

  export type DelegationInfoStructOutput = [string, string] & {
    vault: string;
    delegate: string;
  };
}

export interface IDelegationInterface extends utils.Interface {
  functions: {
    "checkDelegateForAll(address,address)": FunctionFragment;
    "delegateForAll(address,bool)": FunctionFragment;
    "getDelegatesForAll(address)": FunctionFragment;
    "getDelegationsByDelegate(address)": FunctionFragment;
    "revokeAllDelegates()": FunctionFragment;
    "revokeDelegate(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkDelegateForAll"
      | "delegateForAll"
      | "getDelegatesForAll"
      | "getDelegationsByDelegate"
      | "revokeAllDelegates"
      | "revokeDelegate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkDelegateForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatesForAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationsByDelegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllDelegates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegate",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkDelegateForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatesForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationsByDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegate",
    data: BytesLike
  ): Result;

  events: {
    "DelegateForAll(address,address,bool)": EventFragment;
    "RevokeAllDelegates(address)": EventFragment;
    "RevokeDelegate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAllDelegates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeDelegate"): EventFragment;
}

export interface DelegateForAllEventObject {
  vault: string;
  delegate: string;
  value: boolean;
}
export type DelegateForAllEvent = TypedEvent<
  [string, string, boolean],
  DelegateForAllEventObject
>;

export type DelegateForAllEventFilter = TypedEventFilter<DelegateForAllEvent>;

export interface RevokeAllDelegatesEventObject {
  vault: string;
}
export type RevokeAllDelegatesEvent = TypedEvent<
  [string],
  RevokeAllDelegatesEventObject
>;

export type RevokeAllDelegatesEventFilter =
  TypedEventFilter<RevokeAllDelegatesEvent>;

export interface RevokeDelegateEventObject {
  vault: string;
  delegate: string;
}
export type RevokeDelegateEvent = TypedEvent<
  [string, string],
  RevokeDelegateEventObject
>;

export type RevokeDelegateEventFilter = TypedEventFilter<RevokeDelegateEvent>;

export interface IDelegation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDelegationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkDelegateForAll(
      delegate: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delegateForAll(
      delegate: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDelegatesForAll(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getDelegationsByDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IDelegationBase.DelegationInfoStructOutput[]] & {
        info: IDelegationBase.DelegationInfoStructOutput[];
      }
    >;

    revokeAllDelegates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkDelegateForAll(
    delegate: PromiseOrValue<string>,
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  delegateForAll(
    delegate: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDelegatesForAll(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getDelegationsByDelegate(
    delegate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IDelegationBase.DelegationInfoStructOutput[]>;

  revokeAllDelegates(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeDelegate(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkDelegateForAll(
      delegate: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegateForAll(
      delegate: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegatesForAll(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getDelegationsByDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IDelegationBase.DelegationInfoStructOutput[]>;

    revokeAllDelegates(overrides?: CallOverrides): Promise<void>;

    revokeDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DelegateForAll(address,address,bool)"(
      vault?: null,
      delegate?: null,
      value?: null
    ): DelegateForAllEventFilter;
    DelegateForAll(
      vault?: null,
      delegate?: null,
      value?: null
    ): DelegateForAllEventFilter;

    "RevokeAllDelegates(address)"(vault?: null): RevokeAllDelegatesEventFilter;
    RevokeAllDelegates(vault?: null): RevokeAllDelegatesEventFilter;

    "RevokeDelegate(address,address)"(
      vault?: null,
      delegate?: null
    ): RevokeDelegateEventFilter;
    RevokeDelegate(vault?: null, delegate?: null): RevokeDelegateEventFilter;
  };

  estimateGas: {
    checkDelegateForAll(
      delegate: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateForAll(
      delegate: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDelegatesForAll(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegationsByDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeAllDelegates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkDelegateForAll(
      delegate: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateForAll(
      delegate: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDelegatesForAll(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegationsByDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAllDelegates(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
