/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IWalletLinkInterface extends utils.Interface {
  functions: {
    "checkIfLinked(address,address)": FunctionFragment;
    "getLatestNonceForRootKey(address)": FunctionFragment;
    "getLatestRemoveNonceForRootKey(address)": FunctionFragment;
    "getLatestRemoveNonceForWallet(address)": FunctionFragment;
    "getRootKeyForWallet(address)": FunctionFragment;
    "getWalletsByRootKey(address)": FunctionFragment;
    "linkWalletToRootKey(address,bytes,address,bytes,uint256)": FunctionFragment;
    "removeLinkViaRootKey(address,bytes,address,uint256)": FunctionFragment;
    "removeLinkViaWallet(address,bytes,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkIfLinked"
      | "getLatestNonceForRootKey"
      | "getLatestRemoveNonceForRootKey"
      | "getLatestRemoveNonceForWallet"
      | "getRootKeyForWallet"
      | "getWalletsByRootKey"
      | "linkWalletToRootKey"
      | "removeLinkViaRootKey"
      | "removeLinkViaWallet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkIfLinked",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestNonceForRootKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestRemoveNonceForRootKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestRemoveNonceForWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRootKeyForWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletsByRootKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWalletToRootKey",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkViaRootKey",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkViaWallet",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkIfLinked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestNonceForRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestRemoveNonceForRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestRemoveNonceForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootKeyForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletsByRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkWalletToRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkViaRootKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkViaWallet",
    data: BytesLike
  ): Result;

  events: {
    "LinkWalletToRootKey(address,address)": EventFragment;
    "RemoveLinkViaRootKey(address,address)": EventFragment;
    "RemoveLinkViaWallet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LinkWalletToRootKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLinkViaRootKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLinkViaWallet"): EventFragment;
}

export interface LinkWalletToRootKeyEventObject {
  wallet: string;
  rootKey: string;
}
export type LinkWalletToRootKeyEvent = TypedEvent<
  [string, string],
  LinkWalletToRootKeyEventObject
>;

export type LinkWalletToRootKeyEventFilter =
  TypedEventFilter<LinkWalletToRootKeyEvent>;

export interface RemoveLinkViaRootKeyEventObject {
  wallet: string;
  rootKey: string;
}
export type RemoveLinkViaRootKeyEvent = TypedEvent<
  [string, string],
  RemoveLinkViaRootKeyEventObject
>;

export type RemoveLinkViaRootKeyEventFilter =
  TypedEventFilter<RemoveLinkViaRootKeyEvent>;

export interface RemoveLinkViaWalletEventObject {
  wallet: string;
  rootKey: string;
}
export type RemoveLinkViaWalletEvent = TypedEvent<
  [string, string],
  RemoveLinkViaWalletEventObject
>;

export type RemoveLinkViaWalletEventFilter =
  TypedEventFilter<RemoveLinkViaWalletEvent>;

export interface IWalletLink extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWalletLinkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestRemoveNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestRemoveNonceForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { rootKey: string }>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { wallets: string[] }>;

    linkWalletToRootKey(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLinkViaRootKey(
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLinkViaWallet(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkIfLinked(
    rootKey: PromiseOrValue<string>,
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLatestNonceForRootKey(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLatestRemoveNonceForRootKey(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLatestRemoveNonceForWallet(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRootKeyForWallet(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWalletsByRootKey(
    rootKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  linkWalletToRootKey(
    wallet: PromiseOrValue<string>,
    walletSignature: PromiseOrValue<BytesLike>,
    rootKey: PromiseOrValue<string>,
    rootKeySignature: PromiseOrValue<BytesLike>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLinkViaRootKey(
    rootKey: PromiseOrValue<string>,
    rootKeySignature: PromiseOrValue<BytesLike>,
    wallet: PromiseOrValue<string>,
    removeNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLinkViaWallet(
    wallet: PromiseOrValue<string>,
    walletSignature: PromiseOrValue<BytesLike>,
    rootKey: PromiseOrValue<string>,
    removeNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestRemoveNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestRemoveNonceForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    linkWalletToRootKey(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLinkViaRootKey(
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLinkViaWallet(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LinkWalletToRootKey(address,address)"(
      wallet?: null,
      rootKey?: null
    ): LinkWalletToRootKeyEventFilter;
    LinkWalletToRootKey(
      wallet?: null,
      rootKey?: null
    ): LinkWalletToRootKeyEventFilter;

    "RemoveLinkViaRootKey(address,address)"(
      wallet?: null,
      rootKey?: null
    ): RemoveLinkViaRootKeyEventFilter;
    RemoveLinkViaRootKey(
      wallet?: null,
      rootKey?: null
    ): RemoveLinkViaRootKeyEventFilter;

    "RemoveLinkViaWallet(address,address)"(
      wallet?: null,
      rootKey?: null
    ): RemoveLinkViaWalletEventFilter;
    RemoveLinkViaWallet(
      wallet?: null,
      rootKey?: null
    ): RemoveLinkViaWalletEventFilter;
  };

  estimateGas: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestRemoveNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestRemoveNonceForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkWalletToRootKey(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLinkViaRootKey(
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLinkViaWallet(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkIfLinked(
      rootKey: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestRemoveNonceForRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestRemoveNonceForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRootKeyForWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletsByRootKey(
      rootKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkWalletToRootKey(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLinkViaRootKey(
      rootKey: PromiseOrValue<string>,
      rootKeySignature: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLinkViaWallet(
      wallet: PromiseOrValue<string>,
      walletSignature: PromiseOrValue<BytesLike>,
      rootKey: PromiseOrValue<string>,
      removeNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
