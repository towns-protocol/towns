/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITownArchitect,
  ITownArchitectInterface,
} from "../ITownArchitect";

const _abi = [
  {
    type: "function",
    name: "computeTown",
    inputs: [
      {
        name: "townId",
        type: "string",
        internalType: "string",
      },
      {
        name: "membership",
        type: "tuple",
        internalType: "struct ITownArchitectBase.Membership",
        components: [
          {
            name: "settings",
            type: "tuple",
            internalType: "struct IMembershipBase.MembershipInfo",
            components: [
              {
                name: "name",
                type: "string",
                internalType: "string",
              },
              {
                name: "symbol",
                type: "string",
                internalType: "string",
              },
              {
                name: "price",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "maxSupply",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "duration",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "currency",
                type: "address",
                internalType: "address",
              },
              {
                name: "feeRecipient",
                type: "address",
                internalType: "address",
              },
              {
                name: "freeAllocation",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "pricingModule",
                type: "address",
                internalType: "address",
              },
            ],
          },
          {
            name: "requirements",
            type: "tuple",
            internalType: "struct ITownArchitectBase.MembershipRequirements",
            components: [
              {
                name: "everyone",
                type: "bool",
                internalType: "bool",
              },
              {
                name: "tokens",
                type: "tuple[]",
                internalType: "struct ITokenEntitlement.ExternalToken[]",
                components: [
                  {
                    name: "contractAddress",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "quantity",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "isSingleToken",
                    type: "bool",
                    internalType: "bool",
                  },
                  {
                    name: "tokenIds",
                    type: "uint256[]",
                    internalType: "uint256[]",
                  },
                ],
              },
              {
                name: "users",
                type: "address[]",
                internalType: "address[]",
              },
            ],
          },
          {
            name: "permissions",
            type: "string[]",
            internalType: "string[]",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createTown",
    inputs: [
      {
        name: "townInfo",
        type: "tuple",
        internalType: "struct ITownArchitectBase.TownInfo",
        components: [
          {
            name: "id",
            type: "string",
            internalType: "string",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "uri",
            type: "string",
            internalType: "string",
          },
          {
            name: "membership",
            type: "tuple",
            internalType: "struct ITownArchitectBase.Membership",
            components: [
              {
                name: "settings",
                type: "tuple",
                internalType: "struct IMembershipBase.MembershipInfo",
                components: [
                  {
                    name: "name",
                    type: "string",
                    internalType: "string",
                  },
                  {
                    name: "symbol",
                    type: "string",
                    internalType: "string",
                  },
                  {
                    name: "price",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "maxSupply",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "duration",
                    type: "uint64",
                    internalType: "uint64",
                  },
                  {
                    name: "currency",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "feeRecipient",
                    type: "address",
                    internalType: "address",
                  },
                  {
                    name: "freeAllocation",
                    type: "uint256",
                    internalType: "uint256",
                  },
                  {
                    name: "pricingModule",
                    type: "address",
                    internalType: "address",
                  },
                ],
              },
              {
                name: "requirements",
                type: "tuple",
                internalType:
                  "struct ITownArchitectBase.MembershipRequirements",
                components: [
                  {
                    name: "everyone",
                    type: "bool",
                    internalType: "bool",
                  },
                  {
                    name: "tokens",
                    type: "tuple[]",
                    internalType: "struct ITokenEntitlement.ExternalToken[]",
                    components: [
                      {
                        name: "contractAddress",
                        type: "address",
                        internalType: "address",
                      },
                      {
                        name: "quantity",
                        type: "uint256",
                        internalType: "uint256",
                      },
                      {
                        name: "isSingleToken",
                        type: "bool",
                        internalType: "bool",
                      },
                      {
                        name: "tokenIds",
                        type: "uint256[]",
                        internalType: "uint256[]",
                      },
                    ],
                  },
                  {
                    name: "users",
                    type: "address[]",
                    internalType: "address[]",
                  },
                ],
              },
              {
                name: "permissions",
                type: "string[]",
                internalType: "string[]",
              },
            ],
          },
          {
            name: "channel",
            type: "tuple",
            internalType: "struct ITownArchitectBase.ChannelInfo",
            components: [
              {
                name: "id",
                type: "string",
                internalType: "string",
              },
              {
                name: "metadata",
                type: "string",
                internalType: "string",
              },
            ],
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "gateByToken",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "quantity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getTokenIdByTown",
    inputs: [
      {
        name: "town",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTokenIdByTownId",
    inputs: [
      {
        name: "townId",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTownArchitectImplementations",
    inputs: [],
    outputs: [
      {
        name: "townToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "userEntitlementImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenEntitlementImplementation",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTownById",
    inputs: [
      {
        name: "townId",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isTokenGated",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isTown",
    inputs: [
      {
        name: "town",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setTownArchitectImplementations",
    inputs: [
      {
        name: "townToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "userEntitlementImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenEntitlementImplementation",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ungateByToken",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "TownCreated",
    inputs: [
      {
        name: "townCreator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "townId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "town",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "TownArchitect__InvalidAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "TownArchitect__InvalidNetworkId",
    inputs: [],
  },
  {
    type: "error",
    name: "TownArchitect__InvalidStringLength",
    inputs: [],
  },
  {
    type: "error",
    name: "TownArchitect__NotContract",
    inputs: [],
  },
] as const;

export class ITownArchitect__factory {
  static readonly abi = _abi;
  static createInterface(): ITownArchitectInterface {
    return new utils.Interface(_abi) as ITownArchitectInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITownArchitect {
    return new Contract(address, _abi, signerOrProvider) as ITownArchitect;
  }
}
