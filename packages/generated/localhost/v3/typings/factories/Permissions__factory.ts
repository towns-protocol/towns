/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Permissions, PermissionsInterface } from "../Permissions";

const _abi = [
  {
    inputs: [],
    name: "AddRemoveChannels",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Ban",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Invite",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ModifySpaceSettings",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Owner",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PinMessage",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Ping",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Read",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Redact",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Upgrade",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Write",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6102c761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c806384b6a2c51161007b57806384b6a2c51461019d57806387416c81146101c657806397deb47b146101eb578063a770741d1461020e578063b4a99a4e14610232578063ca6e822d1461025657600080fd5b806321f21ffc146100b8578063307c8705146100f057806340aae9c5146101155780634c7eb080146101475780636f2d71ce14610177575b600080fd5b6100da604051806040016040528060038152602001622130b760e91b81525081565b6040516100e79190610279565b60405180910390f35b6100da604051806040016040528060068152602001651499591858dd60d21b81525081565b6100da604051806040016040528060138152602001724d6f64696679537061636553657474696e677360681b81525081565b6100da6040518060400160405280601181526020017041646452656d6f76654368616e6e656c7360781b81525081565b6100da604051806040016040528060078152602001665570677261646560c81b81525081565b6100da6040518060400160405280600a81526020016950696e4d65737361676560b01b81525081565b6100da60405180604001604052806006815260200165496e7669746560d01b81525081565b6100da604051806040016040528060048152602001631499585960e21b81525081565b6100da60405180604001604052806005815260200164577269746560d81b81525081565b6100da6040518060400160405280600581526020016427bbb732b960d91b81525081565b6100da6040518060400160405280600481526020016350696e6760e01b81525081565b600060208083528351808285015260005b818110156102a65785810183015185820160400152820161028a565b506000604082860101526040601f19601f830116850101925050509291505056";

type PermissionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermissionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Permissions__factory extends ContractFactory {
  constructor(...args: PermissionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Permissions> {
    return super.deploy(overrides || {}) as Promise<Permissions>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Permissions {
    return super.attach(address) as Permissions;
  }
  override connect(signer: Signer): Permissions__factory {
    return super.connect(signer) as Permissions__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermissionsInterface {
    return new utils.Interface(_abi) as PermissionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Permissions {
    return new Contract(address, _abi, signerOrProvider) as Permissions;
  }
}
