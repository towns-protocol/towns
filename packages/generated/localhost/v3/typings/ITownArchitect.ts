/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITownArchitectBase {
  export type RoleInfoStruct = {
    name: PromiseOrValue<string>;
    permissions: PromiseOrValue<string>[];
  };

  export type RoleInfoStructOutput = [string, string[]] & {
    name: string;
    permissions: string[];
  };

  export type MemberEntitlementStruct = {
    role: ITownArchitectBase.RoleInfoStruct;
    tokens: ITokenEntitlement.ExternalTokenStruct[];
    users: PromiseOrValue<string>[];
  };

  export type MemberEntitlementStructOutput = [
    ITownArchitectBase.RoleInfoStructOutput,
    ITokenEntitlement.ExternalTokenStructOutput[],
    string[]
  ] & {
    role: ITownArchitectBase.RoleInfoStructOutput;
    tokens: ITokenEntitlement.ExternalTokenStructOutput[];
    users: string[];
  };

  export type ChannelInfoStruct = {
    id: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
  };

  export type ChannelInfoStructOutput = [string, string] & {
    id: string;
    metadata: string;
  };

  export type TownInfoStruct = {
    id: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
    everyoneEntitlement: ITownArchitectBase.RoleInfoStruct;
    memberEntitlement: ITownArchitectBase.MemberEntitlementStruct;
    channel: ITownArchitectBase.ChannelInfoStruct;
  };

  export type TownInfoStructOutput = [
    string,
    string,
    string,
    ITownArchitectBase.RoleInfoStructOutput,
    ITownArchitectBase.MemberEntitlementStructOutput,
    ITownArchitectBase.ChannelInfoStructOutput
  ] & {
    id: string;
    name: string;
    uri: string;
    everyoneEntitlement: ITownArchitectBase.RoleInfoStructOutput;
    memberEntitlement: ITownArchitectBase.MemberEntitlementStructOutput;
    channel: ITownArchitectBase.ChannelInfoStructOutput;
  };
}

export declare namespace ITokenEntitlement {
  export type ExternalTokenStruct = {
    contractAddress: PromiseOrValue<string>;
    quantity: PromiseOrValue<BigNumberish>;
    isSingleToken: PromiseOrValue<boolean>;
    tokenIds: PromiseOrValue<BigNumberish>[];
  };

  export type ExternalTokenStructOutput = [
    string,
    BigNumber,
    boolean,
    BigNumber[]
  ] & {
    contractAddress: string;
    quantity: BigNumber;
    isSingleToken: boolean;
    tokenIds: BigNumber[];
  };
}

export interface ITownArchitectInterface extends utils.Interface {
  functions: {
    "computeTown(string)": FunctionFragment;
    "createTown((string,string,string,(string,string[]),((string,string[]),(address,uint256,bool,uint256[])[],address[]),(string,string)))": FunctionFragment;
    "gateByToken(address,uint256)": FunctionFragment;
    "getTokenIdByTownId(string)": FunctionFragment;
    "getTownArchitectImplementations()": FunctionFragment;
    "getTownById(string)": FunctionFragment;
    "isTokenGated(address)": FunctionFragment;
    "setTownArchitectImplementations(address,address,address)": FunctionFragment;
    "ungateByToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeTown"
      | "createTown"
      | "gateByToken"
      | "getTokenIdByTownId"
      | "getTownArchitectImplementations"
      | "getTownById"
      | "isTokenGated"
      | "setTownArchitectImplementations"
      | "ungateByToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeTown",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTown",
    values: [ITownArchitectBase.TownInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "gateByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdByTownId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTownArchitectImplementations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTownById",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenGated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTownArchitectImplementations",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ungateByToken",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeTown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gateByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdByTownId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTownArchitectImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTownById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenGated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTownArchitectImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ungateByToken",
    data: BytesLike
  ): Result;

  events: {
    "TownCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TownCreated"): EventFragment;
}

export interface TownCreatedEventObject {
  town: string;
}
export type TownCreatedEvent = TypedEvent<[string], TownCreatedEventObject>;

export type TownCreatedEventFilter = TypedEventFilter<TownCreatedEvent>;

export interface ITownArchitect extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITownArchitectInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeTown(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createTown(
      townInfo: ITownArchitectBase.TownInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gateByToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokenIdByTownId(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTownArchitectImplementations(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        townToken: string;
        userEntitlementImplementation: string;
        tokenEntitlementImplementation: string;
      }
    >;

    getTownById(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isTokenGated(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setTownArchitectImplementations(
      townToken: PromiseOrValue<string>,
      userEntitlementImplementation: PromiseOrValue<string>,
      tokenEntitlementImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ungateByToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  computeTown(
    townId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  createTown(
    townInfo: ITownArchitectBase.TownInfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gateByToken(
    token: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokenIdByTownId(
    townId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTownArchitectImplementations(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      townToken: string;
      userEntitlementImplementation: string;
      tokenEntitlementImplementation: string;
    }
  >;

  getTownById(
    townId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isTokenGated(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setTownArchitectImplementations(
    townToken: PromiseOrValue<string>,
    userEntitlementImplementation: PromiseOrValue<string>,
    tokenEntitlementImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ungateByToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    computeTown(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createTown(
      townInfo: ITownArchitectBase.TownInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    gateByToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenIdByTownId(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTownArchitectImplementations(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        townToken: string;
        userEntitlementImplementation: string;
        tokenEntitlementImplementation: string;
      }
    >;

    getTownById(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isTokenGated(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setTownArchitectImplementations(
      townToken: PromiseOrValue<string>,
      userEntitlementImplementation: PromiseOrValue<string>,
      tokenEntitlementImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ungateByToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TownCreated(address)"(
      town?: PromiseOrValue<string> | null
    ): TownCreatedEventFilter;
    TownCreated(town?: PromiseOrValue<string> | null): TownCreatedEventFilter;
  };

  estimateGas: {
    computeTown(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTown(
      townInfo: ITownArchitectBase.TownInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gateByToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokenIdByTownId(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTownArchitectImplementations(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTownById(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenGated(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTownArchitectImplementations(
      townToken: PromiseOrValue<string>,
      userEntitlementImplementation: PromiseOrValue<string>,
      tokenEntitlementImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ungateByToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeTown(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTown(
      townInfo: ITownArchitectBase.TownInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gateByToken(
      token: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokenIdByTownId(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTownArchitectImplementations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTownById(
      townId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenGated(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTownArchitectImplementations(
      townToken: PromiseOrValue<string>,
      userEntitlementImplementation: PromiseOrValue<string>,
      tokenEntitlementImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ungateByToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
