{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "limit",
            "type": "uint256"
          }
        ],
        "name": "CheckOperationsLimitReaced",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "operationIndex",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "checkOperationsLength",
            "type": "uint8"
          }
        ],
        "name": "InvalidCheckOperationIndex",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "leftOperationIndex",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "currentOperationIndex",
            "type": "uint8"
          }
        ],
        "name": "InvalidLeftOperationIndex",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "operationIndex",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "logicalOperationsLength",
            "type": "uint8"
          }
        ],
        "name": "InvalidLogicalOperationIndex",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "enum IEntitlementRule.CombinedOperationType",
            "name": "opType",
            "type": "uint8"
          }
        ],
        "name": "InvalidOperationType",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "rightOperationIndex",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "currentOperationIndex",
            "type": "uint8"
          }
        ],
        "name": "InvalidRightOperationIndex",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "limit",
            "type": "uint256"
          }
        ],
        "name": "LogicalOperationLimitReached",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "limit",
            "type": "uint256"
          }
        ],
        "name": "OperationsLimitReached",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "getCheckOperations",
        "outputs": [
          {
            "components": [
              {
                "internalType": "enum IEntitlementRule.CheckOperationType",
                "name": "opType",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "chainId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "contractAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "threshold",
                "type": "uint256"
              }
            ],
            "internalType": "struct IEntitlementRule.CheckOperation[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getLogicalOperations",
        "outputs": [
          {
            "components": [
              {
                "internalType": "enum IEntitlementRule.LogicalOperationType",
                "name": "logOpType",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "leftOperationIndex",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "rightOperationIndex",
                "type": "uint8"
              }
            ],
            "internalType": "struct IEntitlementRule.LogicalOperation[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getOperations",
        "outputs": [
          {
            "components": [
              {
                "internalType": "enum IEntitlementRule.CombinedOperationType",
                "name": "opType",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "index",
                "type": "uint8"
              }
            ],
            "internalType": "struct IEntitlementRule.Operation[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/crosschain/IEntitlementRule.sol": "IEntitlementRule"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":base64-sol/=lib/base64/",
      ":base64/=lib/base64/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/crosschain/IEntitlementRule.sol": {
      "keccak256": "0x56b75268b73e41bb2be5f3e89d02336df27e19e178956d4fb6ffa1ebd70c57ff",
      "license": "MIT",
      "urls": [
        "bzz-raw://a98f763f2dd6ac991db363901e495e51d82e20a888b9223418b7109b7fcf8663",
        "dweb:/ipfs/QmPjdxRMaL2A9eYdKC7ub1MqkCrh69thC5sK1v2WAjQEkT"
      ]
    }
  },
  "version": 1
}