{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_FunctionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_FunctionDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_FunctionFromSameFacetAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_ImmutableFacet",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "init",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidContract",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidFacet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidFacetCutAction",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidFacetCutLength",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          },
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_InvalidFacetRemoval",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidFacetSelectors",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidSelector",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_AlreadySupported",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Ownable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Ownable__ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Proxy__ImplementationIsNotContract",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "facetAddress",
                "type": "address"
              },
              {
                "internalType": "enum IDiamond.FacetCutAction",
                "name": "action",
                "type": "uint8"
              },
              {
                "internalType": "bytes4[]",
                "name": "functionSelectors",
                "type": "bytes4[]"
              }
            ],
            "indexed": false,
            "internalType": "struct IDiamond.FacetCut[]",
            "name": "facetCuts",
            "type": "tuple[]"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "init",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "initPayload",
            "type": "bytes"
          }
        ],
        "name": "DiamondCut",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "facetAddress",
                "type": "address"
              },
              {
                "internalType": "enum IDiamond.FacetCutAction",
                "name": "action",
                "type": "uint8"
              },
              {
                "internalType": "bytes4[]",
                "name": "functionSelectors",
                "type": "bytes4[]"
              }
            ],
            "internalType": "struct IDiamond.FacetCut[]",
            "name": "facetCuts",
            "type": "tuple[]"
          },
          {
            "internalType": "address",
            "name": "init",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "initPayload",
            "type": "bytes"
          }
        ],
        "name": "diamondCut",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "facetAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "facetAddresses",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "facetFunctionSelectors",
        "outputs": [
          {
            "internalType": "bytes4[]",
            "name": "",
            "type": "bytes4[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "facets",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "facet",
                "type": "address"
              },
              {
                "internalType": "bytes4[]",
                "name": "selectors",
                "type": "bytes4[]"
              }
            ],
            "internalType": "struct IDiamondLoupeStructs.Facet[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "devdoc": {
      "events": {
        "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "params": {
            "facetCuts": "Facet addresses and function selectors.",
            "init": "Address of contract or facet to execute initPayload.",
            "initPayload": "A function call, including function selector and arguments."
          }
        },
        "OwnershipTransferred(address,address)": {
          "details": "This emits when ownership of a contract changes."
        }
      },
      "kind": "dev",
      "methods": {
        "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "params": {
            "facetCuts": "Facet addresses and function selectors.",
            "init": "Address of contract or facet to execute initPayload.",
            "initPayload": "A function call, including function selector and arguments. Executed with delegatecall on init address."
          }
        },
        "facetAddress(bytes4)": {
          "details": "If facet is not found return address(0).",
          "params": {
            "selector": "The function selector."
          },
          "returns": {
            "_0": "facetAddress The facet address."
          }
        },
        "facetAddresses()": {
          "returns": {
            "_0": "facets The facet addresses."
          }
        },
        "facetFunctionSelectors(address)": {
          "params": {
            "facet": "The facet address."
          },
          "returns": {
            "_0": "selectors An array of function selectors."
          }
        },
        "facets()": {
          "returns": {
            "_0": "facetInfo An array of Facet structs."
          }
        },
        "owner()": {
          "returns": {
            "_0": "The address of the owner."
          }
        },
        "supportsInterface(bytes4)": {
          "details": "Has to be manually set by a facet at initialization.",
          "params": {
            "interfaceId": "The 4 bytes interface identifier, as specified in ERC-165"
          }
        },
        "transferOwnership(address)": {
          "details": "Set _newOwner to address(0) to renounce any ownership.",
          "params": {
            "_newOwner": "The address of the new owner of the contract"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "events": {
        "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "notice": "Event emitted when facets are added/removed/replaced"
        },
        "InterfaceAdded(bytes4)": {
          "notice": "Emitted when an interface is added to the contract via `_addInterface`."
        },
        "InterfaceRemoved(bytes4)": {
          "notice": "Emitted when an interface is removed from the contract via `_removeInterface`."
        }
      },
      "kind": "user",
      "methods": {
        "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "notice": "Add/replace/remove any number of functions and optionally execute a function with delegatecall"
        },
        "facetAddress(bytes4)": {
          "notice": "Gets the facet that supports the given selector."
        },
        "facetAddresses()": {
          "notice": "Get all the facet addresses used by a diamond."
        },
        "facetFunctionSelectors(address)": {
          "notice": "Gets all the function selectors supported by a specific facet."
        },
        "facets()": {
          "notice": "Gets all facet addresses and the selectors of supported functions."
        },
        "owner()": {
          "notice": "Get the address of the owner"
        },
        "supportsInterface(bytes4)": {
          "notice": "Returns true if this contract implements the interface"
        },
        "transferOwnership(address)": {
          "notice": "Set the address of the new owner of the contract"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "packages/contracts/src/towns/TownFactory.sol": "TownFactory"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/test/=lib/prb-test/src/",
      ":@towns/=node_modules/@towns/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":contracts/=packages/contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
      "license": "MIT",
      "urls": [
        "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
        "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    },
    "packages/contracts/src/diamond/Diamond.sol": {
      "keccak256": "0x9c554f7e1ceb1d77981191a3970b68ad549e3b5f32e4025fb39444ff7b2465f2",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://650c9f6258bf46dae853eea9a9a2175255e0e661987c0703d45e25d96760e98c",
        "dweb:/ipfs/QmduJzC42GHmTXFQxMzUu6caC7HPr8dKZZreKCymfAv77D"
      ]
    },
    "packages/contracts/src/diamond/DiamondBase.sol": {
      "keccak256": "0xdfb58b54938b65dbccd0e32bd8a1ceb2feb7b2e5e53b22840331e240ac26824f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f8821c889ff2dc150fd2d6997d371df14082c78516dde4f8a61fc5c89dc9bf2e",
        "dweb:/ipfs/QmQJ91bU5FEtArLg2uBSUvd5wLhhj3ApyeUSXR7CsHSyK9"
      ]
    },
    "packages/contracts/src/diamond/IDiamond.sol": {
      "keccak256": "0x0c42a7a49bd97b80da729467d943c19a3f859068f38504ab6acb7e90fc88be64",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c7417201588ddb0c7682a3d46e972a8fdb433f792484e042cd1ffe1268ddca2a",
        "dweb:/ipfs/QmRrpJX1PiGm214AhocX8C4fGQA9po9pUzrdHwDEJSWp9T"
      ]
    },
    "packages/contracts/src/diamond/facets/cut/DiamondCut.sol": {
      "keccak256": "0xf20dcad9c44dd05172617b1ca70b5c48528a5b75a950ce5579efebafc55034f9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://39c93c9ab065ac67655a699f20db41d5934c93039929207539dc87dac1d8a7d6",
        "dweb:/ipfs/QmWzM3FDLF4u45hyME3sBHRzGHKoggo4RBqTaiQHVK8A3k"
      ]
    },
    "packages/contracts/src/diamond/facets/cut/DiamondCutBase.sol": {
      "keccak256": "0x7de925593fcf9cc691e173ba7cc6657734278805c42a38b03cab113b7265b425",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2ca0e8cd7cb727ebf50c835b83d215fc11fbd30878ec1cf0748b4bd59e990011",
        "dweb:/ipfs/QmeZJx3yeKDnxVmVhcvVS59FQWDyvNev6gMhvz3w1ytmeF"
      ]
    },
    "packages/contracts/src/diamond/facets/cut/DiamondCutService.sol": {
      "keccak256": "0x7b29f14ee2aef63e35bee47cf99f81caff05f9bf0d20a05c9e8a18ce66c7faf1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://fddf8fa31f3f3365f62184ace7e7ef4701aa7c0ae330688b676743f48a1eedf8",
        "dweb:/ipfs/QmXHcAjrKsuiswyDbrGMDSLd69bgMLeB6iFFu5uDhHMuPR"
      ]
    },
    "packages/contracts/src/diamond/facets/cut/DiamondCutStorage.sol": {
      "keccak256": "0x3cf36b6969ab8d7e6d5e5c1a8f3c11e11e816e33c613d7348688905978696038",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://721c6299b843700935a816ffb8683e4c229a031fec4f2080d8329088f16f6b19",
        "dweb:/ipfs/QmU24KkiiZEk9o6WaSABLcrvrSxS96yZyHjGpwWr1jy5bU"
      ]
    },
    "packages/contracts/src/diamond/facets/cut/IDiamondCut.sol": {
      "keccak256": "0xa021842fac782d0a630ce55190bd623a3c1c590ec7495530539505e390002717",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6273de44f89673c53a1c8a7bb97aafb0bb68a3b2752c973e1511fe937f0a32b6",
        "dweb:/ipfs/QmPfJx17gye1NLHgJnKBKN5LEnZs7mhfBkyQ9H8xayfvcw"
      ]
    },
    "packages/contracts/src/diamond/facets/introspection/ERC165.sol": {
      "keccak256": "0x8887dd5af85db2c2f4c8d49bedfbb51e5f99e13cb827ab515225862a2f560ab0",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e8b29a31fd974b4d6c3018dd5f4189e98ef32f24e0ed1b9509c60436b92b4126",
        "dweb:/ipfs/QmeoG6qJC5Cqczb6N1mM9NqwisSEZuREEMxP5tbLy9xYe4"
      ]
    },
    "packages/contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x58edff5c7238d9d543c9611a4446c50128cb74f469d143d0f7828b9e22d278e7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://90c2ce08be09894c3ffc8ebdbb4c78d4c14e00fdcc2f6ccf12ea6b6ab067ad1f",
        "dweb:/ipfs/QmVg7hTxFt9Wt3ghGcY9ZxQuYPd99ujG1f9o7BnvhR15TZ"
      ]
    },
    "packages/contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x72914be58159f9ec8faa5a7c8709810a1f7bda462fb4a6df32bedee0cd34b53c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b83bb448fa26f3c93cdc4c2fd7eee40bdc7d8c7ad75e3dba7657b17d5f907e72",
        "dweb:/ipfs/QmVJPtFisvjynPovjNLh592tYA4zKzjZhe1uwpQXqScfcb"
      ]
    },
    "packages/contracts/src/diamond/facets/introspection/IntrospectionService.sol": {
      "keccak256": "0x70b3ae424e9897ded848cd25c851680d28625ef9ec25406e2d3d340ac72d9574",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d74acc7a30e548cc5b8c9fbb63eb3f806a6fa0dc8f96bc97672c5390ba36ce43",
        "dweb:/ipfs/QmQbFHy7w15Dm74emLiJTKTRnJKKVLrHN3e8b13XbfrMW5"
      ]
    },
    "packages/contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x08fb9c05b623a2f6ee8e3098a7d0e9b19e25eacb9735f66fa311ced1afafc121",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8a4b34a66b154861a60820ab9a7f225d043eb36e2f90234197146bbc4b5f191f",
        "dweb:/ipfs/QmSoYyPg2d1XsBeCsx1X9dvhBacjhZcqqgx8WDPJ3nYmB2"
      ]
    },
    "packages/contracts/src/diamond/facets/loupe/DiamondLoupe.sol": {
      "keccak256": "0x8255c2562cd52359313043a8fbfa673cea3dc2e714e64fc819f54bcf1eb301b7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8fb4c3f3878c01b07dfa6e298810324110c487bdd2cd7dbb0c2ba7b4cbb7d7ad",
        "dweb:/ipfs/QmaALM6PB48ZsWCSjPHkixqMfQc4NvhHQmsDb83rCquNyX"
      ]
    },
    "packages/contracts/src/diamond/facets/loupe/DiamondLoupeBase.sol": {
      "keccak256": "0x92ea62133dd367edf7489d27993bfa333d722200da79cc0a5b1ead7f76df69b3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://681aa06df382a55b07dd66d60e726a5b7740509554c73adc45288ebb7ff4e48e",
        "dweb:/ipfs/QmdKTs7pRQfd1US1PeA2SHcYDGeKATSp6Qd2BRpkBHXxsx"
      ]
    },
    "packages/contracts/src/diamond/facets/loupe/DiamondLoupeService.sol": {
      "keccak256": "0x7dee5edd983ccf195ba2b62e0305896901959d7a789afd4244f6147555da90e9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0a486767c33347fb45046bc35332f78ec3d1c0d603bdea205270073dd17413fb",
        "dweb:/ipfs/QmY9EPt74DPRWUxWGHAsGuU77En51dx8twPPadQ6bzQazL"
      ]
    },
    "packages/contracts/src/diamond/facets/loupe/IDiamondLoupe.sol": {
      "keccak256": "0xe69840ad83771a18ac0ed0745f1f9484dc1b6395d37b5d52eaf9d6d0b08c5144",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ab90f64a3b96a65fc3045fe699e0beb95bcb8ef95d698a9f2de01196a439a0b8",
        "dweb:/ipfs/QmZgMYdB8qc4q5axSDAqKY3Daog2yK2mjfWexM4C57RxFj"
      ]
    },
    "packages/contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0x181f9f571d19ceabaeeb7982b10db95a2065a98f5baa511942a8ebfc20938aa2",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://812d0ab1d77cc3b2c76314a5ff0c65a85ed6725380d50260863fbdb1049486fb",
        "dweb:/ipfs/QmWEreGaA8i3XeSaFRzKHV5Ux7ELR4EyeVT3c11pywreky"
      ]
    },
    "packages/contracts/src/diamond/facets/ownable/Ownable.sol": {
      "keccak256": "0x3608150d7013c863f4d29f05e0abe8974d6706f2b793a81fda3adec88d805cd9",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b0f75337d40c2be77ae02c1ee0ee285602692183cfc23e19ddad6fb47e3531c7",
        "dweb:/ipfs/QmTfBsKu4CDnVviiiXeJmWfztnU87fkpZcp1BEsA1thb98"
      ]
    },
    "packages/contracts/src/diamond/facets/ownable/OwnableBase.sol": {
      "keccak256": "0x60a28fea492bc100f389f832f42b54981a87ad141f66c3ead4f800768ca9278f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://736f15f33a090c8ef190f0ed0e58c4422d2557efcd71c63701e5d472c0f4ed5c",
        "dweb:/ipfs/QmdCtV2gBNrtKxEwAqzWRdUYLG5L1VDboUvwJzduFwBL4k"
      ]
    },
    "packages/contracts/src/diamond/facets/ownable/OwnableService.sol": {
      "keccak256": "0xc96ea2c75519d986a75fb86a1c3ec08794fee823c5303da8c03869bfb505185d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b19857cd8fe0c892052300a78ba670ae98048a42fc69f0d2da946c03dc671900",
        "dweb:/ipfs/QmVecFwkx6zhcn6MiCFoisMVWs6Y6t94n4H4Xwf5tSgdto"
      ]
    },
    "packages/contracts/src/diamond/facets/ownable/OwnableStorage.sol": {
      "keccak256": "0xf37c305730d5f4c38242252303efcf273a4e81554637e2346db593e45d6cd551",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b78ac1b163b9d8a9f39d47f86f3ec562398038c1ea217bdece38dbcd90b07a22",
        "dweb:/ipfs/QmQB25TBF1VSNtpfHBzfs8FLANeGoGfj7Zz5hQmzaE7zFH"
      ]
    },
    "packages/contracts/src/diamond/proxy/IProxy.sol": {
      "keccak256": "0x56c8fafe5e06a8ad2a80f19d0eb8ac68c8cd42fc00d8501cb65201849fb62799",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2767795c4790a270e44e882e237ceb68afbcb75d811a94a5f9c32c7e16cf8e4d",
        "dweb:/ipfs/QmSWLUpnNk2G7x1PscxecJD3mWbnXo2R7kAkF2qjjquW91"
      ]
    },
    "packages/contracts/src/diamond/proxy/Proxy.sol": {
      "keccak256": "0x633c279137c71720b2134030c8c9843adb5b34c90587c8c29b60d32ec9ba5353",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d73f89f3198fe2a65890d28648d64377ecee50caf2cd62a787c00aafe5b21708",
        "dweb:/ipfs/QmZnHjDoZBnmCqod18WPSm7jdREwy1f7yhuq7Z3RJmE6Jh"
      ]
    },
    "packages/contracts/src/towns/TownFactory.sol": {
      "keccak256": "0xec83d28c87ef671df6645ac632e18a0238d9fbeac29b9bd42ea4c305ce5ea4c8",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3a77d7e93f976a52c6ece468a46ff475d5c557af6c53f691b4c89c789c28e422",
        "dweb:/ipfs/QmSXNZ3yn5i22q2gArxDXrYxxhGKBCQCFSZz5PAQFrXGA3"
      ]
    }
  },
  "version": 1
}