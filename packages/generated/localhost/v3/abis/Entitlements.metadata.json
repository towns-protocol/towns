{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "EntitlementsService__EntitlementAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__EntitlementDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__ImmutableEntitlement",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__InvalidEntitlementAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__InvalidEntitlementInterface",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "TokenOwnable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlement",
            "type": "address"
          }
        ],
        "name": "addEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "entitlements",
            "type": "address[]"
          }
        ],
        "name": "addImmutableEntitlements",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlement",
            "type": "address"
          }
        ],
        "name": "getEntitlement",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "moduleAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "moduleType",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "isImmutable",
                "type": "bool"
              }
            ],
            "internalType": "struct IEntitlementsStructs.Entitlement",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getEntitlements",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "moduleAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "moduleType",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "isImmutable",
                "type": "bool"
              }
            ],
            "internalType": "struct IEntitlementsStructs.Entitlement[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToChannel",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToTown",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlement",
            "type": "address"
          }
        ],
        "name": "removeEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addEntitlement(address)": {
          "params": {
            "entitlement": "The entitlement to add"
          }
        },
        "addImmutableEntitlements(address[])": {
          "params": {
            "entitlements": "The entitlements to add"
          }
        },
        "getEntitlement(address)": {
          "params": {
            "entitlement": "The entitlement to get"
          },
          "returns": {
            "_0": "The entitlement module address"
          }
        },
        "getEntitlements()": {
          "returns": {
            "_0": "The entitlement modules"
          }
        },
        "isEntitledToChannel(string,address,string)": {
          "params": {
            "channelId": "The channel to check",
            "permission": "The permission to check",
            "user": "The user to check"
          },
          "returns": {
            "_0": "True if the user is entitled to the permission, false otherwise"
          }
        },
        "isEntitledToTown(address,string)": {
          "params": {
            "permission": "The permission to check",
            "user": "The user to check"
          },
          "returns": {
            "_0": "True if the user is entitled to the permission, false otherwise"
          }
        },
        "removeEntitlement(address)": {
          "params": {
            "entitlement": "The entitlement to remove"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addEntitlement(address)": {
          "notice": "Adds an entitlement to the town"
        },
        "addImmutableEntitlements(address[])": {
          "notice": "Allows the town owner to add immutable entitlements to the town"
        },
        "getEntitlement(address)": {
          "notice": "Gets an entitlement from the town"
        },
        "getEntitlements()": {
          "notice": "Gets all entitlements from the town"
        },
        "isEntitledToChannel(string,address,string)": {
          "notice": "Checks if a user is entitled to a permission in a channel"
        },
        "isEntitledToTown(address,string)": {
          "notice": "Checks if a user is entitled to a permission in the town"
        },
        "removeEntitlement(address)": {
          "notice": "Removes an entitlement from the town"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "packages/contracts/src/towns/facets/entitlements/Entitlements.sol": "Entitlements"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/test/=lib/prb-test/src/",
      ":@towns/=node_modules/@towns/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":contracts/=packages/contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
      "license": "MIT",
      "urls": [
        "bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
        "dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    },
    "packages/contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x58edff5c7238d9d543c9611a4446c50128cb74f469d143d0f7828b9e22d278e7",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://90c2ce08be09894c3ffc8ebdbb4c78d4c14e00fdcc2f6ccf12ea6b6ab067ad1f",
        "dweb:/ipfs/QmVg7hTxFt9Wt3ghGcY9ZxQuYPd99ujG1f9o7BnvhR15TZ"
      ]
    },
    "packages/contracts/src/diamond/facets/ownable/token/TokenOwnableService.sol": {
      "keccak256": "0x2c7c3a8dab7a2df427d8e2308479bda133ae087cad424f57158c2f80e4f6b002",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8c5aaebaf78cb9f0123c9b3c06a5ccdb36db5154afec9e58d69266ac2371d3d2",
        "dweb:/ipfs/QmaeK8XXgTNztuvK7forU3irLxCV7yjZTmx1Ms4zKP8RqB"
      ]
    },
    "packages/contracts/src/diamond/facets/ownable/token/TokenOwnableStorage.sol": {
      "keccak256": "0x2b2faf5bcef525168a81dae1dee57bb1bfc528eb9a0bacb1b3254947d309be53",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://688eebe7a7c0979410684bba7e8b141264bfc5a06464e49d87916be51447aee3",
        "dweb:/ipfs/QmbPHUGMG9tRrnRfRPE8LWySd1pgjb8c7G6mMzTS7VuRCY"
      ]
    },
    "packages/contracts/src/diamond/facets/pausable/PausableService.sol": {
      "keccak256": "0x52fcddf400039ee33960f3296578a31f420a5f689e45ce8f550058cbb5065346",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://965b0df3ccf92fbd2e9d8324ce0b7258c73d6b9a7ca4517d78f64bb838de4197",
        "dweb:/ipfs/QmZkcT61oD8xxYeMXF1dCK3mfHh5iHRow8URJfgvci4kXY"
      ]
    },
    "packages/contracts/src/diamond/facets/pausable/PausableStorage.sol": {
      "keccak256": "0x3a165ce6df5c2f3a4d02fb3feca8121cc697f418fb935520d5c6198141d9b44f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a53c0be8eb3bf4d4312c0f3a93c33772fef87ace9302320a881a810f3d04abfe",
        "dweb:/ipfs/QmUGj6BkHSHDVWP5DELc9tLP57myr5JbR7wm6dTqLb2jMA"
      ]
    },
    "packages/contracts/src/towns/entitlements/IEntitlement.sol": {
      "keccak256": "0x3f9ece409fddb53843218cb1a742face8577de97e9e9257f882d40c556ce0263",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3e0c6972be5a1b9f13bead1486f33e1264560cd5e70e44a2f225924846b47541",
        "dweb:/ipfs/Qmcqoufht7VmmUxpKTdZ9aHcs4sC6us45pirBaUqnL1VtH"
      ]
    },
    "packages/contracts/src/towns/facets/entitlements/Entitlements.sol": {
      "keccak256": "0xac4ba963d833b579b76b1ad4fbfbc0c3405c194c2e4776b1408f934c1336b364",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://50a666c56c533757b91189c93a5ca7d30cdfec3c6cd790fb628079067075b49a",
        "dweb:/ipfs/QmXQzeh2KzqB7pCESPYbAX7Maa7Bsx3ZgXLpAG8guM6yVK"
      ]
    },
    "packages/contracts/src/towns/facets/entitlements/EntitlementsBase.sol": {
      "keccak256": "0x74e24a0eaa41cd10264d0efc0e8850d241f54ec37477675b341a1d30b492c798",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3a46e5d6427d8ef5aaaa191fa841338f79a081cf37502215f35827ae13b68c8d",
        "dweb:/ipfs/QmeZRcLVY5TEFGBJ4zg9y3i7ynA6Lj19wHA6u7ZEXka5ki"
      ]
    },
    "packages/contracts/src/towns/facets/entitlements/EntitlementsService.sol": {
      "keccak256": "0x438ea6c27084f09c737e027e42643debb64bddc8a3a06bf2ceb0341406dc98e6",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://21d883948be017290dcd5235d400db352c301c96c6e887e6f9a13316c4e11656",
        "dweb:/ipfs/QmdPQh7YvEFiFhFbC59n5ziSaYMeZVPEE5xh1mQEfhEcPc"
      ]
    },
    "packages/contracts/src/towns/facets/entitlements/EntitlementsStorage.sol": {
      "keccak256": "0x6a8cd3a19ff1c836849d48be28f94b08f2864b4f26823a3af3e5741ff106a2a1",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3950f0448e01b6dbe94b4e3ea84ff8c5bc5d3da4966c1e848da5d40738b0a647",
        "dweb:/ipfs/QmbTtp8PdYYZbsuuseRVJeUVQHUKJwfwDXWqtFQRDz9yDp"
      ]
    },
    "packages/contracts/src/towns/facets/entitlements/IEntitlements.sol": {
      "keccak256": "0xda53380106ba136165aecd967565b11d43893adad98961bf5930843e42a0a71e",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://89302f9533f5c357a05a013f510a245de4a078eefb7eef5052a01659b46a02fa",
        "dweb:/ipfs/Qma2qXeX1NzhruByPEHcwXQ329LnjLp53RrzAGNYd9r2SW"
      ]
    }
  },
  "version": 1
}