{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "Initializable_InInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_NotInInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_AlreadySupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_NotSupported",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "name": "LinkAlreadyExists",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ],
        "name": "LinkForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          }
        ],
        "name": "RevokeAllLinks",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "name": "RevokeLink",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "__WalletLink_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          }
        ],
        "name": "checkLinkForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "name": "getLinksByRootKey",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "wallet",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "rootKey",
                "type": "address"
              }
            ],
            "internalType": "struct IWalletLinkBase.WalletLinkInfo[]",
            "name": "info",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wallet",
            "type": "address"
          }
        ],
        "name": "getLinksForAll",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "delegates",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ],
        "name": "linkForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "revokeAllLinks",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "rootKey",
            "type": "address"
          }
        ],
        "name": "revokeLink",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "checkLinkForAll(address,address)": {
          "params": {
            "rootKey": "The key to act on your behalf",
            "wallet": "The wallet who issued the linking"
          }
        },
        "getLinksByRootKey(address)": {
          "params": {
            "rootKey": "The rootKey to query"
          },
          "returns": {
            "info": "An array of linking info"
          }
        },
        "getLinksForAll(address)": {
          "params": {
            "wallet": "The wallet who issued the link"
          },
          "returns": {
            "delegates": "addresses Array root keys for a given wallet"
          }
        },
        "linkForAll(address,bool)": {
          "params": {
            "rootKey": "The key to link",
            "value": "Whether to enable or disable linking for this address"
          }
        },
        "revokeLink(address)": {
          "params": {
            "rootKey": "The key to revoke"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "events": {
        "InterfaceAdded(bytes4)": {
          "notice": "Emitted when an interface is added to the contract via `_addInterface`."
        },
        "InterfaceRemoved(bytes4)": {
          "notice": "Emitted when an interface is removed from the contract via `_removeInterface`."
        },
        "LinkForAll(address,address,bool)": {
          "notice": "Emitted when a user links their wallet to a rootKey"
        },
        "RevokeAllLinks(address)": {
          "notice": "Emitted when a user revokes all links for a given wallet"
        },
        "RevokeLink(address,address)": {
          "notice": "Emitted when a user revokes a single link for a given rootKey"
        }
      },
      "kind": "user",
      "methods": {
        "checkLinkForAll(address,address)": {
          "notice": "Returns true if the root key is linked to a wallet"
        },
        "getLinksByRootKey(address)": {
          "notice": "Get all links for a given rootKey"
        },
        "getLinksForAll(address)": {
          "notice": "Returns an array of root keys for a given wallet"
        },
        "revokeAllLinks()": {
          "notice": "Revoke all root keys for a given wallet"
        },
        "revokeLink(address)": {
          "notice": "Revoke a specific rootKey for all their permissions"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/river/wallet-link/WalletLink.sol": "WalletLink"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/diamond/facets/Facet.sol": {
      "keccak256": "0x8213b85d1271bc3c2aa9842979c8ad825066c4c9addc55296d53b6747e5198ba",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b4e88e869c99e65f0caeb9d03938e78c578a869783b9f20c05f4ba52e7ca493d",
        "dweb:/ipfs/QmRqPmg8BYD1V6Cd8kfihCQ7nn2DAsgRjGW2MJvc7Evnjt"
      ]
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0x2a4f3a99b3b3ac6c2c18431cea80b40774c1d8265ddefac21b26da561e069096",
      "license": "MIT",
      "urls": [
        "bzz-raw://36dbba730942b1fd345f242051ea7f33e979f70392fbd929d8522c0c9c6dd367",
        "dweb:/ipfs/QmYMvYnvg9zQJpDQX9yMHZ1AET9Vx7UXtDenXAs1JhfPpd"
      ]
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0x99dfe047dbb8df48a7490f63939420dd990fb5fd3b3a03c42d0cb9c6f4f9eefa",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://5e8f6d4bff257324e4544cacadd9fee42bada459f457fb707fef90bcfe0e895a",
        "dweb:/ipfs/QmYWEam5VcMt5ViNMKRkaxoD84MK2MewS5iWwSES589Vma"
      ]
    },
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0xa1dfa0449031fced106dd105c184823595398c876be53b4bb8d855937a435816",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e98a9007bca24776e4580c9326cfbb72ffe56334229626c336545be8c2c6e6d2",
        "dweb:/ipfs/QmdqoQTUoDKqirUR3hscy4zBh4Kn2E1fRta1y9DfA43urV"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x503b6ce030f8a760e9a877545b35307d05bbb704b501095795ab2168fe40db59",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://769658fed18c26f67dec9bf4ca18dd595c0343bc8ea21bb3e50595eca3401265",
        "dweb:/ipfs/QmVuqWH5eKqBJbNEtXzybgZ7ahtjTraMew8CMb4TuVUyo6"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0xd2ec3bbe4d15f9232006b41e0a80a5127006243ee596754af77bd3926045782a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8c47e18bfd34a687ce9ec75dc1f1fa5bca088e97e59aad2ac3fdb0989d06d7e6",
        "dweb:/ipfs/QmdktQXV7PKABzh43SZqemdTG25RxMaMsgpXTTUvZUxmfU"
      ]
    },
    "contracts/src/river/wallet-link/IWalletLink.sol": {
      "keccak256": "0x55056d8c33d306d825087137ec49cdc88573c234e01d2749e375595f34f6ddcb",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://44122b19aba4c29b483582b18369a24d8f2fcd8a78badeab21bea14c03d1084b",
        "dweb:/ipfs/QmanmowuphtajanSvPn6FEj6yBqaFahe5ZmL5zT3cuymcB"
      ]
    },
    "contracts/src/river/wallet-link/WalletLink.sol": {
      "keccak256": "0x7c73f071ba5587088f222d43b149e79fa2106cb2acafac6794d28ac3111e0955",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://43cde34b4e4fe7a0ff6ffd2bd23626cc6dedcd9f89b04e197462cd34070b01e2",
        "dweb:/ipfs/QmTZFrT5nJowsuj8YQAg2aBBFgUvUEr2q4GvdXy6rZn68b"
      ]
    },
    "contracts/src/river/wallet-link/WalletLinkBase.sol": {
      "keccak256": "0x68abbc0b95d581cb379a00d44857b49ea76fb73471e0fc2e6d94ae88e4dc9d9a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e1ada9dab60c6ac7c375d55bfe204e690aefa588980b696bcd3cd83860e91157",
        "dweb:/ipfs/QmXV5Yzqo4kiv6iJFJGAWFRA64ZtXf2Fn8CgLf6VJpBLFi"
      ]
    },
    "contracts/src/river/wallet-link/WalletLinkStorage.sol": {
      "keccak256": "0x703ba3febe9ddcea9434178f3967ffdcde15b0deac63f8ef97012f9173f88619",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4cc2929401d51bd7251320f570af89a1823528b6696218e5828b514e48175332",
        "dweb:/ipfs/QmWbhECVjjY6mqhSe6V6g3wqAARDkmMHcVKzgnhpgrVjaS"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
      "license": "MIT",
      "urls": [
        "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
        "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    }
  },
  "version": 1
}