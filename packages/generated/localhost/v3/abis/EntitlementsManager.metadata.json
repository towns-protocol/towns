{
  "compiler": {
    "version": "0.8.23+commit.f704f362"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "Entitlement__InvalidValue",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__ValueAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__EntitlementAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__EntitlementDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__ImmutableEntitlement",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__InvalidEntitlementAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__InvalidEntitlementInterface",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Ownable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Ownable__ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Pausable__NotPaused",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Pausable__Paused",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Paused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Unpaused",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlement",
            "type": "address"
          }
        ],
        "name": "addEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "entitlements",
            "type": "address[]"
          }
        ],
        "name": "addImmutableEntitlements",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlement",
            "type": "address"
          }
        ],
        "name": "getEntitlement",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "moduleAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "moduleType",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "isImmutable",
                "type": "bool"
              }
            ],
            "internalType": "struct IEntitlementsManagerBase.Entitlement",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getEntitlements",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "moduleAddress",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "moduleType",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "isImmutable",
                "type": "bool"
              }
            ],
            "internalType": "struct IEntitlementsManagerBase.Entitlement[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "channelId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToChannel",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "permission",
            "type": "string"
          }
        ],
        "name": "isEntitledToTown",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "entitlement",
            "type": "address"
          }
        ],
        "name": "removeEntitlementModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "events": {
        "OwnershipTransferred(address,address)": {
          "details": "This emits when ownership of a contract changes."
        }
      },
      "kind": "dev",
      "methods": {
        "addEntitlementModule(address)": {
          "params": {
            "entitlement": "The entitlement to add"
          }
        },
        "addImmutableEntitlements(address[])": {
          "params": {
            "entitlements": "The entitlements to add"
          }
        },
        "getEntitlement(address)": {
          "params": {
            "entitlement": "The entitlement to get"
          },
          "returns": {
            "_0": "The entitlement module address"
          }
        },
        "getEntitlements()": {
          "returns": {
            "_0": "The entitlement modules"
          }
        },
        "isEntitledToChannel(string,address,string)": {
          "params": {
            "channelId": "The channel to check",
            "permission": "The permission to check",
            "user": "The user to check"
          },
          "returns": {
            "_0": "True if the user is entitled to the permission, false otherwise"
          }
        },
        "isEntitledToTown(address,string)": {
          "params": {
            "permission": "The permission to check",
            "user": "The user to check"
          },
          "returns": {
            "_0": "True if the user is entitled to the permission, false otherwise"
          }
        },
        "removeEntitlementModule(address)": {
          "params": {
            "entitlement": "The entitlement to remove"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addEntitlementModule(address)": {
          "notice": "Adds an entitlement to the town"
        },
        "addImmutableEntitlements(address[])": {
          "notice": "Allows the town owner to add immutable entitlements to the town"
        },
        "getEntitlement(address)": {
          "notice": "Gets an entitlement from the town"
        },
        "getEntitlements()": {
          "notice": "Gets all entitlements from the town"
        },
        "isEntitledToChannel(string,address,string)": {
          "notice": "Checks if a user is entitled to a permission in a channel"
        },
        "isEntitledToTown(address,string)": {
          "notice": "Checks if a user is entitled to a permission in the town"
        },
        "removeEntitlementModule(address)": {
          "notice": "Removes an entitlement from the town"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/towns/facets/entitlements/EntitlementsManager.sol": "EntitlementsManager"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/math/=lib/prb-math/src/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64-sol/=lib/base64/",
      ":base64/=lib/base64/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-math/=lib/prb-math/src/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x243cfeefa64ba07bee887b0b03704147f9bd2f25571272a6ebca3ba684af1b00",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1aed67ea7251fad9dbfb58a30f59f7edd81d48d7f6b193b98f957be359653361",
        "dweb:/ipfs/QmQauJL4nFMN3QDutjWezRbBjLX5GsTWt5jeLfkX4JW64T"
      ]
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0xec6475a73e1229430edadb6fd3e32f1599ebb8af78dbbc762d54ded196e534ae",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://46e9fef226666c827f408b5d2c9061600fa5233ddf5fcbc3a2b8956d89e8a872",
        "dweb:/ipfs/Qmd6L6wtehyrD8XwKqFD7gG5hJxsBZ1ja6hGSf2dtN4XEx"
      ]
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableBase.sol": {
      "keccak256": "0xbffe7fd92487ba2adb0de49b426461e0723c2ae2359dd2efcaad75f575c59e53",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2f3003c9108148f11e3c4c953cfe2851e913136eefe32a8fa8f713ece234f0e3",
        "dweb:/ipfs/QmY3JSeaqW2FCBs4CbrVmzBPcGhMLC4eyktxiCRY8whsBa"
      ]
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableStorage.sol": {
      "keccak256": "0x86c57b4dfccdc7459dfb4398d71f41152936ba9081ec29a75a3cc29a3be2c324",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6e3c65245cba71e68a1c5ab9b5298192ad80413643c3afbb61eba1d016472152",
        "dweb:/ipfs/QmdzCeszA4s9x7de1SzJwYpYjJto83sG3yJZ7XUPAn4suD"
      ]
    },
    "contracts/src/diamond/facets/pausable/IPausable.sol": {
      "keccak256": "0xd5cc8d743bd12bbd23526178c11808634527c87e2f6da29dfb6aec75dab56261",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c893da163481570ae2e00e5deae732404261cc0e7143fdc0448145810448c6b6",
        "dweb:/ipfs/QmbyUkcew8vmUXPVLDJ7GjvxMkmTqjhKZWLDYtWEPzZ2SM"
      ]
    },
    "contracts/src/diamond/facets/pausable/PausableBase.sol": {
      "keccak256": "0xa278c9cdc622351a088d6d96759a51972b1720ef72424f1f98e5822dd9fd6438",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://379dabb0f68319e89d4b7447c31d5a3d0d2b4ecbce92b07f6e096974f2541c6c",
        "dweb:/ipfs/QmPQPKBYtuNiFDNh9nGCJGtLXP2AqPLkZ7BBTKgQZeaVH1"
      ]
    },
    "contracts/src/diamond/facets/pausable/PausableStorage.sol": {
      "keccak256": "0xe0bbe1c804385ae11c7e0d1054637ee12457f014dec5db1bef77dc0fd3eccbaf",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8f55e470bd7a15f75875ab25705ac584f1184bc289e13e4f0282ba6167c2f5bf",
        "dweb:/ipfs/QmZumkrGnv5ty65vm7srPLGSzBTua5vJsrSuJcgajMH4JR"
      ]
    },
    "contracts/src/towns/entitlements/IEntitlement.sol": {
      "keccak256": "0x4c8f742aa72fca719c998b8f2b4b64426bbc4ae398c4ee7813bae46686c5308d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4d7bf00a043fd22d62db617c793f3a2fa92a12d8e6421e82dd10a8b5eaa0e611",
        "dweb:/ipfs/QmapnmASApBNwJcX637MyDpVPeSvibSfZo7xHCa5ZU5esR"
      ]
    },
    "contracts/src/towns/facets/Entitled.sol": {
      "keccak256": "0xb7bd21a1076572bbcbac939f226834984a5a2878f58a22e5b5688d7c7ba1ebb4",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d7f752b93700def6c6edec3fb02da531510a0fc1f684c91c25eae9e4d61883dc",
        "dweb:/ipfs/QmR4FFEX2YS5NTFeEJStim9M7P4cUERfxuspv7j3DdjpQm"
      ]
    },
    "contracts/src/towns/facets/entitlements/EntitlementsManager.sol": {
      "keccak256": "0x448d0a5301d9caef288d8aa5c766d8e1f8b378b7bba880abeb4f9b94ff81dbc6",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b0286182557e64d265343b7d8ae2f4b138a1c8321c160211622a94c927c442e2",
        "dweb:/ipfs/QmWZH6Bw8tN44hvYHyNS8zCU71reeWccvmQUeQTJHEXPbj"
      ]
    },
    "contracts/src/towns/facets/entitlements/EntitlementsManagerBase.sol": {
      "keccak256": "0xe43a57bc1c5a2f30b62fa7033b4131b5e1aa2ee7803a1daa186437b840c54f85",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d4f0deb8c187f8561e5b5686cb9de2c693bbee39a6c6589d6ffd9580de56e3e3",
        "dweb:/ipfs/QmYgUJBMn7x5BVfMShn1S3JrVcrA59zhgbYZKi56zHBUhX"
      ]
    },
    "contracts/src/towns/facets/entitlements/EntitlementsManagerService.sol": {
      "keccak256": "0x8ddc14d37f77d37b9bb5baab01f435b73994afb72a62d7c7a564f559db27853b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4b0bfe5bd5d87aecb4e16b243b0e4c149aff97e16c57c99b8b29ba82c7361f7d",
        "dweb:/ipfs/QmVSX3f3kK9Ar36QxqwvD2PfEQ6ssonjABbwVNH6PuYyCA"
      ]
    },
    "contracts/src/towns/facets/entitlements/EntitlementsManagerStorage.sol": {
      "keccak256": "0x25d81d0f45e65e8c035ed41ac078ace43672a00829f5334b21c2ef23fc4f73ba",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8f621544a327bd541d20e9df4d73179123a96f7f11456b50ecf2f30409073e49",
        "dweb:/ipfs/Qmf5o4Gt9w1ySMi1bHveoaQ4aTQ4MHa6SoxGWTNgWDBpGw"
      ]
    },
    "contracts/src/towns/facets/entitlements/IEntitlementsManager.sol": {
      "keccak256": "0x4731be9df77a3290fd90e464d9f8d803ce66289fede460d86abab5d6e6f07db8",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://7f15dbbbc181369bf8b98feb5557a98def9109b042c865cfad7136a670c8cc50",
        "dweb:/ipfs/QmP47HACM3kVK5QXkjEmdr15q5zAVSa2Kr48UC5PddpJmu"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
      "license": "MIT",
      "urls": [
        "bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
        "dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    }
  },
  "version": 1
}