{
  "compiler": {
    "version": "0.8.23+commit.f704f362"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "ChannelService__ChannelDisabled",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ChannelService__ChannelDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ChannelService__RoleDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__InvalidValue",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__NotAllowed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Entitlement__ValueAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__EntitlementDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__InvalidEntitlementAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "EntitlementsService__InvalidEntitlementInterface",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Ownable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Ownable__ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Pausable__NotPaused",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Pausable__Paused",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__EntitlementAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__EntitlementDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__InvalidEntitlementAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__InvalidPermission",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__PermissionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__PermissionDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Roles__RoleDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Validator__InvalidByteLength",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Validator__InvalidStringLength",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Paused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "RoleCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "remover",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "RoleRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "updater",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "RoleUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Unpaused",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "string[]",
            "name": "permissions",
            "type": "string[]"
          }
        ],
        "name": "addPermissionsToRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct IRolesBase.CreateEntitlement",
            "name": "entitlement",
            "type": "tuple"
          }
        ],
        "name": "addRoleToEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "roleName",
            "type": "string"
          },
          {
            "internalType": "string[]",
            "name": "permissions",
            "type": "string[]"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct IRolesBase.CreateEntitlement[]",
            "name": "entitlements",
            "type": "tuple[]"
          }
        ],
        "name": "createRole",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getPermissionsByRoleId",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "permissions",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "getRoleById",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              },
              {
                "internalType": "string[]",
                "name": "permissions",
                "type": "string[]"
              },
              {
                "internalType": "address[]",
                "name": "entitlements",
                "type": "address[]"
              }
            ],
            "internalType": "struct IRolesBase.Role",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getRoles",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "string",
                "name": "name",
                "type": "string"
              },
              {
                "internalType": "bool",
                "name": "disabled",
                "type": "bool"
              },
              {
                "internalType": "string[]",
                "name": "permissions",
                "type": "string[]"
              },
              {
                "internalType": "address[]",
                "name": "entitlements",
                "type": "address[]"
              }
            ],
            "internalType": "struct IRolesBase.Role[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "string[]",
            "name": "permissions",
            "type": "string[]"
          }
        ],
        "name": "removePermissionsFromRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          }
        ],
        "name": "removeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct IRolesBase.CreateEntitlement",
            "name": "entitlement",
            "type": "tuple"
          }
        ],
        "name": "removeRoleFromEntitlement",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "roleId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "roleName",
            "type": "string"
          },
          {
            "internalType": "string[]",
            "name": "permissions",
            "type": "string[]"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "module",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct IRolesBase.CreateEntitlement[]",
            "name": "entitlements",
            "type": "tuple[]"
          }
        ],
        "name": "updateRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "events": {
        "OwnershipTransferred(address,address)": {
          "details": "This emits when ownership of a contract changes."
        }
      },
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/towns/facets/roles/Roles.sol": "Roles"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/math/=lib/prb-math/src/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64-sol/=lib/base64/",
      ":base64/=lib/base64/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-math/=lib/prb-math/src/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x243cfeefa64ba07bee887b0b03704147f9bd2f25571272a6ebca3ba684af1b00",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1aed67ea7251fad9dbfb58a30f59f7edd81d48d7f6b193b98f957be359653361",
        "dweb:/ipfs/QmQauJL4nFMN3QDutjWezRbBjLX5GsTWt5jeLfkX4JW64T"
      ]
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0xec6475a73e1229430edadb6fd3e32f1599ebb8af78dbbc762d54ded196e534ae",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://46e9fef226666c827f408b5d2c9061600fa5233ddf5fcbc3a2b8956d89e8a872",
        "dweb:/ipfs/Qmd6L6wtehyrD8XwKqFD7gG5hJxsBZ1ja6hGSf2dtN4XEx"
      ]
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableBase.sol": {
      "keccak256": "0xbffe7fd92487ba2adb0de49b426461e0723c2ae2359dd2efcaad75f575c59e53",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2f3003c9108148f11e3c4c953cfe2851e913136eefe32a8fa8f713ece234f0e3",
        "dweb:/ipfs/QmY3JSeaqW2FCBs4CbrVmzBPcGhMLC4eyktxiCRY8whsBa"
      ]
    },
    "contracts/src/diamond/facets/ownable/token/TokenOwnableStorage.sol": {
      "keccak256": "0x86c57b4dfccdc7459dfb4398d71f41152936ba9081ec29a75a3cc29a3be2c324",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6e3c65245cba71e68a1c5ab9b5298192ad80413643c3afbb61eba1d016472152",
        "dweb:/ipfs/QmdzCeszA4s9x7de1SzJwYpYjJto83sG3yJZ7XUPAn4suD"
      ]
    },
    "contracts/src/diamond/facets/pausable/IPausable.sol": {
      "keccak256": "0xd5cc8d743bd12bbd23526178c11808634527c87e2f6da29dfb6aec75dab56261",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://c893da163481570ae2e00e5deae732404261cc0e7143fdc0448145810448c6b6",
        "dweb:/ipfs/QmbyUkcew8vmUXPVLDJ7GjvxMkmTqjhKZWLDYtWEPzZ2SM"
      ]
    },
    "contracts/src/diamond/facets/pausable/PausableBase.sol": {
      "keccak256": "0xa278c9cdc622351a088d6d96759a51972b1720ef72424f1f98e5822dd9fd6438",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://379dabb0f68319e89d4b7447c31d5a3d0d2b4ecbce92b07f6e096974f2541c6c",
        "dweb:/ipfs/QmPQPKBYtuNiFDNh9nGCJGtLXP2AqPLkZ7BBTKgQZeaVH1"
      ]
    },
    "contracts/src/diamond/facets/pausable/PausableStorage.sol": {
      "keccak256": "0xe0bbe1c804385ae11c7e0d1054637ee12457f014dec5db1bef77dc0fd3eccbaf",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8f55e470bd7a15f75875ab25705ac584f1184bc289e13e4f0282ba6167c2f5bf",
        "dweb:/ipfs/QmZumkrGnv5ty65vm7srPLGSzBTua5vJsrSuJcgajMH4JR"
      ]
    },
    "contracts/src/towns/entitlements/IEntitlement.sol": {
      "keccak256": "0x4c8f742aa72fca719c998b8f2b4b64426bbc4ae398c4ee7813bae46686c5308d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4d7bf00a043fd22d62db617c793f3a2fa92a12d8e6421e82dd10a8b5eaa0e611",
        "dweb:/ipfs/QmapnmASApBNwJcX637MyDpVPeSvibSfZo7xHCa5ZU5esR"
      ]
    },
    "contracts/src/towns/facets/Entitled.sol": {
      "keccak256": "0xb7bd21a1076572bbcbac939f226834984a5a2878f58a22e5b5688d7c7ba1ebb4",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://d7f752b93700def6c6edec3fb02da531510a0fc1f684c91c25eae9e4d61883dc",
        "dweb:/ipfs/QmR4FFEX2YS5NTFeEJStim9M7P4cUERfxuspv7j3DdjpQm"
      ]
    },
    "contracts/src/towns/facets/Permissions.sol": {
      "keccak256": "0x71c581d53e94675ff22111bbdcb54d9238cb2476c1c87d22c1c8709643ca20c3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://33571102d8b2339eea4e68cdb4461e6c46617fa2597bc7fc9d3bd085ed3b8939",
        "dweb:/ipfs/QmPsppLQ4sXNwh9QC3hPw1wSdWDXKHsTbeqVPkz97F7KMd"
      ]
    },
    "contracts/src/towns/facets/channels/ChannelService.sol": {
      "keccak256": "0x22f9e7ea97ca227f8b66c31e57c461660cf8d263a8610ee7dddc8b4d76d37b6a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://704c33feb47cbf003b208542fefed16994844d1a257dd9aae5aba37d68eff89b",
        "dweb:/ipfs/QmPneP81FvenMqfToP1maHwZZZsK4tCa2nCkg8kBxFCbbM"
      ]
    },
    "contracts/src/towns/facets/channels/ChannelStorage.sol": {
      "keccak256": "0xc4cc020c9e87685f9642ac50fd2fde64e9c771c940dc54af147ca7b8320d24f4",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://473be4974bba4cf6aeec9ca9f69f2bfe20917a4314d2ca77294e3ce11b8a1f75",
        "dweb:/ipfs/QmWJDTP1NN6uzVGNALacRc2dLyGgAbqG1yGYXHVhUCpj83"
      ]
    },
    "contracts/src/towns/facets/entitlements/EntitlementsManagerService.sol": {
      "keccak256": "0x8ddc14d37f77d37b9bb5baab01f435b73994afb72a62d7c7a564f559db27853b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://4b0bfe5bd5d87aecb4e16b243b0e4c149aff97e16c57c99b8b29ba82c7361f7d",
        "dweb:/ipfs/QmVSX3f3kK9Ar36QxqwvD2PfEQ6ssonjABbwVNH6PuYyCA"
      ]
    },
    "contracts/src/towns/facets/entitlements/EntitlementsManagerStorage.sol": {
      "keccak256": "0x25d81d0f45e65e8c035ed41ac078ace43672a00829f5334b21c2ef23fc4f73ba",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://8f621544a327bd541d20e9df4d73179123a96f7f11456b50ecf2f30409073e49",
        "dweb:/ipfs/Qmf5o4Gt9w1ySMi1bHveoaQ4aTQ4MHa6SoxGWTNgWDBpGw"
      ]
    },
    "contracts/src/towns/facets/roles/IRoles.sol": {
      "keccak256": "0x914a4a0309bee60e391c5a4ee7fb587d8902940f87daa4e3445cf7955d1e68f5",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://90130798b400f16b42a951b70024b6655e33594b34c1e82fbb999ce5ea49fcb6",
        "dweb:/ipfs/QmeQNoribmDQ7S2PiQ3qNLCL1w6puAnuxWK3hz1w3ue2z9"
      ]
    },
    "contracts/src/towns/facets/roles/Roles.sol": {
      "keccak256": "0x12d31709c111d5e3f5744e86c8d069c804451ee43bcf78dab7284c3cfb5a5d7d",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://44272aec1681ea630552013a72cc573771d0eb2a80dbb755c1c275204e3d7800",
        "dweb:/ipfs/QmXP2mP9Vg2aGAodKVprfxxuDD1cuoK1d8ctsPxoxiZka3"
      ]
    },
    "contracts/src/towns/facets/roles/RolesBase.sol": {
      "keccak256": "0x6d60abe95501b7954abeb346ae2a46fb8b8096df02980643d294f100bdb9214c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://0767498edb6dfc2bfdf8b8a16ba64ae0930af6fa532ed6ff9041387c062632b1",
        "dweb:/ipfs/QmYCb9EYU2BjcMJN1pobrLZkaWidw7z6zcomRxFYK9mZAU"
      ]
    },
    "contracts/src/towns/facets/roles/RolesStorage.sol": {
      "keccak256": "0x063868e1d6fb4845966f5b2322e90bbfda45e46252e91f0b062ebc33ad753eb3",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://18602dced39d60b966ecd5092ab9580e45414c91145881d366c5e01e65732f49",
        "dweb:/ipfs/QmXdqTsS62BpyhzSX9UmKCwqKEM97CzEuc9mZnWP5gemuw"
      ]
    },
    "contracts/src/utils/StringSet.sol": {
      "keccak256": "0x3c9d29fdec8d96b627600dc69aa8e164c992162028d877df89c062da32b6e319",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://ab4f8ad17edac234b55f2c5b5a45a2956d82d0b64f70e04350edd879d2f0d1e6",
        "dweb:/ipfs/QmeqwedjAGMjfgizTjspVi5eEojEe8S1ezJFLFafPcfAjK"
      ]
    },
    "contracts/src/utils/Validator.sol": {
      "keccak256": "0xb8d6d023395c2611e308cb09606dc9e49dce0d985a75f20572aeed590d738f50",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://144807c8826c643f74c48e3589243ac4b05dffd0a00b861b75ce46451224be64",
        "dweb:/ipfs/QmazGzxM9owCyKTV1cY46PiMHXdApYJR221Lm9YMcn7J72"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
      "license": "MIT",
      "urls": [
        "bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
        "dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    }
  },
  "version": 1
}