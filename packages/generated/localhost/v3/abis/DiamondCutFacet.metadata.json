{
  "compiler": {
    "version": "0.8.23+commit.f704f362"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_FunctionAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_FunctionDoesNotExist",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_FunctionFromSameFacetAlreadyExists",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_ImmutableFacet",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "init",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidContract",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidFacet",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidFacetCutAction",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidFacetCutLength",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          },
          {
            "internalType": "bytes4",
            "name": "selector",
            "type": "bytes4"
          }
        ],
        "name": "DiamondCut_InvalidFacetRemoval",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "facet",
            "type": "address"
          }
        ],
        "name": "DiamondCut_InvalidFacetSelectors",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DiamondCut_InvalidSelector",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initializable_AlreadyInitialized",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_InInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Initializable_NotInInitializingState",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_AlreadySupported",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Introspection_NotSupported",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Ownable__NotOwner",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Ownable__ZeroAddress",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "facetAddress",
                "type": "address"
              },
              {
                "internalType": "enum IDiamond.FacetCutAction",
                "name": "action",
                "type": "uint8"
              },
              {
                "internalType": "bytes4[]",
                "name": "functionSelectors",
                "type": "bytes4[]"
              }
            ],
            "indexed": false,
            "internalType": "struct IDiamond.FacetCut[]",
            "name": "facetCuts",
            "type": "tuple[]"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "init",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "initPayload",
            "type": "bytes"
          }
        ],
        "name": "DiamondCut",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "version",
            "type": "uint32"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "InterfaceRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "__DiamondCut_init",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "facetAddress",
                "type": "address"
              },
              {
                "internalType": "enum IDiamond.FacetCutAction",
                "name": "action",
                "type": "uint8"
              },
              {
                "internalType": "bytes4[]",
                "name": "functionSelectors",
                "type": "bytes4[]"
              }
            ],
            "internalType": "struct IDiamond.FacetCut[]",
            "name": "facetCuts",
            "type": "tuple[]"
          },
          {
            "internalType": "address",
            "name": "init",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "initPayload",
            "type": "bytes"
          }
        ],
        "name": "diamondCut",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "events": {
        "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "params": {
            "facetCuts": "Facet addresses and function selectors.",
            "init": "Address of contract or facet to execute initPayload.",
            "initPayload": "A function call, including function selector and arguments."
          }
        },
        "OwnershipTransferred(address,address)": {
          "details": "This emits when ownership of a contract changes."
        }
      },
      "kind": "dev",
      "methods": {
        "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "params": {
            "facetCuts": "Facet addresses and function selectors.",
            "init": "Address of contract or facet to execute initPayload.",
            "initPayload": "A function call, including function selector and arguments. Executed with delegatecall on init address."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "events": {
        "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "notice": "Event emitted when facets are added/removed/replaced"
        },
        "InterfaceAdded(bytes4)": {
          "notice": "Emitted when an interface is added to the contract via `_addInterface`."
        },
        "InterfaceRemoved(bytes4)": {
          "notice": "Emitted when an interface is removed from the contract via `_removeInterface`."
        }
      },
      "kind": "user",
      "methods": {
        "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
          "notice": "Add/replace/remove any number of functions and optionally execute a function with delegatecall"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/diamond/facets/cut/DiamondCutFacet.sol": "DiamondCutFacet"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/math/=lib/prb-math/src/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":account-abstraction/=lib/account-abstraction/contracts/",
      ":base64-sol/=lib/base64/",
      ":base64/=lib/base64/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-math/=lib/prb-math/src/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/diamond/IDiamond.sol": {
      "keccak256": "0xd4907618ad3b9847c656008815820f23a89a587e408712b450cff075625e1553",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://652645a543f65b0415327a8a88398fc7835b1d6ee01df8c898f9e43867d02714",
        "dweb:/ipfs/QmPXt4Kks2o5CJKbT8U1mCryQJP6EMzzP5kdcqUFvXX7y5"
      ]
    },
    "contracts/src/diamond/facets/Facet.sol": {
      "keccak256": "0xecbb7e8de0dae5bdbcbda879436335abac6808bcc2e14f1f4e9efbdc77c4e8be",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://b7b5446461a1492f16c86137ce49a699d8a3452e2174c5568b97f8d2d4bc85a7",
        "dweb:/ipfs/QmY74odf1qgTwBV3wjF12rV8TXs3DiNoMm9Pg9S8w2F4VP"
      ]
    },
    "contracts/src/diamond/facets/cut/DiamondCutBase.sol": {
      "keccak256": "0x20607fefd986323ef1f73d2cc89b88bd30ab8936a8ffe26e4e1e8080c760cd90",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://9f9ea0ad6c8027fdd1bb061aa9d938e1cf10689c36d3a9a9ea247d6ed78794a5",
        "dweb:/ipfs/QmboVBP4LdKxRfren85gz81VRyVR5AUmv5YDtsXn13wuby"
      ]
    },
    "contracts/src/diamond/facets/cut/DiamondCutFacet.sol": {
      "keccak256": "0xfa7c216c41e95f675c5763e97622c61349a94510d45d9c08c24282d85f24a2c5",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://dbc5de1ab9212db8c38baf5560453bb9edcda5054335c2d29f5a7d8d7a1ca6de",
        "dweb:/ipfs/QmW6juTkWA8J2CsiLWSehNYPs3j32NDNi7sKcmA1fobbX7"
      ]
    },
    "contracts/src/diamond/facets/cut/DiamondCutStorage.sol": {
      "keccak256": "0xd7104be26467ee3f794843008c90093d12ec863f3c8de1314e0d102e3a669a4c",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1178a6ddd51413ff1444358e09c6f250fb8b8f101899eb90351a8a840fe8c343",
        "dweb:/ipfs/QmWhyzX1mY3ZxNmqHyPooCPqcgbroV9h6KgQHET1SBMXih"
      ]
    },
    "contracts/src/diamond/facets/cut/IDiamondCut.sol": {
      "keccak256": "0xa5985f00fabb7f6e5925542c9d0c955d4e7ec4f9ffe59d0fa81d75bed7ecdd55",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://2ebbb450aac3c12f690d7457d04d6fc53736b36cc60dcd757e11840335103688",
        "dweb:/ipfs/QmbcjTgejYrj3m2Lj9hHpCe2wt63fmLhhN6aY8XFoScitw"
      ]
    },
    "contracts/src/diamond/facets/initializable/Initializable.sol": {
      "keccak256": "0x74f93da9ffed901d60051d3491adc2d029d0f61d707c28eb7d177ee52a489492",
      "license": "MIT",
      "urls": [
        "bzz-raw://7c1689c778f69b56e622d886d129944fba1e8339afc85fad2212de0c9bc62e18",
        "dweb:/ipfs/QmbEqQmSE9NaPP3JmrPHpLvfzXt66sMvkJSSq13TiKSWXi"
      ]
    },
    "contracts/src/diamond/facets/initializable/InitializableStorage.sol": {
      "keccak256": "0x278589764eab56d2f12e536c168a83f8170918b1dd8811f4a8463b3e720c95ba",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f19d4d8f41d28de52ef25fbce3eb29ce5fd57c12b806dda64c27e535a6fa43b6",
        "dweb:/ipfs/QmPj1TyysUzfBYzNCBDF4AK14mGjcGtPcGfYNoSb2t3U7w"
      ]
    },
    "contracts/src/diamond/facets/introspection/IERC165.sol": {
      "keccak256": "0x243cfeefa64ba07bee887b0b03704147f9bd2f25571272a6ebca3ba684af1b00",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://1aed67ea7251fad9dbfb58a30f59f7edd81d48d7f6b193b98f957be359653361",
        "dweb:/ipfs/QmQauJL4nFMN3QDutjWezRbBjLX5GsTWt5jeLfkX4JW64T"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionBase.sol": {
      "keccak256": "0x5379ee00fe8945cb6820e9f3692c1f141ab2bacb286ac39f096857bd530f91ca",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://90c08f3e8e8fc64264ac94bc8005286e881760b0c776a9b0a2e679e4cff0237a",
        "dweb:/ipfs/QmXcpnF9hcUH7jGvEySkNBRybYYrcGyUjkUHXuTex886cJ"
      ]
    },
    "contracts/src/diamond/facets/introspection/IntrospectionStorage.sol": {
      "keccak256": "0x6dfdf3a4b7b09bd162e9571abe96ac85244f4b26d1ecbe3cd0c4bf534413445a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://e454b9dd354536d1defe593d88dbb8f7c4d8d46d7bf855d39a3eb9bf07d7c349",
        "dweb:/ipfs/QmaZFpCsdutxFcpuWVnjiAUb17vLqnhhQ23tv8my86h8u1"
      ]
    },
    "contracts/src/diamond/facets/ownable/IERC173.sol": {
      "keccak256": "0xec6475a73e1229430edadb6fd3e32f1599ebb8af78dbbc762d54ded196e534ae",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://46e9fef226666c827f408b5d2c9061600fa5233ddf5fcbc3a2b8956d89e8a872",
        "dweb:/ipfs/Qmd6L6wtehyrD8XwKqFD7gG5hJxsBZ1ja6hGSf2dtN4XEx"
      ]
    },
    "contracts/src/diamond/facets/ownable/OwnableBase.sol": {
      "keccak256": "0x6dd67541350d05fa7980a6497c1e372290e363c40c765a0ce4b7795c38510762",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3eadd97e12aff7228d28e5f9cb27dcddcf7764296d2a72ad703c3765376d50c4",
        "dweb:/ipfs/QmP5hGb6Nj64XCpG4s3sdoYR3sEt85AwDy4hcjoigNxYDa"
      ]
    },
    "contracts/src/diamond/facets/ownable/OwnableStorage.sol": {
      "keccak256": "0x9d27c81f90cb91d1135d440d231776c1749c0836078668a2293f03fa6596f835",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://996d047c91c6f1445bb784851cf7182d9fca47c198829f9897590815d1865923",
        "dweb:/ipfs/QmNSuLTojYzf5BD8oWkdn3Vavqhw6zR6Vugkb1toGopBoB"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
      "license": "MIT",
      "urls": [
        "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
        "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
      "license": "MIT",
      "urls": [
        "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
        "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
      ]
    }
  },
  "version": 1
}