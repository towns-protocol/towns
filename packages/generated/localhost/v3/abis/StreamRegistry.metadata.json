{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "streamId",
                "type": "string"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              },
              {
                "internalType": "bytes32",
                "name": "genesisMiniblockHash",
                "type": "bytes32"
              }
            ],
            "internalType": "struct StreamRegistry.Stream",
            "name": "newStream",
            "type": "tuple"
          }
        ],
        "name": "allocateStream",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "errAlreadyExists",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "errNotFound",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "errOutOfBounds",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_streamId",
            "type": "string"
          }
        ],
        "name": "getStream",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "streamId",
                "type": "string"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              },
              {
                "internalType": "bytes32",
                "name": "genesisMiniblockHash",
                "type": "bytes32"
              }
            ],
            "internalType": "struct StreamRegistry.Stream",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "name": "getStreamByIndex",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "streamId",
                "type": "string"
              },
              {
                "internalType": "address[]",
                "name": "nodes",
                "type": "address[]"
              },
              {
                "internalType": "bytes32",
                "name": "genesisMiniblockHash",
                "type": "bytes32"
              }
            ],
            "internalType": "struct StreamRegistry.Stream",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getStreamsLength",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/src/river/registry/StreamRegistry.sol": "StreamRegistry"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "appendCBOR": false,
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":@prb/math/=lib/prb-math/src/",
      ":@prb/test/=lib/prb-test/src/",
      ":ERC721A/=lib/ERC721A/contracts/",
      ":base64-sol/=lib/base64/",
      ":base64/=lib/base64/",
      ":council/=lib/council/contracts/",
      ":ds-test/=lib/ds-test/src/",
      ":erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ":operator-filter-registry/=lib/operator-filter-registry/",
      ":prb-math/=lib/prb-math/src/",
      ":prb-test/=lib/prb-test/src/"
    ]
  },
  "sources": {
    "contracts/src/river/registry/StreamRegistry.sol": {
      "keccak256": "0xb96993753638a43769f761754c4ad1725fc89104bf02ab59719d6724c4a6fca3",
      "license": "MIT",
      "urls": [
        "bzz-raw://bedb2f472f44d739baad5ace9f4c102940e37874ac815056b5554582829d5ab2",
        "dweb:/ipfs/QmR8bZdR7AaaaCFfeFq2w8SqLHboKEr1uA9j76TcVgpvxM"
      ]
    }
  },
  "version": 1
}